# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets Team
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-20 10:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../templating.rst:4
msgid "Templates"
msgstr "模板"

#: ../../templating.rst:6
msgid ""
"Flask leverages Jinja2 as template engine.  You are obviously free to use"
" a different template engine, but you still have to install Jinja2 to run"
" Flask itself.  This requirement is necessary to enable rich extensions. "
"An extension can depend on Jinja2 being present."
msgstr ""

#: ../../templating.rst:11
msgid ""
"This section only gives a very quick introduction into how Jinja2 is "
"integrated into Flask.  If you want information on the template engine's "
"syntax itself, head over to the official `Jinja2 Template Documentation "
"<http://jinja.pocoo.org/docs/templates>`_ for more information."
msgstr ""

#: ../../templating.rst:18
msgid "Jinja Setup"
msgstr "Jinja 设置"

#: ../../templating.rst:20
msgid "Unless customized, Jinja2 is configured by Flask as follows:"
msgstr "除非定制, 否则Jinja2由Flask配置如下:"

#: ../../templating.rst:22
msgid ""
"autoescaping is enabled for all templates ending in ``.html``, ``.htm``, "
"``.xml`` as well as ``.xhtml`` when using "
":func:`~flask.templating.render_template`."
msgstr ""

#: ../../templating.rst:25
msgid ""
"autoescaping is enabled for all strings when using "
":func:`~flask.templating.render_template_string`."
msgstr "使用时, 对所有字符串启用autoescaping:func:`~flask.templating.render_template_string`. "

#: ../../templating.rst:27
msgid ""
"a template has the ability to opt in/out autoescaping with the ``{% "
"autoescape %}`` tag."
msgstr "模板可以使用``{％autoescape％}``标签选择加入/退出自动加载. "

#: ../../templating.rst:29
msgid ""
"Flask inserts a couple of global functions and helpers into the Jinja2 "
"context, additionally to the values that are present by default."
msgstr "除了默认存在的值之外, Flask还将一些全局函数和帮助程序插入到Jinja2上下文中. "

#: ../../templating.rst:34
msgid "Standard Context"
msgstr "标准背景"

#: ../../templating.rst:36
msgid ""
"The following global variables are available within Jinja2 templates by "
"default:"
msgstr "默认情况下, Jinja2模板中提供以下全局变量:"

#: ../../templating.rst:42
msgid "The current configuration object (:data:`flask.config`)"
msgstr "当前配置对象(:data:`flask.config`)"

#: ../../templating.rst:46
msgid "This is now always available, even in imported templates."
msgstr "即使在导入的模板中, 现在也始终可用. "

#: ../../templating.rst:52
msgid ""
"The current request object (:class:`flask.request`).  This variable is "
"unavailable if the template was rendered without an active request "
"context."
msgstr ""

#: ../../templating.rst:59
msgid ""
"The current session object (:class:`flask.session`).  This variable is "
"unavailable if the template was rendered without an active request "
"context."
msgstr ""

#: ../../templating.rst:66
msgid ""
"The request-bound object for global variables (:data:`flask.g`).  This "
"variable is unavailable if the template was rendered without an active "
"request context."
msgstr ""

#: ../../templating.rst:73
msgid "The :func:`flask.url_for` function."
msgstr "The :func:`flask.url_for` function."

#: ../../templating.rst:78
msgid "The :func:`flask.get_flashed_messages` function."
msgstr "The :func:`flask.get_flashed_messages` function."

#: ../../templating.rst:80
msgid "The Jinja Context Behavior"
msgstr "金贾语境行为"

#: ../../templating.rst:82
msgid ""
"These variables are added to the context of variables, they are not "
"global variables.  The difference is that by default these will not show "
"up in the context of imported templates.  This is partially caused by "
"performance considerations, partially to keep things explicit."
msgstr ""

#: ../../templating.rst:87
msgid ""
"What does this mean for you?  If you have a macro you want to import, "
"that needs to access the request object you have two possibilities:"
msgstr "这对你意味着什么？如果您有要导入的宏, 则需要访问请求对象, 您有两种可能:"

#: ../../templating.rst:90
msgid ""
"you explicitly pass the request to the macro as parameter, or the "
"attribute of the request object you are interested in."
msgstr "您将请求显式传递给宏作为参数, 或您感兴趣的请求对象的属性. "

#: ../../templating.rst:92
msgid "you import the macro \"with context\"."
msgstr "you import the macro \"with context\"."

#: ../../templating.rst:94
msgid "Importing with context looks like this:"
msgstr "使用上下文导入如下所示:"

#: ../../templating.rst:101
msgid "Standard Filters"
msgstr "标准过滤器"

#: ../../templating.rst:103
msgid ""
"These filters are available in Jinja2 additionally to the filters "
"provided by Jinja2 itself:"
msgstr "除了Jinja2本身提供的过滤器之外, Jinja2还提供这些过滤器:"

#: ../../templating.rst:109
msgid ""
"This function converts the given object into JSON representation.  This "
"is for example very helpful if you try to generate JavaScript on the fly."
msgstr "此函数将给定对象转换为JSON表示. 例如, 如果您尝试动态生成JavaScript, 这将非常有用. "

#: ../../templating.rst:119
msgid ""
"It is also safe to use the output of `|tojson` in a *single-quoted* HTML "
"attribute:"
msgstr "在*单引号* HTML属性中使用`| tojson`的输出也是安全的:"

#: ../../templating.rst:128
msgid ""
"Note that in versions of Flask prior to 0.10, if using the output of "
"``|tojson`` inside ``script``, make sure to disable escaping with "
"``|safe``. In Flask 0.10 and above, this happens automatically."
msgstr ""

#: ../../templating.rst:133
msgid "Controlling Autoescaping"
msgstr "控制自动调整"

#: ../../templating.rst:135
msgid ""
"Autoescaping is the concept of automatically escaping special characters "
"for you.  Special characters in the sense of HTML (or XML, and thus "
"XHTML) are ``&``, ``>``, ``<``, ``\"`` as well as ``'``.  Because these "
"characters carry specific meanings in documents on their own you have to "
"replace them by so called \"entities\" if you want to use them for text."
"  Not doing so would not only cause user frustration by the inability to "
"use these characters in text, but can also lead to security problems.  "
"(see :ref:`xss`)"
msgstr ""

#: ../../templating.rst:144
msgid ""
"Sometimes however you will need to disable autoescaping in templates. "
"This can be the case if you want to explicitly inject HTML into pages, "
"for example if they come from a system that generates secure HTML like a "
"markdown to HTML converter."
msgstr ""

#: ../../templating.rst:149
msgid "There are three ways to accomplish that:"
msgstr "有三种方法可以实现这一目标:"

#: ../../templating.rst:151
msgid ""
"In the Python code, wrap the HTML string in a :class:`~flask.Markup` "
"object before passing it to the template.  This is in general the "
"recommended way."
msgstr ""

#: ../../templating.rst:154
msgid ""
"Inside the template, use the ``|safe`` filter to explicitly mark a string"
" as safe HTML (``{{ myvariable|safe }}``)"
msgstr "Inside the template, use the ``|safe`` filter to explicitly mark a string as safe HTML (``{{ myvariable|safe }}``)"

#: ../../templating.rst:156
msgid "Temporarily disable the autoescape system altogether."
msgstr "暂时禁用autoescape系统. "

#: ../../templating.rst:158
msgid ""
"To disable the autoescape system in templates, you can use the ``{% "
"autoescape %}`` block:"
msgstr "要在模板中禁用autoescape系统, 可以使用``{％autoescape％}``块:"

#: ../../templating.rst:168
msgid ""
"Whenever you do this, please be very cautious about the variables you are"
" using in this block."
msgstr "无论何时执行此操作, 请对此块中使用的变量非常谨慎. "

#: ../../templating.rst:174
msgid "Registering Filters"
msgstr "注册过滤器"

#: ../../templating.rst:176
msgid ""
"If you want to register your own filters in Jinja2 you have two ways to "
"do that.  You can either put them by hand into the "
":attr:`~flask.Flask.jinja_env` of the application or use the "
":meth:`~flask.Flask.template_filter` decorator."
msgstr ""

#: ../../templating.rst:181
msgid "The two following examples work the same and both reverse an object::"
msgstr "以下两个示例的工作方式相同, 都反转了一个对象::"

#: ../../templating.rst:191
msgid ""
"In case of the decorator the argument is optional if you want to use the "
"function name as name of the filter.  Once registered, you can use the "
"filter in your templates in the same way as Jinja2's builtin filters, for"
" example if you have a Python list in context called `mylist`::"
msgstr ""

#: ../../templating.rst:201
msgid "Context Processors"
msgstr "上下文处理器"

#: ../../templating.rst:203
msgid ""
"To inject new variables automatically into the context of a template, "
"context processors exist in Flask.  Context processors run before the "
"template is rendered and have the ability to inject new values into the "
"template context.  A context processor is a function that returns a "
"dictionary.  The keys and values of this dictionary are then merged with "
"the template context, for all templates in the app::"
msgstr ""

#: ../../templating.rst:214
msgid ""
"The context processor above makes a variable called `user` available in "
"the template with the value of `g.user`.  This example is not very "
"interesting because `g` is available in templates anyways, but it gives "
"an idea how this works."
msgstr ""

#: ../../templating.rst:219
msgid ""
"Variables are not limited to values; a context processor can also make "
"functions available to templates (since Python allows passing around "
"functions)::"
msgstr ""

#: ../../templating.rst:229
msgid ""
"The context processor above makes the `format_price` function available "
"to all templates::"
msgstr "上面的上下文处理器使`format_price`函数可用于所有模板::"

#: ../../templating.rst:234
msgid ""
"You could also build `format_price` as a template filter (see :ref"
":`registering-filters`), but this demonstrates how to pass functions in a"
" context processor."
msgstr ""

