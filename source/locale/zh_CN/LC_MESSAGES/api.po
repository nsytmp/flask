# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets Team
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-20 10:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../api.rst:4
msgid "API"
msgstr "API"

#: ../../api.rst:8
msgid ""
"This part of the documentation covers all the interfaces of Flask.  For "
"parts where Flask depends on external libraries, we document the most "
"important right here and provide links to the canonical documentation."
msgstr "这部分文档涵盖了Flask的所有接口。对于Flask依赖于外部库的部分，我们在此处记录最重要的部分并提供规范文档的链接。"

#: ../../api.rst:14
msgid "Application Object"
msgstr "应用对象"

#: flask.Flask:1 of
msgid ""
"The flask object implements a WSGI application and acts as the central "
"object.  It is passed the name of the module or package of the "
"application.  Once it is created it will act as a central registry for "
"the view functions, the URL rules, template configuration and much more."
msgstr "flask对象实现了一个WSGI应用程序并充当中心对象。它传递了应用程序的模块或包的名称。一旦创建它，​​它将充当视图功能，URL规则，模板配置等的中央注册表。"

#: flask.Flask:6 of
msgid ""
"The name of the package is used to resolve resources from inside the "
"package or the folder the module is contained in depending on if the "
"package parameter resolves to an actual python package (a folder with an "
":file:`__init__.py` file inside) or a standard module (just a ``.py`` "
"file)."
msgstr ""

#: flask.Flask:11 of
msgid "For more information about resource loading, see :func:`open_resource`."
msgstr "For more information about resource loading, see :func:`open_resource`."

#: flask.Flask:13 of
msgid ""
"Usually you create a :class:`Flask` instance in your main module or in "
"the :file:`__init__.py` file of your package like this::"
msgstr "Usually you create a :class:`Flask` instance in your main module or in the :file:`__init__.py` file of your package like this::"

#: flask.Flask:19 of
msgid "About the First Parameter"
msgstr "About the First Parameter"

#: flask.Flask:21 of
msgid ""
"The idea of the first parameter is to give Flask an idea of what belongs "
"to your application.  This name is used to find resources on the "
"filesystem, can be used by extensions to improve debugging information "
"and a lot more."
msgstr ""

#: flask.Flask:26 of
msgid ""
"So it's important what you provide there.  If you are using a single "
"module, `__name__` is always the correct value.  If you however are using"
" a package, it's usually recommended to hardcode the name of your package"
" there."
msgstr ""

#: flask.Flask:31 of
msgid ""
"For example if your application is defined in "
":file:`yourapplication/app.py` you should create it with one of the two "
"versions below::"
msgstr ""

#: flask.Flask:37 of
msgid ""
"Why is that?  The application will work even with `__name__`, thanks to "
"how resources are looked up.  However it will make debugging more "
"painful.  Certain extensions can make assumptions based on the import "
"name of your application.  For example the Flask-SQLAlchemy extension "
"will look for the code in your application that triggered an SQL query in"
" debug mode.  If the import name is not properly set up, that debugging "
"information is lost.  (For example it would only pick up SQL queries in "
"`yourapplication.app` and not `yourapplication.views.frontend`)"
msgstr ""

#: flask.Flask:58 of
msgid "The ``host_matching`` and ``static_host`` parameters were added."
msgstr "The ``host_matching`` and ``static_host`` parameters were added."

#: flask.Flask:61 of
msgid ""
"The ``subdomain_matching`` parameter was added. Subdomain matching needs "
"to be enabled manually now. Setting :data:`SERVER_NAME` does not "
"implicitly enable it."
msgstr ""

#: flask.Flask:55 of
msgid "The `root_path` parameter was added."
msgstr "The `root_path` parameter was added."

#: flask.Flask:51 of
msgid "The `instance_path` and `instance_relative_config` parameters were added."
msgstr "The `instance_path` and `instance_relative_config` parameters were added."

#: flask.Flask:47 of
msgid ""
"The `static_url_path`, `static_folder`, and `template_folder` parameters "
"were added."
msgstr "The `static_url_path`, `static_folder`, and `template_folder` parameters were added."

#: flask.Blueprint.add_app_template_filter
#: flask.Blueprint.add_app_template_global
#: flask.Blueprint.add_app_template_test flask.Blueprint.app_template_filter
#: flask.Blueprint.app_template_global flask.Blueprint.app_template_test
#: flask.Blueprint.open_resource flask.Blueprint.register flask.Config
#: flask.Config.from_envvar flask.Config.from_json flask.Config.from_object
#: flask.Config.from_pyfile flask.Config.get_namespace flask.Flask
#: flask.Flask.add_template_filter flask.Flask.add_template_global
#: flask.Flask.add_template_test flask.Flask.add_url_rule
#: flask.Flask.do_teardown_request flask.Flask.endpoint
#: flask.Flask.errorhandler flask.Flask.make_response
#: flask.Flask.open_instance_resource flask.Flask.open_resource
#: flask.Flask.open_session flask.Flask.process_response
#: flask.Flask.register_blueprint flask.Flask.request_context flask.Flask.route
#: flask.Flask.run flask.Flask.save_session flask.Flask.template_filter
#: flask.Flask.template_global flask.Flask.template_test
#: flask.Flask.test_request_context flask.Flask.update_template_context
#: flask.Flask.wsgi_app flask.Request.application flask.Request.get_json
#: flask.Response.get_json flask.Response.set_cookie flask.cli.FlaskGroup
#: flask.cli.FlaskGroup.main flask.cli.load_dotenv flask.ctx._AppCtxGlobals.get
#: flask.ctx._AppCtxGlobals.pop flask.ctx._AppCtxGlobals.setdefault flask.flash
#: flask.get_flashed_messages flask.get_template_attribute
#: flask.json.tag.TaggedJSONSerializer.register flask.redirect
#: flask.render_template flask.render_template_string flask.safe_join
#: flask.send_file flask.send_from_directory
#: flask.testing.FlaskCliRunner.invoke flask.testing.FlaskClient.open
#: flask.url_for of
msgid "参数"
msgstr "参数"

#: flask.Flask:66 of
msgid "the name of the application package"
msgstr "the name of the application package"

#: flask.Flask:67 of
msgid ""
"can be used to specify a different path for the static files on the web."
"  Defaults to the name of the `static_folder` folder."
msgstr "can be used to specify a different path for the static files on the web.  Defaults to the name of the `static_folder` folder."

#: flask.Flask:70 of
msgid ""
"the folder with static files that should be served at `static_url_path`."
"  Defaults to the ``'static'`` folder in the root path of the "
"application."
msgstr ""

#: flask.Flask:73 of
msgid ""
"the host to use when adding the static route. Defaults to None. Required "
"when using ``host_matching=True`` with a ``static_folder`` configured."
msgstr "the host to use when adding the static route. Defaults to None. Required when using ``host_matching=True`` with a ``static_folder`` configured."

#: flask.Flask:76 of
msgid "set ``url_map.host_matching`` attribute. Defaults to False."
msgstr "set ``url_map.host_matching`` attribute. Defaults to False."

#: flask.Flask:78 of
msgid ""
"consider the subdomain relative to :data:`SERVER_NAME` when matching "
"routes. Defaults to False."
msgstr "consider the subdomain relative to :data:`SERVER_NAME` when matching routes. Defaults to False."

#: flask.Flask:80 of
msgid ""
"the folder that contains the templates that should be used by the "
"application.  Defaults to ``'templates'`` folder in the root path of the "
"application."
msgstr ""

#: flask.Flask:84 of
msgid ""
"An alternative instance path for the application. By default the folder "
"``'instance'`` next to the package or module is assumed to be the "
"instance path."
msgstr ""

#: flask.Flask:88 of
msgid ""
"if set to ``True`` relative filenames for loading the config are assumed "
"to be relative to the instance path instead of the application root."
msgstr "if set to ``True`` relative filenames for loading the config are assumed to be relative to the instance path instead of the application root."

#: flask.Flask:92 of
msgid ""
"Flask by default will automatically calculate the path to the root of the"
" application.  In certain situations this cannot be achieved (for "
"instance if the package is a Python 3 namespace package) and needs to be "
"manually defined."
msgstr ""

#: flask.Flask.add_template_filter:1 of
msgid ""
"Register a custom template filter.  Works exactly like the "
":meth:`template_filter` decorator."
msgstr "Register a custom template filter.  Works exactly like the :meth:`template_filter` decorator."

#: flask.Blueprint.add_app_template_filter:5
#: flask.Blueprint.app_template_filter:4 flask.Flask.add_template_filter:4
#: flask.Flask.template_filter:9 of
msgid "the optional name of the filter, otherwise the function name will be used."
msgstr "the optional name of the filter, otherwise the function name will be used."

#: flask.Flask.add_template_global:1 of
msgid ""
"Register a custom template global function. Works exactly like the "
":meth:`template_global` decorator."
msgstr "Register a custom template global function. Works exactly like the :meth:`template_global` decorator."

#: flask.Flask.add_template_global:6 flask.Flask.template_global:11 of
msgid ""
"the optional name of the global function, otherwise the function name "
"will be used."
msgstr "the optional name of the global function, otherwise the function name will be used."

#: flask.Flask.add_template_test:1 of
msgid ""
"Register a custom template test.  Works exactly like the "
":meth:`template_test` decorator."
msgstr "Register a custom template test.  Works exactly like the :meth:`template_test` decorator."

#: flask.Blueprint.add_app_template_test:7 flask.Blueprint.app_template_test:6
#: flask.Flask.add_template_test:6 flask.Flask.template_test:16 of
msgid "the optional name of the test, otherwise the function name will be used."
msgstr "the optional name of the test, otherwise the function name will be used."

#: flask.Flask.add_url_rule:1 of
msgid ""
"Connects a URL rule.  Works exactly like the :meth:`route` decorator.  If"
" a view_func is provided it will be registered with the endpoint."
msgstr "Connects a URL rule.  Works exactly like the :meth:`route` decorator.  If a view_func is provided it will be registered with the endpoint."

#: flask.Flask.add_url_rule:5 of
msgid "Basically this example::"
msgstr "Basically this example::"

#: flask.Flask.add_url_rule:11 of
msgid "Is equivalent to the following::"
msgstr "Is equivalent to the following::"

#: flask.Flask.add_url_rule:17 of
msgid ""
"If the view_func is not provided you will need to connect the endpoint to"
" a view function like so::"
msgstr "If the view_func is not provided you will need to connect the endpoint to a view function like so::"

#: flask.Flask.add_url_rule:22 of
msgid ""
"Internally :meth:`route` invokes :meth:`add_url_rule` so if you want to "
"customize the behavior via subclassing you only need to change this "
"method."
msgstr ""

#: flask.Flask.add_url_rule:26 flask.Flask.route:9 of
msgid "For more information refer to :ref:`url-route-registrations`."
msgstr "For more information refer to :ref:`url-route-registrations`."

#: flask.Flask.add_url_rule:31 of
msgid "``OPTIONS`` is added automatically as method."
msgstr "``OPTIONS`` is added automatically as method."

#: flask.Flask.add_url_rule:28 of
msgid "`view_func` parameter added."
msgstr "`view_func` parameter added."

#: ../../api.rst:739 flask.Flask.add_url_rule:34 flask.Flask.route:11 of
msgid "the URL rule as string"
msgstr "the URL rule as string"

#: flask.Flask.add_url_rule:35 flask.Flask.route:12 of
msgid ""
"the endpoint for the registered URL rule.  Flask itself assumes the name "
"of the view function as endpoint"
msgstr "the endpoint for the registered URL rule.  Flask itself assumes the name of the view function as endpoint"

#: flask.Flask.add_url_rule:38 of
msgid "the function to call when serving a request to the provided endpoint"
msgstr "the function to call when serving a request to the provided endpoint"

#: flask.Flask.add_url_rule:40 of
msgid ""
"controls whether the ``OPTIONS`` method should be added automatically. "
"This can also be controlled by setting the "
"``view_func.provide_automatic_options = False`` before adding the rule."
msgstr ""

#: flask.Flask.add_url_rule:44 flask.Flask.route:15 of
msgid ""
"the options to be forwarded to the underlying "
":class:`~werkzeug.routing.Rule` object.  A change to Werkzeug is handling"
" of method options.  methods is a list of methods this rule should be "
"limited to (``GET``, ``POST`` etc.).  By default a rule just listens for "
"``GET`` (and implicitly ``HEAD``). Starting with Flask 0.6, ``OPTIONS`` "
"is implicitly added and handled by the standard request handling."
msgstr ""

#: flask.Flask.after_request:1 of
msgid "Register a function to be run after each request."
msgstr "Register a function to be run after each request."

#: flask.Flask.after_request:3 of
msgid ""
"Your function must take one parameter, an instance of "
":attr:`response_class` and return a new response object or the same (see "
":meth:`process_response`)."
msgstr ""

#: flask.Flask.after_request:7 of
msgid ""
"As of Flask 0.7 this function might not be executed at the end of the "
"request in case an unhandled exception occurred."
msgstr "As of Flask 0.7 this function might not be executed at the end of the request in case an unhandled exception occurred."

#: flask.Flask.after_request_funcs:1 of
msgid ""
"A dictionary with lists of functions that should be called after each "
"request.  The key of the dictionary is the name of the blueprint this "
"function is active for, ``None`` for all requests.  This can for example "
"be used to close database connections. To register a function here, use "
"the :meth:`after_request` decorator."
msgstr ""

#: flask.Flask.app_context:1 of
msgid ""
"Create an :class:`~flask.ctx.AppContext`. Use as a ``with`` block to push"
" the context, which will make :data:`current_app` point at this "
"application."
msgstr ""

#: flask.Flask.app_context:5 of
msgid ""
"An application context is automatically pushed by "
":meth:`RequestContext.push() <flask.ctx.RequestContext.push>` when "
"handling a request, and when running a CLI command. Use this to manually "
"create a context outside of these situations."
msgstr ""

#: flask.Flask.app_context:15 of
msgid "See :doc:`/appcontext`."
msgstr "See :doc:`/appcontext`."

#: flask.Flask.auto_find_instance_path:1 of
msgid ""
"Tries to locate the instance path if it was not provided to the "
"constructor of the application class.  It will basically calculate the "
"path to a folder named ``instance`` next to your main file or the "
"package."
msgstr ""

#: flask.Flask.before_first_request:1 of
msgid ""
"Registers a function to be run before the first request to this instance "
"of the application."
msgstr "Registers a function to be run before the first request to this instance of the application."

#: flask.Flask.before_first_request:4 of
msgid ""
"The function will be called without any arguments and its return value is"
" ignored."
msgstr "The function will be called without any arguments and its return value is ignored."

#: flask.Flask.before_first_request_funcs:1 of
msgid ""
"A list of functions that will be called at the beginning of the first "
"request to this instance. To register a function, use the "
":meth:`before_first_request` decorator."
msgstr ""

#: flask.Flask.before_request:1 of
msgid "Registers a function to run before each request."
msgstr "Registers a function to run before each request."

#: flask.Flask.before_request:3 of
msgid ""
"For example, this can be used to open a database connection, or to load "
"the logged in user from the session."
msgstr "For example, this can be used to open a database connection, or to load the logged in user from the session."

#: flask.Flask.before_request:6 of
msgid ""
"The function will be called without any arguments. If it returns a non-"
"None value, the value is handled as if it was the return value from the "
"view, and further request handling is stopped."
msgstr ""

#: flask.Flask.before_request_funcs:1 of
msgid ""
"A dictionary with lists of functions that will be called at the beginning"
" of each request. The key of the dictionary is the name of the blueprint "
"this function is active for, or ``None`` for all requests. To register a "
"function, use the :meth:`before_request` decorator."
msgstr ""

#: flask.Flask.blueprints:1 of
msgid ""
"all the attached blueprints in a dictionary by name.  Blueprints can be "
"attached multiple times so this dictionary does not tell you how often "
"they got attached."
msgstr ""

#: flask.Flask.cli:1 of
msgid ""
"The click command line context for this application.  Commands registered"
" here show up in the :command:`flask` command once the application has "
"been discovered.  The default commands are provided by Flask itself and "
"can be overridden."
msgstr ""

#: flask.Flask.cli:6 of
msgid "This is an instance of a :class:`click.Group` object."
msgstr "This is an instance of a :class:`click.Group` object."

#: flask.Flask.config:1 of
msgid ""
"The configuration dictionary as :class:`Config`.  This behaves exactly "
"like a regular dictionary but supports additional methods to load a "
"config from files."
msgstr ""

#: flask.Flask.context_processor:1 of
msgid "Registers a template context processor function."
msgstr "Registers a template context processor function."

#: flask.Flask.create_global_jinja_loader:1 of
msgid ""
"Creates the loader for the Jinja2 environment.  Can be used to override "
"just the loader and keeping the rest unchanged.  It's discouraged to "
"override this function.  Instead one should override the "
":meth:`jinja_loader` function instead."
msgstr ""

#: flask.Flask.create_global_jinja_loader:6 of
msgid ""
"The global loader dispatches between the loaders of the application and "
"the individual blueprints."
msgstr "The global loader dispatches between the loaders of the application and the individual blueprints."

#: flask.Flask.create_jinja_environment:1 of
msgid ""
"Creates the Jinja2 environment based on :attr:`jinja_options` and "
":meth:`select_jinja_autoescape`.  Since 0.7 this also adds the Jinja2 "
"globals and filters after initialization.  Override this function to "
"customize the behavior."
msgstr ""

#: flask.Flask.create_jinja_environment:7 of
msgid ""
"``Environment.auto_reload`` set in accordance with "
"``TEMPLATES_AUTO_RELOAD`` configuration option."
msgstr "``Environment.auto_reload`` set in accordance with ``TEMPLATES_AUTO_RELOAD`` configuration option."

#: flask.Flask.create_url_adapter:1 of
msgid ""
"Creates a URL adapter for the given request. The URL adapter is created "
"at a point where the request context is not yet set up so the request is "
"passed explicitly."
msgstr ""

#: flask.Flask.create_url_adapter:11 of
msgid ""
":data:`SERVER_NAME` no longer implicitly enables subdomain matching. Use "
":attr:`subdomain_matching` instead."
msgstr ":data:`SERVER_NAME` no longer implicitly enables subdomain matching. Use :attr:`subdomain_matching` instead."

#: flask.Flask.create_url_adapter:7 of
msgid ""
"This can now also be called without a request object when the URL adapter"
" is created for the application context."
msgstr "This can now also be called without a request object when the URL adapter is created for the application context."

#: flask.Flask.debug:1 of
msgid ""
"Whether debug mode is enabled. When using ``flask run`` to start the "
"development server, an interactive debugger will be shown for unhandled "
"exceptions, and the server will be reloaded when code changes. This maps "
"to the :data:`DEBUG` config key. This is enabled when :attr:`env` is "
"``'development'`` and is overridden by the ``FLASK_DEBUG`` environment "
"variable. It may not behave as expected if set in code."
msgstr ""

#: flask.Flask.debug:9 of
msgid "**Do not enable debug mode when deploying in production.**"
msgstr "**Do not enable debug mode when deploying in production.**"

#: flask.Flask.debug:11 of
msgid ""
"Default: ``True`` if :attr:`env` is ``'development'``, or ``False`` "
"otherwise."
msgstr "Default: ``True`` if :attr:`env` is ``'development'``, or ``False`` otherwise."

#: flask.Flask.default_config:1 of
msgid "Default configuration parameters."
msgstr "Default configuration parameters."

#: flask.Flask.dispatch_request:1 of
msgid ""
"Does the request dispatching.  Matches the URL and returns the return "
"value of the view or error handler.  This does not have to be a response "
"object.  In order to convert the return value to a proper response "
"object, call :func:`make_response`."
msgstr ""

#: flask.Flask.dispatch_request:6 of
msgid ""
"This no longer does the exception handling, this code was moved to the "
"new :meth:`full_dispatch_request`."
msgstr "This no longer does the exception handling, this code was moved to the new :meth:`full_dispatch_request`."

#: flask.Flask.do_teardown_appcontext:1 of
msgid "Called right before the application context is popped."
msgstr "Called right before the application context is popped."

#: flask.Flask.do_teardown_appcontext:3 of
msgid ""
"When handling a request, the application context is popped after the "
"request context. See :meth:`do_teardown_request`."
msgstr "When handling a request, the application context is popped after the request context. See :meth:`do_teardown_request`."

#: flask.Flask.do_teardown_appcontext:6 of
msgid ""
"This calls all functions decorated with :meth:`teardown_appcontext`. Then"
" the :data:`appcontext_tearing_down` signal is sent."
msgstr "This calls all functions decorated with :meth:`teardown_appcontext`. Then the :data:`appcontext_tearing_down` signal is sent."

#: flask.Flask.do_teardown_appcontext:10 of
msgid "This is called by :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`."
msgstr "This is called by :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`."

#: flask.Flask.do_teardown_request:1 of
msgid ""
"Called after the request is dispatched and the response is returned, "
"right before the request context is popped."
msgstr "Called after the request is dispatched and the response is returned, right before the request context is popped."

#: flask.Flask.do_teardown_request:4 of
msgid ""
"This calls all functions decorated with :meth:`teardown_request`, and "
":meth:`Blueprint.teardown_request` if a blueprint handled the request. "
"Finally, the :data:`request_tearing_down` signal is sent."
msgstr ""

#: flask.Flask.do_teardown_request:9 of
msgid ""
"This is called by :meth:`RequestContext.pop() "
"<flask.ctx.RequestContext.pop>`, which may be delayed during testing to "
"maintain access to resources."
msgstr ""

#: flask.Flask.do_teardown_request:14 of
msgid ""
"An unhandled exception raised while dispatching the request. Detected "
"from the current exception information if not passed. Passed to each "
"teardown function."
msgstr ""

#: flask.Flask.do_teardown_request:18 of
msgid "Added the ``exc`` argument."
msgstr "Added the ``exc`` argument."

#: flask.Flask.endpoint:1 of
msgid "A decorator to register a function as an endpoint. Example::"
msgstr "A decorator to register a function as an endpoint. Example::"

#: flask.Flask.endpoint:8 of
msgid "the name of the endpoint"
msgstr "the name of the endpoint"

#: flask.Flask.env:1 of
msgid ""
"What environment the app is running in. Flask and extensions may enable "
"behaviors based on the environment, such as enabling debug mode. This "
"maps to the :data:`ENV` config key. This is set by the "
":envvar:`FLASK_ENV` environment variable and may not behave as expected "
"if set in code."
msgstr ""

#: flask.Flask.env:7 of
msgid "**Do not enable development when deploying in production.**"
msgstr "**Do not enable development when deploying in production.**"

#: flask.Flask.env:9 of
msgid "Default: ``'production'``"
msgstr "Default: ``'production'``"

#: flask.Flask.error_handler_spec:1 of
msgid ""
"A dictionary of all registered error handlers.  The key is ``None`` for "
"error handlers active on the application, otherwise the key is the name "
"of the blueprint.  Each key points to another dictionary where the key is"
" the status code of the http exception.  The special key ``None`` points "
"to a list of tuples where the first item is the class for the instance "
"check and the second the error handler function."
msgstr ""

#: flask.Flask.error_handler_spec:9 of
msgid "To register an error handler, use the :meth:`errorhandler` decorator."
msgstr "To register an error handler, use the :meth:`errorhandler` decorator."

#: flask.Flask.errorhandler:1 of
msgid "Register a function to handle errors by code or exception class."
msgstr "Register a function to handle errors by code or exception class."

#: flask.Flask.errorhandler:3 of
msgid ""
"A decorator that is used to register a function given an error code.  "
"Example::"
msgstr "A decorator that is used to register a function given an error code.  Example::"

#: flask.Flask.errorhandler:10 of
msgid "You can also register handlers for arbitrary exceptions::"
msgstr "You can also register handlers for arbitrary exceptions::"

#: flask.Flask.errorhandler:16 of
msgid ""
"Use :meth:`register_error_handler` instead of modifying "
":attr:`error_handler_spec` directly, for application wide error handlers."
msgstr "Use :meth:`register_error_handler` instead of modifying :attr:`error_handler_spec` directly, for application wide error handlers."

#: flask.Flask.errorhandler:21 of
msgid ""
"One can now additionally also register custom exception types that do not"
" necessarily have to be a subclass of the "
":class:`~werkzeug.exceptions.HTTPException` class."
msgstr ""

#: flask.Flask.errorhandler:26 of
msgid "the code as integer for the handler, or an arbitrary exception"
msgstr "the code as integer for the handler, or an arbitrary exception"

#: flask.Flask.extensions:1 of
msgid ""
"a place where extensions can store application specific state.  For "
"example this is where an extension could store database engines and "
"similar things.  For backwards compatibility extensions should register "
"themselves like this::"
msgstr ""

#: flask.Flask.extensions:10 of
msgid ""
"The key must match the name of the extension module. For example in case "
"of a \"Flask-Foo\" extension in `flask_foo`, the key would be ``'foo'``."
msgstr "The key must match the name of the extension module. For example in case of a \"Flask-Foo\" extension in `flask_foo`, the key would be ``'foo'``."

#: flask.Flask.finalize_request:1 of
msgid ""
"Given the return value from a view function this finalizes the request by"
" converting it into a response and invoking the postprocessing functions."
"  This is invoked for both normal request dispatching as well as error "
"handlers."
msgstr ""

#: flask.Flask.finalize_request:6 of
msgid ""
"Because this means that it might be called as a result of a failure a "
"special safe mode is available which can be enabled with the "
"`from_error_handler` flag.  If enabled, failures in response processing "
"will be logged and otherwise ignored."
msgstr ""

#: flask.Flask.finalize_request flask.Flask.raise_routing_exception
#: flask.Flask.try_trigger_before_first_request_functions of
msgid "internal"
msgstr "internal"

#: flask.Flask.full_dispatch_request:1 of
msgid ""
"Dispatches the request and on top of that performs request pre and "
"postprocessing as well as HTTP exception catching and error handling."
msgstr "Dispatches the request and on top of that performs request pre and postprocessing as well as HTTP exception catching and error handling."

#: flask.Blueprint.get_send_file_max_age:1 flask.Flask.get_send_file_max_age:1
#: of
msgid "Provides default cache_timeout for the :func:`send_file` functions."
msgstr "Provides default cache_timeout for the :func:`send_file` functions."

#: flask.Blueprint.get_send_file_max_age:3 flask.Flask.get_send_file_max_age:3
#: of
msgid ""
"By default, this function returns ``SEND_FILE_MAX_AGE_DEFAULT`` from the "
"configuration of :data:`~flask.current_app`."
msgstr "By default, this function returns ``SEND_FILE_MAX_AGE_DEFAULT`` from the configuration of :data:`~flask.current_app`."

#: flask.Blueprint.get_send_file_max_age:6 flask.Flask.get_send_file_max_age:6
#: of
msgid ""
"Static file functions such as :func:`send_from_directory` use this "
"function, and :func:`send_file` calls this function on "
":data:`~flask.current_app` when the given cache_timeout is ``None``. If a"
" cache_timeout is given in :func:`send_file`, that timeout is used; "
"otherwise, this method is called."
msgstr ""

#: flask.Blueprint.get_send_file_max_age:12
#: flask.Flask.get_send_file_max_age:12 of
msgid ""
"This allows subclasses to change the behavior when sending files based on"
" the filename.  For example, to set the cache timeout for .js files to 60"
" seconds::"
msgstr ""

#: flask.Flask.got_first_request:1 of
msgid ""
"This attribute is set to ``True`` if the application started handling the"
" first request."
msgstr "This attribute is set to ``True`` if the application started handling the first request."

#: flask.Flask.handle_exception:1 of
msgid ""
"Default exception handling that kicks in when an exception occurs that is"
" not caught.  In debug mode the exception will be re-raised immediately, "
"otherwise it is logged and the handler for a 500 internal server error is"
" used.  If no such handler exists, a default 500 internal server error "
"message is displayed."
msgstr ""

#: flask.Flask.handle_http_exception:1 of
msgid ""
"Handles an HTTP exception.  By default this will invoke the registered "
"error handlers and fall back to returning the exception as response."
msgstr "Handles an HTTP exception.  By default this will invoke the registered error handlers and fall back to returning the exception as response."

#: flask.Flask.handle_http_exception:5 of
msgid ""
"``RoutingException``, used internally for actions such as  slash "
"redirects during routing, is not passed to error  handlers."
msgstr "``RoutingException``, used internally for actions such as  slash redirects during routing, is not passed to error  handlers."

#: flask.Flask.handle_http_exception:10 of
msgid ""
"Exceptions are looked up by code *and* by MRO, so ``HTTPExcpetion`` "
"subclasses can be handled with a catch-all handler for the base "
"``HTTPException``."
msgstr ""

#: flask.Flask.handle_url_build_error:1 of
msgid "Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`."
msgstr "Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`."

#: flask.Flask.handle_user_exception:1 of
msgid ""
"This method is called whenever an exception occurs that should be "
"handled. A special case is :class:`~werkzeug .exceptions.HTTPException` "
"which is forwarded to the :meth:`handle_http_exception` method. This "
"function will either return a response value or reraise the exception "
"with the same traceback."
msgstr ""

#: flask.Flask.handle_user_exception:8 of
msgid ""
"Key errors raised from request data like ``form`` show the bad key in "
"debug mode rather than a generic bad request message."
msgstr "Key errors raised from request data like ``form`` show the bad key in debug mode rather than a generic bad request message."

#: flask.Blueprint.has_static_folder:1 flask.Flask.has_static_folder:1 of
msgid ""
"This is ``True`` if the package bound object's container has a folder for"
" static files."
msgstr "This is ``True`` if the package bound object's container has a folder for static files."

#: flask.Blueprint.import_name:1 flask.Flask.import_name:1 of
msgid ""
"The name of the package or module that this app belongs to. Do not change"
" this once it is set by the constructor."
msgstr "The name of the package or module that this app belongs to. Do not change this once it is set by the constructor."

#: flask.Flask.inject_url_defaults:1 of
msgid ""
"Injects the URL defaults for the given endpoint directly into the values "
"dictionary passed.  This is used internally and automatically called on "
"URL building."
msgstr ""

#: flask.Flask.instance_path:1 of
msgid "Holds the path to the instance folder."
msgstr "Holds the path to the instance folder."

#: flask.Flask.iter_blueprints:1 of
msgid "Iterates over all blueprints by the order they were registered."
msgstr "Iterates over all blueprints by the order they were registered."

#: flask.Flask.jinja_env:1 of
msgid "The Jinja2 environment used to load templates."
msgstr "The Jinja2 environment used to load templates."

#: flask.Blueprint.jinja_loader:1 flask.Flask.jinja_loader:1 of
msgid "The Jinja loader for this package bound object."
msgstr "The Jinja loader for this package bound object."

#: flask.Flask.jinja_options:1 of
msgid "Options that are passed directly to the Jinja2 environment."
msgstr "Options that are passed directly to the Jinja2 environment."

#: flask.Flask.log_exception:1 of
msgid ""
"Logs an exception.  This is called by :meth:`handle_exception` if "
"debugging is disabled and right before the handler is called. The default"
" implementation logs the exception as error on the :attr:`logger`."
msgstr ""

#: flask.Flask.logger:1 of
msgid "The ``'flask.app'`` logger, a standard Python :class:`~logging.Logger`."
msgstr "The ``'flask.app'`` logger, a standard Python :class:`~logging.Logger`."

#: flask.Flask.logger:4 of
msgid ""
"In debug mode, the logger's :attr:`~logging.Logger.level` will be set to "
":data:`~logging.DEBUG`."
msgstr "In debug mode, the logger's :attr:`~logging.Logger.level` will be set to :data:`~logging.DEBUG`."

#: flask.Flask.logger:7 of
msgid ""
"If there are no handlers configured, a default handler will be added. See"
" :ref:`logging` for more information."
msgstr "If there are no handlers configured, a default handler will be added. See :ref:`logging` for more information."

#: flask.Flask.logger:10 of
msgid ""
"Behavior was simplified. The logger is always named ``flask.app``. The "
"level is only set during configuration, it doesn't check ``app.debug`` "
"each time. Only one format is used, not different ones depending on "
"``app.debug``. No handlers are removed, and a handler is only added if no"
" handlers are already configured."
msgstr ""

#: flask.Flask.make_config:1 of
msgid ""
"Used to create the config attribute by the Flask constructor. The "
"`instance_relative` parameter is passed in from the constructor of Flask "
"(there named `instance_relative_config`) and indicates if the config "
"should be relative to the instance path or the root path of the "
"application."
msgstr ""

#: flask.Flask.make_default_options_response:1 of
msgid ""
"This method is called to create the default ``OPTIONS`` response. This "
"can be changed through subclassing to change the default behavior of "
"``OPTIONS`` responses."
msgstr ""

#: flask.Flask.make_null_session:1 of
msgid ""
"Creates a new instance of a missing session.  Instead of overriding this "
"method we recommend replacing the :class:`session_interface`."
msgstr "Creates a new instance of a missing session.  Instead of overriding this method we recommend replacing the :class:`session_interface`."

#: flask.Flask.make_response:1 of
msgid ""
"Convert the return value from a view function to an instance of "
":attr:`response_class`."
msgstr "Convert the return value from a view function to an instance of :attr:`response_class`."

#: flask.Flask.make_response:4 of
msgid ""
"the return value from the view function. The view function must return a "
"response. Returning ``None``, or the view ending without returning, is "
"not allowed. The following types are allowed for ``view_rv``:  ``str`` "
"(``unicode`` in Python 2)     A response object is created with the "
"string encoded to UTF-8     as the body.  ``bytes`` (``str`` in Python 2)"
"     A response object is created with the bytes as the body.  ``tuple``"
"     Either ``(body, status, headers)``, ``(body, status)``, or     "
"``(body, headers)``, where ``body`` is any of the other types     allowed"
" here, ``status`` is a string or an integer, and     ``headers`` is a "
"dictionary or a list of ``(key, value)``     tuples. If ``body`` is a "
":attr:`response_class` instance,     ``status`` overwrites the exiting "
"value and ``headers`` are     extended.  :attr:`response_class`     The "
"object is returned unchanged.  other :class:`~werkzeug.wrappers.Response`"
" class     The object is coerced to :attr:`response_class`.  "
":func:`callable`     The function is called as a WSGI application. The "
"result is     used to create a response object."
msgstr ""

#: flask.Flask.make_response:4 of
msgid ""
"the return value from the view function. The view function must return a "
"response. Returning ``None``, or the view ending without returning, is "
"not allowed. The following types are allowed for ``view_rv``:"
msgstr ""

#: flask.Flask.make_response:11 of
msgid "``str`` (``unicode`` in Python 2)"
msgstr "``str`` (``unicode`` in Python 2)"

#: flask.Flask.make_response:10 of
msgid "A response object is created with the string encoded to UTF-8 as the body."
msgstr "A response object is created with the string encoded to UTF-8 as the body."

#: flask.Flask.make_response:14 of
msgid "``bytes`` (``str`` in Python 2)"
msgstr "``bytes`` (``str`` in Python 2)"

#: flask.Flask.make_response:14 of
msgid "A response object is created with the bytes as the body."
msgstr "A response object is created with the bytes as the body."

#: flask.Flask.make_response:23 of
msgid "``tuple``"
msgstr "``tuple``"

#: flask.Flask.make_response:17 of
msgid ""
"Either ``(body, status, headers)``, ``(body, status)``, or ``(body, "
"headers)``, where ``body`` is any of the other types allowed here, "
"``status`` is a string or an integer, and ``headers`` is a dictionary or "
"a list of ``(key, value)`` tuples. If ``body`` is a "
":attr:`response_class` instance, ``status`` overwrites the exiting value "
"and ``headers`` are extended."
msgstr ""

#: flask.Flask.make_response:26 of
msgid ":attr:`response_class`"
msgstr ":attr:`response_class`"

#: flask.Flask.make_response:26 of
msgid "The object is returned unchanged."
msgstr "The object is returned unchanged."

#: flask.Flask.make_response:29 of
msgid "other :class:`~werkzeug.wrappers.Response` class"
msgstr "other :class:`~werkzeug.wrappers.Response` class"

#: flask.Flask.make_response:29 of
msgid "The object is coerced to :attr:`response_class`."
msgstr "The object is coerced to :attr:`response_class`."

#: flask.Flask.make_response:33 of
msgid ":func:`callable`"
msgstr ":func:`callable`"

#: flask.Flask.make_response:32 of
msgid ""
"The function is called as a WSGI application. The result is used to "
"create a response object."
msgstr "The function is called as a WSGI application. The result is used to create a response object."

#: flask.Flask.make_response:35 of
msgid ""
"Previously a tuple was interpreted as the arguments for the response "
"object."
msgstr "Previously a tuple was interpreted as the arguments for the response object."

#: flask.Flask.make_shell_context:1 of
msgid ""
"Returns the shell context for an interactive shell for this application."
"  This runs all the registered shell context processors."
msgstr "Returns the shell context for an interactive shell for this application.  This runs all the registered shell context processors."

#: flask.Flask.name:1 of
msgid ""
"The name of the application.  This is usually the import name with the "
"difference that it's guessed from the run file if the import name is "
"main.  This name is used as a display name when Flask needs the name of "
"the application.  It can be set and overridden to change the value."
msgstr ""

#: flask.Flask.open_instance_resource:1 of
msgid ""
"Opens a resource from the application's instance folder "
"(:attr:`instance_path`).  Otherwise works like :meth:`open_resource`.  "
"Instance resources can also be opened for writing."
msgstr ""

#: flask.Blueprint.open_resource:19 flask.Flask.open_instance_resource:6
#: flask.Flask.open_resource:19 of
msgid ""
"the name of the resource.  To access resources within subfolders use "
"forward slashes as separator."
msgstr "the name of the resource.  To access resources within subfolders use forward slashes as separator."

#: flask.Blueprint.open_resource:21 flask.Flask.open_instance_resource:8
#: flask.Flask.open_resource:21 of
msgid "resource file opening mode, default is 'rb'."
msgstr "resource file opening mode, default is 'rb'."

#: flask.Blueprint.open_resource:1 flask.Flask.open_resource:1 of
msgid ""
"Opens a resource from the application's resource folder.  To see how this"
" works, consider the following folder structure::"
msgstr "Opens a resource from the application's resource folder.  To see how this works, consider the following folder structure::"

#: flask.Blueprint.open_resource:12 flask.Flask.open_resource:12 of
msgid ""
"If you want to open the :file:`schema.sql` file you would do the "
"following::"
msgstr "If you want to open the :file:`schema.sql` file you would do the following::"

#: flask.Flask.open_session:1 of
msgid ""
"Creates or opens a new session.  Default implementation stores all "
"session data in a signed cookie.  This requires that the "
":attr:`secret_key` is set.  Instead of overriding this method we "
"recommend replacing the :class:`session_interface`."
msgstr ""

#: flask.Flask.open_session:10 of
msgid "an instance of :attr:`request_class`."
msgstr "an instance of :attr:`request_class`."

#: flask.Flask.permanent_session_lifetime:1 of
msgid ""
"A :class:`~datetime.timedelta` which is used to set the expiration date "
"of a permanent session.  The default is 31 days which makes a permanent "
"session survive for roughly one month."
msgstr ""

#: flask.Flask.permanent_session_lifetime:5 of
msgid ""
"This attribute can also be configured from the config with the "
"``PERMANENT_SESSION_LIFETIME`` configuration key.  Defaults to "
"``timedelta(days=31)``"
msgstr ""

#: flask.Flask.preprocess_request:1 of
msgid ""
"Called before the request is dispatched. Calls "
":attr:`url_value_preprocessors` registered with the app and the current "
"blueprint (if any). Then calls :attr:`before_request_funcs` registered "
"with the app and the blueprint."
msgstr ""

#: flask.Flask.preprocess_request:6 of
msgid ""
"If any :meth:`before_request` handler returns a non-None value, the value"
" is handled as if it was the return value from the view, and further "
"request handling is stopped."
msgstr ""

#: flask.Flask.preserve_context_on_exception:1 of
msgid ""
"Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration "
"value in case it's set, otherwise a sensible default is returned."
msgstr "Returns the value of the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration value in case it's set, otherwise a sensible default is returned."

#: flask.Flask.process_response:1 of
msgid ""
"Can be overridden in order to modify the response object before it's sent"
" to the WSGI server.  By default this will call all the "
":meth:`after_request` decorated functions."
msgstr ""

#: flask.Flask.process_response:5 of
msgid ""
"As of Flask 0.5 the functions registered for after request execution are "
"called in reverse order of registration."
msgstr "As of Flask 0.5 the functions registered for after request execution are called in reverse order of registration."

#: flask.Flask.process_response:9 of
msgid "a :attr:`response_class` object."
msgstr "a :attr:`response_class` object."

#: flask.Config.from_envvar flask.Flask.process_response
#: flask.Request.application flask.Request.from_values flask.cli.load_dotenv
#: flask.testing.FlaskCliRunner.invoke of
msgid "返回"
msgstr "返回"

#: flask.Flask.process_response:10 of
msgid ""
"a new response object or the same, has to be an instance of "
":attr:`response_class`."
msgstr "a new response object or the same, has to be an instance of :attr:`response_class`."

#: flask.Flask.propagate_exceptions:1 of
msgid ""
"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration value in "
"case it's set, otherwise a sensible default is returned."
msgstr "Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration value in case it's set, otherwise a sensible default is returned."

#: flask.Flask.raise_routing_exception:1 of
msgid ""
"Exceptions that are recording during routing are reraised with this "
"method.  During debug we are not reraising redirect requests for non "
"``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising a different "
"error instead to help debug situations."
msgstr ""

#: flask.Flask.register_blueprint:1 of
msgid ""
"Register a :class:`~flask.Blueprint` on the application. Keyword "
"arguments passed to this method will override the defaults set on the "
"blueprint."
msgstr ""

#: flask.Flask.register_blueprint:5 of
msgid ""
"Calls the blueprint's :meth:`~flask.Blueprint.register` method after "
"recording the blueprint in the application's :attr:`blueprints`."
msgstr "Calls the blueprint's :meth:`~flask.Blueprint.register` method after recording the blueprint in the application's :attr:`blueprints`."

#: flask.Flask.register_blueprint:8 of
msgid "The blueprint to register."
msgstr "The blueprint to register."

#: flask.Flask.register_blueprint:9 of
msgid "Blueprint routes will be prefixed with this."
msgstr "Blueprint routes will be prefixed with this."

#: flask.Flask.register_blueprint:10 of
msgid "Blueprint routes will match on this subdomain."
msgstr "Blueprint routes will match on this subdomain."

#: flask.Flask.register_blueprint:11 of
msgid "Blueprint routes will use these default values for view arguments."
msgstr "Blueprint routes will use these default values for view arguments."

#: flask.Flask.register_blueprint:13 of
msgid ""
"Additional keyword arguments are passed to "
":class:`~flask.blueprints.BlueprintSetupState`. They can be accessed in "
":meth:`~flask.Blueprint.record` callbacks."
msgstr ""

#: flask.Flask.register_error_handler:1 of
msgid ""
"Alternative error attach function to the :meth:`errorhandler` decorator "
"that is more straightforward to use for non decorator usage."
msgstr "Alternative error attach function to the :meth:`errorhandler` decorator that is more straightforward to use for non decorator usage."

#: flask.Flask.request_context:1 of
msgid ""
"Create a :class:`~flask.ctx.RequestContext` representing a WSGI "
"environment. Use a ``with`` block to push the context, which will make "
":data:`request` point at this request."
msgstr ""

#: flask.Flask.request_context:5 flask.Flask.test_request_context:6 of
msgid "See :doc:`/reqcontext`."
msgstr "See :doc:`/reqcontext`."

#: flask.Flask.request_context:7 of
msgid ""
"Typically you should not call this from your own code. A request context "
"is automatically pushed by the :meth:`wsgi_app` when handling a request. "
"Use :meth:`test_request_context` to create an environment and context "
"instead of this method."
msgstr ""

#: flask.Flask.request_context:12 of
msgid "a WSGI environment"
msgstr "a WSGI environment"

#: flask.Blueprint.root_path:1 flask.Flask.root_path:1 of
msgid ""
"Absolute path to the package on the filesystem. Used to look up resources"
" contained in the package."
msgstr "Absolute path to the package on the filesystem. Used to look up resources contained in the package."

#: flask.Flask.route:1 of
msgid ""
"A decorator that is used to register a view function for a given URL "
"rule.  This does the same thing as :meth:`add_url_rule` but is intended "
"for decorator usage::"
msgstr ""

#: flask.Flask.run:1 of
msgid "Runs the application on a local development server."
msgstr "Runs the application on a local development server."

#: flask.Flask.run:3 of
msgid ""
"Do not use ``run()`` in a production setting. It is not intended to meet "
"security and performance requirements for a production server. Instead, "
"see :ref:`deployment` for WSGI server recommendations."
msgstr ""

#: flask.Flask.run:7 of
msgid ""
"If the :attr:`debug` flag is set the server will automatically reload for"
" code changes and show a debugger in case an exception happened."
msgstr "If the :attr:`debug` flag is set the server will automatically reload for code changes and show a debugger in case an exception happened."

#: flask.Flask.run:10 of
msgid ""
"If you want to run the application in debug mode, but disable the code "
"execution on the interactive debugger, you can pass ``use_evalex=False`` "
"as parameter.  This will keep the debugger's traceback screen active, but"
" disable code execution."
msgstr ""

#: flask.Flask.run:15 of
msgid ""
"It is not recommended to use this function for development with automatic"
" reloading as this is badly supported.  Instead you should be using the "
":command:`flask` command line script's ``run`` support."
msgstr ""

#: flask.Flask.run:19 of
msgid "Keep in Mind"
msgstr "Keep in Mind"

#: flask.Flask.run:21 of
msgid ""
"Flask will suppress any server error with a generic error page unless it "
"is in debug mode.  As such to enable just the interactive debugger "
"without the code reloading, you have to invoke :meth:`run` with "
"``debug=True`` and ``use_reloader=False``. Setting ``use_debugger`` to "
"``True`` without being in debug mode won't catch any exceptions because "
"there won't be any to catch."
msgstr ""

#: flask.Flask.run:29 of
msgid ""
"the hostname to listen on. Set this to ``'0.0.0.0'`` to have the server "
"available externally as well. Defaults to ``'127.0.0.1'`` or the host in "
"the ``SERVER_NAME`` config variable if present."
msgstr ""

#: flask.Flask.run:33 of
msgid ""
"the port of the webserver. Defaults to ``5000`` or the port defined in "
"the ``SERVER_NAME`` config variable if present."
msgstr "the port of the webserver. Defaults to ``5000`` or the port defined in the ``SERVER_NAME`` config variable if present."

#: flask.Flask.run:35 of
msgid "if given, enable or disable debug mode. See :attr:`debug`."
msgstr "if given, enable or disable debug mode. See :attr:`debug`."

#: flask.Flask.run:37 flask.cli.FlaskGroup:14 of
msgid ""
"Load the nearest :file:`.env` and :file:`.flaskenv` files to set "
"environment variables. Will also change the working directory to the "
"directory containing the first file found."
msgstr ""

#: flask.Flask.run:40 of
msgid ""
"the options to be forwarded to the underlying Werkzeug server. See "
":func:`werkzeug.serving.run_simple` for more information."
msgstr "the options to be forwarded to the underlying Werkzeug server. See :func:`werkzeug.serving.run_simple` for more information."

#: flask.Flask.run:44 flask.cli.FlaskGroup:20 of
msgid ""
"If installed, python-dotenv will be used to load environment variables "
"from :file:`.env` and :file:`.flaskenv` files."
msgstr "If installed, python-dotenv will be used to load environment variables from :file:`.env` and :file:`.flaskenv` files."

#: flask.Flask.run:48 of
msgid ""
"If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG` environment "
"variables will override :attr:`env` and :attr:`debug`."
msgstr "If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG` environment variables will override :attr:`env` and :attr:`debug`."

#: flask.Flask.run:52 of
msgid "Threaded mode is enabled by default."
msgstr "Threaded mode is enabled by default."

#: flask.Flask.run:54 of
msgid "The default port is now picked from the ``SERVER_NAME`` variable."
msgstr "The default port is now picked from the ``SERVER_NAME`` variable."

#: flask.Flask.save_session:1 of
msgid ""
"Saves the session if it needs updates.  For the default implementation, "
"check :meth:`open_session`.  Instead of overriding this method we "
"recommend replacing the :class:`session_interface`."
msgstr ""

#: flask.Flask.save_session:9 of
msgid ""
"the session to be saved (a "
":class:`~werkzeug.contrib.securecookie.SecureCookie` object)"
msgstr "the session to be saved (a :class:`~werkzeug.contrib.securecookie.SecureCookie` object)"

#: flask.Flask.save_session:12 of
msgid "an instance of :attr:`response_class`"
msgstr "an instance of :attr:`response_class`"

#: flask.Flask.secret_key:1 of
msgid ""
"If a secret key is set, cryptographic components can use this to sign "
"cookies and other things. Set this to a complex random value when you "
"want to use the secure cookie for instance."
msgstr ""

#: flask.Flask.secret_key:5 of
msgid ""
"This attribute can also be configured from the config with the "
":data:`SECRET_KEY` configuration key. Defaults to ``None``."
msgstr "This attribute can also be configured from the config with the :data:`SECRET_KEY` configuration key. Defaults to ``None``."

#: flask.Flask.select_jinja_autoescape:1 of
msgid ""
"Returns ``True`` if autoescaping should be active for the given template "
"name. If no template name is given, returns `True`."
msgstr "Returns ``True`` if autoescaping should be active for the given template name. If no template name is given, returns `True`."

#: flask.Flask.send_file_max_age_default:1 of
msgid ""
"A :class:`~datetime.timedelta` which is used as default cache_timeout for"
" the :func:`send_file` functions. The default is 12 hours."
msgstr "A :class:`~datetime.timedelta` which is used as default cache_timeout for the :func:`send_file` functions. The default is 12 hours."

#: flask.Flask.send_file_max_age_default:4 of
msgid ""
"This attribute can also be configured from the config with the "
"``SEND_FILE_MAX_AGE_DEFAULT`` configuration key. This configuration "
"variable can also be set with an integer value used as seconds. Defaults "
"to ``timedelta(hours=12)``"
msgstr ""

#: flask.Blueprint.send_static_file:1 flask.Flask.send_static_file:1 of
msgid ""
"Function used internally to send static files from the static folder to "
"the browser."
msgstr "Function used internally to send static files from the static folder to the browser."

#: flask.Flask.session_cookie_name:1 of
msgid "The secure cookie uses this for the name of the session cookie."
msgstr "The secure cookie uses this for the name of the session cookie."

#: flask.Flask.session_cookie_name:3 of
msgid ""
"This attribute can also be configured from the config with the "
"``SESSION_COOKIE_NAME`` configuration key.  Defaults to ``'session'``"
msgstr "This attribute can also be configured from the config with the ``SESSION_COOKIE_NAME`` configuration key.  Defaults to ``'session'``"

#: flask.Flask.session_interface:1 of
msgid ""
"the session interface to use.  By default an instance of "
":class:`~flask.sessions.SecureCookieSessionInterface` is used here."
msgstr "the session interface to use.  By default an instance of :class:`~flask.sessions.SecureCookieSessionInterface` is used here."

#: flask.Flask.shell_context_processor:1 of
msgid "Registers a shell context processor function."
msgstr "Registers a shell context processor function."

#: flask.Flask.shell_context_processors:1 of
msgid ""
"A list of shell context processor functions that should be run when a "
"shell context is created."
msgstr "A list of shell context processor functions that should be run when a shell context is created."

#: flask.Flask.should_ignore_error:1 of
msgid ""
"This is called to figure out if an error should be ignored or not as far "
"as the teardown system is concerned.  If this function returns ``True`` "
"then the teardown handlers will not be passed the error."
msgstr ""

#: flask.Blueprint.static_folder:1 flask.Flask.static_folder:1 of
msgid "The absolute path to the configured static folder."
msgstr "The absolute path to the configured static folder."

#: flask.Blueprint.static_url_path:1 flask.Flask.static_url_path:1 of
msgid "The URL prefix that the static route will be registered for."
msgstr "The URL prefix that the static route will be registered for."

#: flask.Flask.teardown_appcontext:1 of
msgid ""
"Registers a function to be called when the application context ends.  "
"These functions are typically also called when the request context is "
"popped."
msgstr ""

#: flask.Flask.teardown_appcontext:5 flask.Flask.teardown_request:6
#: flask.after_this_request:5 flask.copy_current_request_context:7 of
msgid "Example::"
msgstr "Example::"

#: flask.Flask.teardown_appcontext:12 of
msgid ""
"When ``ctx.pop()`` is executed in the above example, the teardown "
"functions are called just before the app context moves from the stack of "
"active contexts.  This becomes relevant if you are using such constructs "
"in tests."
msgstr ""

#: flask.Flask.teardown_appcontext:17 of
msgid ""
"Since a request context typically also manages an application context it "
"would also be called when you pop a request context."
msgstr "Since a request context typically also manages an application context it would also be called when you pop a request context."

#: flask.Flask.teardown_appcontext:20 of
msgid ""
"When a teardown function was called because of an unhandled exception it "
"will be passed an error object. If an :meth:`errorhandler` is registered,"
" it will handle the exception and the teardown will not receive it."
msgstr ""

#: flask.Flask.teardown_appcontext:25 flask.Flask.teardown_request:26 of
msgid "The return values of teardown functions are ignored."
msgstr "The return values of teardown functions are ignored."

#: flask.Flask.teardown_appcontext_funcs:1 of
msgid ""
"A list of functions that are called when the application context is "
"destroyed.  Since the application context is also torn down if the "
"request ends this is the place to store code that disconnects from "
"databases."
msgstr ""

#: flask.Flask.teardown_request:1 of
msgid ""
"Register a function to be run at the end of each request, regardless of "
"whether there was an exception or not.  These functions are executed when"
" the request context is popped, even if not an actual request was "
"performed."
msgstr ""

#: flask.Flask.teardown_request:13 of
msgid ""
"When ``ctx.pop()`` is executed in the above example, the teardown "
"functions are called just before the request context moves from the stack"
" of active contexts.  This becomes relevant if you are using such "
"constructs in tests."
msgstr ""

#: flask.Flask.teardown_request:18 of
msgid ""
"Generally teardown functions must take every necessary step to avoid that"
" they will fail.  If they do execute code that might fail they will have "
"to surround the execution of these code by try/except statements and log "
"occurring errors."
msgstr ""

#: flask.Flask.teardown_request:23 of
msgid ""
"When a teardown function was called because of an exception it will be "
"passed an error object."
msgstr "When a teardown function was called because of an exception it will be passed an error object."

#: flask.Flask.teardown_request:28 of
msgid "Debug Note"
msgstr "Debug Note"

#: flask.Flask.teardown_request:30 of
msgid ""
"In debug mode Flask will not tear down a request on an exception "
"immediately.  Instead it will keep it alive so that the interactive "
"debugger can still access it.  This behavior can be controlled by the "
"``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable."
msgstr ""

#: flask.Flask.teardown_request_funcs:1 of
msgid ""
"A dictionary with lists of functions that are called after each request, "
"even if an exception has occurred. The key of the dictionary is the name "
"of the blueprint this function is active for, ``None`` for all requests. "
"These functions are not allowed to modify the request, and their return "
"values are ignored. If an exception occurred while processing the "
"request, it gets passed to each teardown_request function. To register a "
"function here, use the :meth:`teardown_request` decorator."
msgstr ""

#: flask.Flask.template_context_processors:1 of
msgid ""
"A dictionary with list of functions that are called without argument to "
"populate the template context.  The key of the dictionary is the name of "
"the blueprint this function is active for, ``None`` for all requests.  "
"Each returns a dictionary that the template context is updated with.  To "
"register a function here, use the :meth:`context_processor` decorator."
msgstr ""

#: flask.Flask.template_filter:1 of
msgid ""
"A decorator that is used to register custom template filter. You can "
"specify a name for the filter, otherwise the function name will be used. "
"Example::"
msgstr ""

#: flask.Blueprint.template_folder:1 flask.Flask.template_folder:1 of
msgid ""
"Location of the template files to be added to the template lookup. "
"``None`` if templates should not be added."
msgstr "Location of the template files to be added to the template lookup. ``None`` if templates should not be added."

#: flask.Flask.template_global:1 of
msgid ""
"A decorator that is used to register a custom template global function. "
"You can specify a name for the global function, otherwise the function "
"name will be used. Example::"
msgstr ""

#: flask.Flask.template_test:1 of
msgid ""
"A decorator that is used to register custom template test. You can "
"specify a name for the test, otherwise the function name will be used. "
"Example::"
msgstr ""

#: flask.Flask.templates_auto_reload:1 of
msgid ""
"Reload templates when they are changed. Used by "
":meth:`create_jinja_environment`."
msgstr "Reload templates when they are changed. Used by :meth:`create_jinja_environment`."

#: flask.Flask.templates_auto_reload:4 of
msgid ""
"This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If "
"not set, it will be enabled in debug mode."
msgstr "This attribute can be configured with :data:`TEMPLATES_AUTO_RELOAD`. If not set, it will be enabled in debug mode."

#: flask.Flask.templates_auto_reload:7 of
msgid ""
"This property was added but the underlying config and behavior already "
"existed."
msgstr "This property was added but the underlying config and behavior already existed."

#: flask.Flask.test_cli_runner:1 of
msgid "Create a CLI runner for testing CLI commands. See :ref:`testing-cli`."
msgstr "Create a CLI runner for testing CLI commands. See :ref:`testing-cli`."

#: flask.Flask.test_cli_runner:4 of
msgid ""
"Returns an instance of :attr:`test_cli_runner_class`, by default "
":class:`~flask.testing.FlaskCliRunner`. The Flask app object is passed as"
" the first argument."
msgstr ""

#: flask.Flask.test_cli_runner_class:1 of
msgid ""
"The :class:`~click.testing.CliRunner` subclass, by default "
":class:`~flask.testing.FlaskCliRunner` that is used by "
":meth:`test_cli_runner`. Its ``__init__`` method should take a Flask app "
"object as the first argument."
msgstr ""

#: flask.Flask.test_client:1 of
msgid ""
"Creates a test client for this application.  For information about unit "
"testing head over to :ref:`testing`."
msgstr "Creates a test client for this application.  For information about unit testing head over to :ref:`testing`."

#: flask.Flask.test_client:4 of
msgid ""
"Note that if you are testing for assertions or exceptions in your "
"application code, you must set ``app.testing = True`` in order for the "
"exceptions to propagate to the test client.  Otherwise, the exception "
"will be handled by the application (not visible to the test client) and "
"the only indication of an AssertionError or other exception will be a 500"
" status code response to the test client.  See the :attr:`testing` "
"attribute.  For example::"
msgstr ""

#: flask.Flask.test_client:15 of
msgid ""
"The test client can be used in a ``with`` block to defer the closing down"
" of the context until the end of the ``with`` block.  This is useful if "
"you want to access the context locals for testing::"
msgstr ""

#: flask.Flask.test_client:23 of
msgid ""
"Additionally, you may pass optional keyword arguments that will then be "
"passed to the application's :attr:`test_client_class` constructor. For "
"example::"
msgstr ""

#: flask.Flask.test_client:37 of
msgid "See :class:`~flask.testing.FlaskClient` for more information."
msgstr "See :class:`~flask.testing.FlaskClient` for more information."

#: flask.Flask.test_client:47 of
msgid ""
"Added `**kwargs` to support passing additional keyword arguments to the "
"constructor of :attr:`test_client_class`."
msgstr "Added `**kwargs` to support passing additional keyword arguments to the constructor of :attr:`test_client_class`."

#: flask.Flask.test_client:42 of
msgid ""
"The `use_cookies` parameter was added as well as the ability to override "
"the client to be used by setting the :attr:`test_client_class` attribute."
msgstr "The `use_cookies` parameter was added as well as the ability to override the client to be used by setting the :attr:`test_client_class` attribute."

#: flask.Flask.test_client:39 of
msgid "added support for ``with`` block usage for the client."
msgstr "added support for ``with`` block usage for the client."

#: flask.Flask.test_client_class:1 of
msgid "the test client that is used with when `test_client` is used."
msgstr "the test client that is used with when `test_client` is used."

#: flask.Flask.test_request_context:1 of
msgid ""
"Create a :class:`~flask.ctx.RequestContext` for a WSGI environment "
"created from the given values. This is mostly useful during testing, "
"where you may want to run a function that uses request data without "
"dispatching a full request."
msgstr ""

#: flask.Flask.test_request_context:8 of
msgid ""
"Use a ``with`` block to push the context, which will make :data:`request`"
" point at the request for the created environment. ::"
msgstr "Use a ``with`` block to push the context, which will make :data:`request` point at the request for the created environment. ::"

#: flask.Flask.test_request_context:15 of
msgid ""
"When using the shell, it may be easier to push and pop the context "
"manually to avoid indentation. ::"
msgstr "When using the shell, it may be easier to push and pop the context manually to avoid indentation. ::"

#: flask.Flask.test_request_context:23 of
msgid ""
"Takes the same arguments as Werkzeug's "
":class:`~werkzeug.test.EnvironBuilder`, with some defaults from the "
"application. See the linked Werkzeug docs for most of the available "
"arguments. Flask-specific behavior is listed here."
msgstr ""

#: flask.Flask.test_request_context:28 of
msgid "URL path being requested."
msgstr "URL path being requested."

#: flask.Flask.test_request_context:29 of
msgid ""
"Base URL where the app is being served, which ``path`` is relative to. If"
" not given, built from :data:`PREFERRED_URL_SCHEME`, ``subdomain``, "
":data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`."
msgstr ""

#: flask.Flask.test_request_context:33 of
msgid "Subdomain name to append to :data:`SERVER_NAME`."
msgstr "Subdomain name to append to :data:`SERVER_NAME`."

#: flask.Flask.test_request_context:35 of
msgid "Scheme to use instead of :data:`PREFERRED_URL_SCHEME`."
msgstr "Scheme to use instead of :data:`PREFERRED_URL_SCHEME`."

#: flask.Flask.test_request_context:37 of
msgid "The request body, either as a string or a dict of form keys and values."
msgstr "The request body, either as a string or a dict of form keys and values."

#: flask.Flask.test_request_context:39 of
msgid ""
"If given, this is serialized as JSON and passed as ``data``. Also "
"defaults ``content_type`` to ``application/json``."
msgstr "If given, this is serialized as JSON and passed as ``data``. Also defaults ``content_type`` to ``application/json``."

#: flask.Flask.test_request_context:42 of
msgid ""
"other positional arguments passed to "
":class:`~werkzeug.test.EnvironBuilder`."
msgstr "other positional arguments passed to :class:`~werkzeug.test.EnvironBuilder`."

#: flask.Flask.test_request_context:44 of
msgid "other keyword arguments passed to :class:`~werkzeug.test.EnvironBuilder`."
msgstr "other keyword arguments passed to :class:`~werkzeug.test.EnvironBuilder`."

#: flask.Flask.testing:1 of
msgid ""
"The testing flag.  Set this to ``True`` to enable the test mode of Flask "
"extensions (and in the future probably also Flask itself). For example "
"this might activate test helpers that have an additional runtime cost "
"which should not be enabled by default."
msgstr ""

#: flask.Flask.testing:6 of
msgid ""
"If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the "
"default it's implicitly enabled."
msgstr "If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the default it's implicitly enabled."

#: flask.Flask.testing:9 of
msgid ""
"This attribute can also be configured from the config with the "
"``TESTING`` configuration key.  Defaults to ``False``."
msgstr "This attribute can also be configured from the config with the ``TESTING`` configuration key.  Defaults to ``False``."

#: flask.Flask.trap_http_exception:1 of
msgid ""
"Checks if an HTTP exception should be trapped or not.  By default this "
"will return ``False`` for all exceptions except for a bad request key "
"error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It also returns"
" ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``."
msgstr ""

#: flask.Flask.trap_http_exception:6 of
msgid ""
"This is called for all HTTP exceptions raised by a view function. If it "
"returns ``True`` for any exception the error handler for this exception "
"is not called and it shows up as regular exception in the traceback.  "
"This is helpful for debugging implicitly raised HTTP exceptions."
msgstr ""

#: flask.Flask.trap_http_exception:12 of
msgid "Bad request errors are not trapped by default in debug mode."
msgstr "Bad request errors are not trapped by default in debug mode."

#: flask.Flask.try_trigger_before_first_request_functions:1 of
msgid ""
"Called before each request and will ensure that it triggers the "
":attr:`before_first_request_funcs` and only exactly once per application "
"instance (which means process usually)."
msgstr ""

#: flask.Flask.update_template_context:1 of
msgid ""
"Update the template context with some commonly used variables. This "
"injects request, session, config and g into the template context as well "
"as everything template context processors want to inject.  Note that the "
"as of Flask 0.6, the original values in the context will not be "
"overridden if a context processor decides to return a value with the same"
" key."
msgstr ""

#: flask.Flask.update_template_context:8 of
msgid ""
"the context as a dictionary that is updated in place to add extra "
"variables."
msgstr "the context as a dictionary that is updated in place to add extra variables."

#: flask.Flask.url_build_error_handlers:1 of
msgid ""
"A list of functions that are called when :meth:`url_for` raises a "
":exc:`~werkzeug.routing.BuildError`.  Each function registered here is "
"called with `error`, `endpoint` and `values`.  If a function returns "
"``None`` or raises a :exc:`BuildError` the next function is tried."
msgstr ""

#: flask.Flask.url_default_functions:1 of
msgid ""
"A dictionary with lists of functions that can be used as URL value "
"preprocessors.  The key ``None`` here is used for application wide "
"callbacks, otherwise the key is the name of the blueprint. Each of these "
"functions has the chance to modify the dictionary of URL values before "
"they are used as the keyword arguments of the view function.  For each "
"function registered this one should also provide a :meth:`url_defaults` "
"function that adds the parameters automatically again that were removed "
"that way."
msgstr ""

#: flask.Flask.url_defaults:1 of
msgid ""
"Callback function for URL defaults for all view functions of the "
"application.  It's called with the endpoint and values and should update "
"the values passed in place."
msgstr ""

#: flask.Flask.url_map:1 of
msgid ""
"The :class:`~werkzeug.routing.Map` for this instance.  You can use this "
"to change the routing converters after the class was created but before "
"any routes are connected.  Example::"
msgstr ""

#: flask.Flask.url_value_preprocessor:1 of
msgid ""
"Register a URL value preprocessor function for all view functions in the "
"application. These functions will be called before the "
":meth:`before_request` functions."
msgstr ""

#: flask.Flask.url_value_preprocessor:5 of
msgid ""
"The function can modify the values captured from the matched url before "
"they are passed to the view. For example, this can be used to pop a "
"common language code value and place it in ``g`` rather than pass it to "
"every view."
msgstr ""

#: flask.Flask.url_value_preprocessor:10 of
msgid ""
"The function is passed the endpoint name and values dict. The return "
"value is ignored."
msgstr "The function is passed the endpoint name and values dict. The return value is ignored."

#: flask.Flask.url_value_preprocessors:1 of
msgid ""
"A dictionary with lists of functions that are called before the "
":attr:`before_request_funcs` functions. The key of the dictionary is the "
"name of the blueprint this function is active for, or ``None`` for all "
"requests. To register a function, use :meth:`url_value_preprocessor`."
msgstr ""

#: flask.Flask.use_x_sendfile:1 of
msgid ""
"Enable this if you want to use the X-Sendfile feature.  Keep in mind that"
" the server has to support this.  This only affects files sent with the "
":func:`send_file` method."
msgstr ""

#: flask.Flask.use_x_sendfile:7 of
msgid ""
"This attribute can also be configured from the config with the "
"``USE_X_SENDFILE`` configuration key.  Defaults to ``False``."
msgstr "This attribute can also be configured from the config with the ``USE_X_SENDFILE`` configuration key.  Defaults to ``False``."

#: flask.Flask.view_functions:1 of
msgid ""
"A dictionary of all view functions registered.  The keys will be function"
" names which are also used to generate URLs and the values are the "
"function objects themselves. To register a view function, use the "
":meth:`route` decorator."
msgstr ""

#: flask.Flask.wsgi_app:1 of
msgid ""
"The actual WSGI application. This is not implemented in :meth:`__call__` "
"so that middlewares can be applied without losing a reference to the app "
"object. Instead of doing this::"
msgstr ""

#: flask.Flask.wsgi_app:7 of
msgid "It's a better idea to do this instead::"
msgstr "It's a better idea to do this instead::"

#: flask.Flask.wsgi_app:11 of
msgid ""
"Then you still have the original application object around and can "
"continue to call methods on it."
msgstr "Then you still have the original application object around and can continue to call methods on it."

#: flask.Flask.wsgi_app:14 of
msgid ""
"Teardown events for the request and app contexts are called even if an "
"unhandled error occurs. Other events may not be called depending on when "
"an error occurs during dispatch. See :ref:`callbacks-and-errors`."
msgstr ""

#: flask.Flask.wsgi_app:20 of
msgid "A WSGI environment."
msgstr "A WSGI environment."

#: flask.Flask.wsgi_app:21 of
msgid ""
"A callable accepting a status code, a list of headers, and an optional "
"exception context to start the response."
msgstr "A callable accepting a status code, a list of headers, and an optional exception context to start the response."

#: ../../api.rst:22
msgid "Blueprint Objects"
msgstr "Blueprint Objects"

#: flask.Blueprint:1 of
msgid ""
"Represents a blueprint.  A blueprint is an object that records functions "
"that will be called with the "
":class:`~flask.blueprints.BlueprintSetupState` later to register "
"functions or other things on the main application.  See :ref:`blueprints`"
" for more information."
msgstr ""

#: flask.Blueprint.add_app_template_filter:1 of
msgid ""
"Register a custom template filter, available application wide.  Like "
":meth:`Flask.add_template_filter` but for a blueprint.  Works exactly "
"like the :meth:`app_template_filter` decorator."
msgstr ""

#: flask.Blueprint.add_app_template_global:1 of
msgid ""
"Register a custom template global, available application wide.  Like "
":meth:`Flask.add_template_global` but for a blueprint.  Works exactly "
"like the :meth:`app_template_global` decorator."
msgstr ""

#: flask.Blueprint.add_app_template_global:7
#: flask.Blueprint.app_template_global:6 of
msgid "the optional name of the global, otherwise the function name will be used."
msgstr "the optional name of the global, otherwise the function name will be used."

#: flask.Blueprint.add_app_template_test:1 of
msgid ""
"Register a custom template test, available application wide.  Like "
":meth:`Flask.add_template_test` but for a blueprint.  Works exactly like "
"the :meth:`app_template_test` decorator."
msgstr ""

#: flask.Blueprint.add_url_rule:1 of
msgid ""
"Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for "
"the :func:`url_for` function is prefixed with the name of the blueprint."
msgstr "Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for the :func:`url_for` function is prefixed with the name of the blueprint."

#: flask.Blueprint.after_app_request:1 of
msgid ""
"Like :meth:`Flask.after_request` but for a blueprint.  Such a function is"
" executed after each request, even if outside of the blueprint."
msgstr "Like :meth:`Flask.after_request` but for a blueprint.  Such a function is executed after each request, even if outside of the blueprint."

#: flask.Blueprint.after_request:1 of
msgid ""
"Like :meth:`Flask.after_request` but for a blueprint.  This function is "
"only executed after each request that is handled by a function of that "
"blueprint."
msgstr ""

#: flask.Blueprint.app_context_processor:1 of
msgid ""
"Like :meth:`Flask.context_processor` but for a blueprint.  Such a "
"function is executed each request, even if outside of the blueprint."
msgstr "Like :meth:`Flask.context_processor` but for a blueprint.  Such a function is executed each request, even if outside of the blueprint."

#: flask.Blueprint.app_errorhandler:1 of
msgid ""
"Like :meth:`Flask.errorhandler` but for a blueprint.  This handler is "
"used for all requests, even if outside of the blueprint."
msgstr "Like :meth:`Flask.errorhandler` but for a blueprint.  This handler is used for all requests, even if outside of the blueprint."

#: flask.Blueprint.app_template_filter:1 of
msgid ""
"Register a custom template filter, available application wide.  Like "
":meth:`Flask.template_filter` but for a blueprint."
msgstr "Register a custom template filter, available application wide.  Like :meth:`Flask.template_filter` but for a blueprint."

#: flask.Blueprint.app_template_global:1 of
msgid ""
"Register a custom template global, available application wide.  Like "
":meth:`Flask.template_global` but for a blueprint."
msgstr "Register a custom template global, available application wide.  Like :meth:`Flask.template_global` but for a blueprint."

#: flask.Blueprint.app_template_test:1 of
msgid ""
"Register a custom template test, available application wide.  Like "
":meth:`Flask.template_test` but for a blueprint."
msgstr "Register a custom template test, available application wide.  Like :meth:`Flask.template_test` but for a blueprint."

#: flask.Blueprint.app_url_defaults:1 of
msgid "Same as :meth:`url_defaults` but application wide."
msgstr "Same as :meth:`url_defaults` but application wide."

#: flask.Blueprint.app_url_value_preprocessor:1 of
msgid "Same as :meth:`url_value_preprocessor` but application wide."
msgstr "Same as :meth:`url_value_preprocessor` but application wide."

#: flask.Blueprint.before_app_first_request:1 of
msgid ""
"Like :meth:`Flask.before_first_request`.  Such a function is executed "
"before the first request to the application."
msgstr "Like :meth:`Flask.before_first_request`.  Such a function is executed before the first request to the application."

#: flask.Blueprint.before_app_request:1 of
msgid ""
"Like :meth:`Flask.before_request`.  Such a function is executed before "
"each request, even if outside of a blueprint."
msgstr "Like :meth:`Flask.before_request`.  Such a function is executed before each request, even if outside of a blueprint."

#: flask.Blueprint.before_request:1 of
msgid ""
"Like :meth:`Flask.before_request` but for a blueprint.  This function is "
"only executed before each request that is handled by a function of that "
"blueprint."
msgstr ""

#: flask.Blueprint.context_processor:1 of
msgid ""
"Like :meth:`Flask.context_processor` but for a blueprint.  This function "
"is only executed for requests handled by a blueprint."
msgstr "Like :meth:`Flask.context_processor` but for a blueprint.  This function is only executed for requests handled by a blueprint."

#: flask.Blueprint.endpoint:1 of
msgid ""
"Like :meth:`Flask.endpoint` but for a blueprint.  This does not prefix "
"the endpoint with the blueprint name, this has to be done explicitly by "
"the user of this method.  If the endpoint is prefixed with a `.` it will "
"be registered to the current blueprint, otherwise it's an application "
"independent endpoint."
msgstr ""

#: flask.Blueprint.errorhandler:1 of
msgid ""
"Registers an error handler that becomes active for this blueprint only.  "
"Please be aware that routing does not happen local to a blueprint so an "
"error handler for 404 usually is not handled by a blueprint unless it is "
"caused inside a view function.  Another special case is the 500 internal "
"server error which is always looked up from the application."
msgstr ""

#: flask.Blueprint.errorhandler:8 of
msgid ""
"Otherwise works as the :meth:`~flask.Flask.errorhandler` decorator of the"
" :class:`~flask.Flask` object."
msgstr "Otherwise works as the :meth:`~flask.Flask.errorhandler` decorator of the :class:`~flask.Flask` object."

#: flask.Blueprint.json_decoder:1 of
msgid ""
"Blueprint local JSON decoder class to use. Set to ``None`` to use the "
"app's :class:`~flask.app.Flask.json_decoder`."
msgstr "Blueprint local JSON decoder class to use. Set to ``None`` to use the app's :class:`~flask.app.Flask.json_decoder`."

#: flask.Blueprint.json_encoder:1 of
msgid ""
"Blueprint local JSON decoder class to use. Set to ``None`` to use the "
"app's :class:`~flask.app.Flask.json_encoder`."
msgstr "Blueprint local JSON decoder class to use. Set to ``None`` to use the app's :class:`~flask.app.Flask.json_encoder`."

#: flask.Blueprint.make_setup_state:1 of
msgid ""
"Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState` "
"object that is later passed to the register callback functions. "
"Subclasses can override this to return a subclass of the setup state."
msgstr ""

#: flask.Blueprint.record:1 of
msgid ""
"Registers a function that is called when the blueprint is registered on "
"the application.  This function is called with the state as argument as "
"returned by the :meth:`make_setup_state` method."
msgstr ""

#: flask.Blueprint.record_once:1 of
msgid ""
"Works like :meth:`record` but wraps the function in another function that"
" will ensure the function is only called once.  If the blueprint is "
"registered a second time on the application, the function passed is not "
"called."
msgstr ""

#: flask.Blueprint.register:1 of
msgid ""
"Called by :meth:`Flask.register_blueprint` to register all views and "
"callbacks registered on the blueprint with the application. Creates a "
":class:`.BlueprintSetupState` and calls each :meth:`record` callback with"
" it."
msgstr ""

#: flask.Blueprint.register:6 of
msgid "The application this blueprint is being registered with."
msgstr "The application this blueprint is being registered with."

#: flask.Blueprint.register:7 of
msgid "Keyword arguments forwarded from :meth:`~Flask.register_blueprint`."
msgstr "Keyword arguments forwarded from :meth:`~Flask.register_blueprint`."

#: flask.Blueprint.register:9 of
msgid ""
"Whether this is the first time this blueprint has been registered on the "
"application."
msgstr "Whether this is the first time this blueprint has been registered on the application."

#: flask.Blueprint.register_error_handler:1 of
msgid ""
"Non-decorator version of the :meth:`errorhandler` error attach function, "
"akin to the :meth:`~flask.Flask.register_error_handler` application-wide "
"function of the :class:`~flask.Flask` object but for error handlers "
"limited to this blueprint."
msgstr ""

#: flask.Blueprint.route:1 of
msgid ""
"Like :meth:`Flask.route` but for a blueprint.  The endpoint for the "
":func:`url_for` function is prefixed with the name of the blueprint."
msgstr "Like :meth:`Flask.route` but for a blueprint.  The endpoint for the :func:`url_for` function is prefixed with the name of the blueprint."

#: flask.Blueprint.teardown_app_request:1 of
msgid ""
"Like :meth:`Flask.teardown_request` but for a blueprint.  Such a function"
" is executed when tearing down each request, even if outside of the "
"blueprint."
msgstr ""

#: flask.Blueprint.teardown_request:1 of
msgid ""
"Like :meth:`Flask.teardown_request` but for a blueprint.  This function "
"is only executed when tearing down requests handled by a function of that"
" blueprint.  Teardown request functions are executed when the request "
"context is popped, even when no actual request was performed."
msgstr ""

#: flask.Blueprint.url_defaults:1 of
msgid ""
"Callback function for URL defaults for this blueprint.  It's called with "
"the endpoint and values and should update the values passed in place."
msgstr "Callback function for URL defaults for this blueprint.  It's called with the endpoint and values and should update the values passed in place."

#: flask.Blueprint.url_value_preprocessor:1 of
msgid ""
"Registers a function as URL value preprocessor for this blueprint.  It's "
"called before the view functions are called and can modify the url values"
" provided."
msgstr ""

#: ../../api.rst:29
msgid "Incoming Request Data"
msgstr "Incoming Request Data"

#: flask.Request:1 of
msgid ""
"The request object used by default in Flask.  Remembers the matched "
"endpoint and view arguments."
msgstr "The request object used by default in Flask.  Remembers the matched endpoint and view arguments."

#: flask.Request:4 of
msgid ""
"It is what ends up as :class:`~flask.request`.  If you want to replace "
"the request object used you can subclass this and set "
":attr:`~flask.Flask.request_class` to your subclass."
msgstr ""

#: flask.Request:8 of
msgid ""
"The request object is a :class:`~werkzeug.wrappers.Request` subclass and "
"provides all of the attributes Werkzeug defines plus a few Flask specific"
" ones."
msgstr ""

#: ../../api.rst:37
msgid "The underlying WSGI environment."
msgstr "The underlying WSGI environment."

#: ../../api.rst:46
msgid ""
"Provides different ways to look at the current `IRI "
"<https://tools.ietf.org/html/rfc3987>`_.  Imagine your application is "
"listening on the following application root::"
msgstr ""

#: ../../api.rst:52
msgid "And a user requests the following URI::"
msgstr "And a user requests the following URI::"

#: ../../api.rst:56
msgid ""
"In this case the values of the above mentioned attributes would be the "
"following:"
msgstr "In this case the values of the above mentioned attributes would be the following:"

#: ../../api.rst:60 ../../api.rst:676
msgid "`path`"
msgstr "`path`"

#: ../../api.rst:60
msgid "``u'/π/page.html'``"
msgstr "``u'/π/page.html'``"

#: ../../api.rst:61
msgid "`full_path`"
msgstr "`full_path`"

#: ../../api.rst:61
msgid "``u'/π/page.html?x=y'``"
msgstr "``u'/π/page.html?x=y'``"

#: ../../api.rst:62
msgid "`script_root`"
msgstr "`script_root`"

#: ../../api.rst:62
msgid "``u'/myapplication'``"
msgstr "``u'/myapplication'``"

#: ../../api.rst:63
msgid "`base_url`"
msgstr "`base_url`"

#: ../../api.rst:63
msgid "``u'http://www.example.com/myapplication/π/page.html'``"
msgstr "``u'http://www.example.com/myapplication/π/page.html'``"

#: ../../api.rst:64
msgid "`url`"
msgstr "`url`"

#: ../../api.rst:64
msgid "``u'http://www.example.com/myapplication/π/page.html?x=y'``"
msgstr "``u'http://www.example.com/myapplication/π/page.html?x=y'``"

#: ../../api.rst:65
msgid "`url_root`"
msgstr "`url_root`"

#: ../../api.rst:65
msgid "``u'http://www.example.com/myapplication/'``"
msgstr "``u'http://www.example.com/myapplication/'``"

#: flask.Request.accept_charsets:1 of
msgid ""
"List of charsets this client supports as "
":class:`~werkzeug.datastructures.CharsetAccept` object."
msgstr "List of charsets this client supports as :class:`~werkzeug.datastructures.CharsetAccept` object."

#: flask.Request.accept_encodings:1 of
msgid ""
"List of encodings this client accepts.  Encodings in a HTTP term are "
"compression encodings such as gzip.  For charsets have a look at "
":attr:`accept_charset`."
msgstr ""

#: flask.Request.accept_languages:1 of
msgid ""
"List of languages this client accepts as "
":class:`~werkzeug.datastructures.LanguageAccept` object."
msgstr "List of languages this client accepts as :class:`~werkzeug.datastructures.LanguageAccept` object."

#: flask.Request.accept_mimetypes:1 of
msgid ""
"List of mimetypes this client supports as "
":class:`~werkzeug.datastructures.MIMEAccept` object."
msgstr "List of mimetypes this client supports as :class:`~werkzeug.datastructures.MIMEAccept` object."

#: flask.Request.access_route:1 of
msgid ""
"If a forwarded header exists this is a list of all ip addresses from the "
"client ip to the last proxy server."
msgstr "If a forwarded header exists this is a list of all ip addresses from the client ip to the last proxy server."

#: flask.Request.application:1 of
msgid ""
"Decorate a function as responder that accepts the request as first "
"argument.  This works like the :func:`responder` decorator but the "
"function is passed the request object as first argument and the request "
"object will be closed automatically::"
msgstr ""

#: flask.Request.application:10 of
msgid ""
"As of Werkzeug 0.14 HTTP exceptions are automatically caught and "
"converted to responses instead of failing."
msgstr "As of Werkzeug 0.14 HTTP exceptions are automatically caught and converted to responses instead of failing."

#: flask.Request.application:13 of
msgid "the WSGI callable to decorate"
msgstr "the WSGI callable to decorate"

#: flask.Request.application:14 of
msgid "a new WSGI callable"
msgstr "a new WSGI callable"

#: flask.Request.args:1 of
msgid "The parsed URL parameters (the part in the URL after the question mark)."
msgstr "The parsed URL parameters (the part in the URL after the question mark)."

#: flask.Request.args:4 of
msgid ""
"By default an :class:`~werkzeug.datastructures.ImmutableMultiDict` is "
"returned from this function.  This can be changed by setting "
":attr:`parameter_storage_class` to a different type.  This might be "
"necessary if the order of the form data is important."
msgstr ""

#: flask.Request.authorization:1 of
msgid "The `Authorization` object in parsed form."
msgstr "The `Authorization` object in parsed form."

#: flask.Request.base_url:1 of
msgid ""
"Like :attr:`url` but without the querystring See also: "
":attr:`trusted_hosts`."
msgstr "Like :attr:`url` but without the querystring See also: :attr:`trusted_hosts`."

#: flask.Request.blueprint:1 of
msgid "The name of the current blueprint"
msgstr "The name of the current blueprint"

#: flask.Request.cache_control:1 of
msgid ""
"A :class:`~werkzeug.datastructures.RequestCacheControl` object for the "
"incoming cache control headers."
msgstr "A :class:`~werkzeug.datastructures.RequestCacheControl` object for the incoming cache control headers."

#: flask.Request.close:1 of
msgid ""
"Closes associated resources of this request object.  This closes all file"
" handles explicitly.  You can also use the request object in a with "
"statement which will automatically close it."
msgstr ""

#: flask.Request.content_encoding:1 of
msgid ""
"The Content-Encoding entity-header field is used as a modifier to the "
"media-type. When present, its value indicates what additional content "
"codings have been applied to the entity-body, and thus what decoding "
"mechanisms must be applied in order to obtain the media-type referenced "
"by the Content-Type header field."
msgstr ""

#: flask.Request.content_length:1 of
msgid ""
"The Content-Length entity-header field indicates the size of the entity-"
"body in bytes or, in the case of the HEAD method, the size of the entity-"
"body that would have been sent had the request been a GET."
msgstr ""

#: flask.Request.content_md5:1 of
msgid ""
"The Content-MD5 entity-header field, as defined in RFC 1864, is an MD5 "
"digest of the entity-body for the purpose of providing an end-to-end "
"message integrity check (MIC) of the entity-body. (Note: a MIC is good "
"for detecting accidental modification of the entity-body in transit, but "
"is not proof against malicious attacks.)"
msgstr ""

#: flask.Request.content_type:1 of
msgid ""
"The Content-Type entity-header field indicates the media type of the "
"entity-body sent to the recipient or, in the case of the HEAD method, the"
" media type that would have been sent had the request been a GET."
msgstr ""

#: flask.Request.cookies:1 of
msgid ""
"A :class:`dict` with the contents of all cookies transmitted with the "
"request."
msgstr "A :class:`dict` with the contents of all cookies transmitted with the request."

#: flask.Request.data:1 of
msgid ""
"Contains the incoming request data as string in case it came with a "
"mimetype Werkzeug does not handle."
msgstr "Contains the incoming request data as string in case it came with a mimetype Werkzeug does not handle."

#: flask.Request.date:1 of
msgid ""
"The Date general-header field represents the date and time at which the "
"message was originated, having the same semantics as orig-date in RFC "
"822."
msgstr ""

#: flask.Request.endpoint:1 of
msgid ""
"The endpoint that matched the request.  This in combination with "
":attr:`view_args` can be used to reconstruct the same or a modified URL."
"  If an exception happened when matching, this will be ``None``."
msgstr ""

#: flask.Request.files:1 of
msgid ""
":class:`~werkzeug.datastructures.MultiDict` object containing all "
"uploaded files.  Each key in :attr:`files` is the name from the ``<input "
"type=\"file\" name=\"\">``.  Each value in :attr:`files` is a Werkzeug "
":class:`~werkzeug.datastructures.FileStorage` object."
msgstr ""

#: flask.Request.files:6 of
msgid ""
"It basically behaves like a standard file object you know from Python, "
"with the difference that it also has a "
":meth:`~werkzeug.datastructures.FileStorage.save` function that can store"
" the file on the filesystem."
msgstr ""

#: flask.Request.files:11 of
msgid ""
"Note that :attr:`files` will only contain data if the request method was "
"POST, PUT or PATCH and the ``<form>`` that posted to the request had "
"``enctype=\"multipart/form-data\"``.  It will be empty otherwise."
msgstr ""

#: flask.Request.files:15 of
msgid ""
"See the :class:`~werkzeug.datastructures.MultiDict` / "
":class:`~werkzeug.datastructures.FileStorage` documentation for more "
"details about the used data structure."
msgstr ""

#: flask.Request.form:1 of
msgid ""
"The form parameters.  By default an "
":class:`~werkzeug.datastructures.ImmutableMultiDict` is returned from "
"this function.  This can be changed by setting "
":attr:`parameter_storage_class` to a different type.  This might be "
"necessary if the order of the form data is important."
msgstr ""

#: flask.Request.form:7 of
msgid ""
"Please keep in mind that file uploads will not end up here, but instead "
"in the :attr:`files` attribute."
msgstr "Please keep in mind that file uploads will not end up here, but instead in the :attr:`files` attribute."

#: flask.Request.form:12 of
msgid ""
"Previous to Werkzeug 0.9 this would only contain form data for POST and "
"PUT requests."
msgstr "Previous to Werkzeug 0.9 this would only contain form data for POST and PUT requests."

#: flask.Request.from_values:1 of
msgid ""
"Create a new request object based on the values provided.  If environ is "
"given missing values are filled from there.  This method is useful for "
"small scripts when you need to simulate a request from an URL. Do not use"
" this method for unittesting, there is a full featured client object "
"(:class:`Client`) that allows to create multipart requests, support for "
"cookies etc."
msgstr ""

#: flask.Request.from_values:8 of
msgid ""
"This accepts the same options as the "
":class:`~werkzeug.test.EnvironBuilder`."
msgstr "This accepts the same options as the :class:`~werkzeug.test.EnvironBuilder`."

#: flask.Request.from_values:11 of
msgid ""
"This method now accepts the same arguments as "
":class:`~werkzeug.test.EnvironBuilder`.  Because of this the `environ` "
"parameter is now called `environ_overrides`."
msgstr ""

#: flask.Request.from_values:16 of
msgid "request object"
msgstr "request object"

#: flask.Request.full_path:1 of
msgid "Requested path as unicode, including the query string."
msgstr "Requested path as unicode, including the query string."

#: flask.Request.get_data:1 of
msgid ""
"This reads the buffered incoming data from the client into one "
"bytestring.  By default this is cached but that behavior can be changed "
"by setting `cache` to `False`."
msgstr ""

#: flask.Request.get_data:5 of
msgid ""
"Usually it's a bad idea to call this method without checking the content "
"length first as a client could send dozens of megabytes or more to cause "
"memory problems on the server."
msgstr ""

#: flask.Request.get_data:9 of
msgid ""
"Note that if the form data was already parsed this method will not return"
" anything as form data parsing does not cache the data like this method "
"does.  To implicitly invoke form data parsing function set "
"`parse_form_data` to `True`.  When this is done the return value of this "
"method will be an empty string if the form parser handles the data.  This"
" generally is not necessary as if the whole data is cached (which is the "
"default) the form parser will used the cached data to parse the form "
"data.  Please be generally aware of checking the content length first in "
"any case before calling this method to avoid exhausting server memory."
msgstr ""

#: flask.Request.get_data:20 of
msgid ""
"If `as_text` is set to `True` the return value will be a decoded unicode "
"string."
msgstr "If `as_text` is set to `True` the return value will be a decoded unicode string."

#: flask.Request.get_json:1 flask.Response.get_json:1 of
msgid ""
"Parse and return the data as JSON. If the mimetype does not indicate JSON"
" (:mimetype:`application/json`, see :meth:`is_json`), this returns "
"``None`` unless ``force`` is true. If parsing fails, "
":meth:`on_json_loading_failed` is called and its return value is used as "
"the return value."
msgstr ""

#: flask.Request.get_json:7 flask.Response.get_json:7 of
msgid "Ignore the mimetype and always try to parse JSON."
msgstr "Ignore the mimetype and always try to parse JSON."

#: flask.Request.get_json:8 flask.Response.get_json:8 of
msgid "Silence parsing errors and return ``None`` instead."
msgstr "Silence parsing errors and return ``None`` instead."

#: flask.Request.get_json:10 flask.Response.get_json:10 of
msgid "Store the parsed JSON to return for subsequent calls."
msgstr "Store the parsed JSON to return for subsequent calls."

#: flask.Request.headers:1 of
msgid ""
"The headers from the WSGI environ as immutable "
":class:`~werkzeug.datastructures.EnvironHeaders`."
msgstr "The headers from the WSGI environ as immutable :class:`~werkzeug.datastructures.EnvironHeaders`."

#: flask.Request.host:1 of
msgid ""
"Just the host including the port if available. See also: "
":attr:`trusted_hosts`."
msgstr "Just the host including the port if available. See also: :attr:`trusted_hosts`."

#: flask.Request.host_url:1 of
msgid "Just the host with scheme as IRI. See also: :attr:`trusted_hosts`."
msgstr "Just the host with scheme as IRI. See also: :attr:`trusted_hosts`."

#: flask.Request.if_match:1 of
msgid "An object containing all the etags in the `If-Match` header."
msgstr "An object containing all the etags in the `If-Match` header."

#: flask.Request.if_match flask.Request.if_none_match flask.Request.if_range
#: flask.Request.range of
msgid "返回类型"
msgstr "返回类型"

#: flask.Request.if_match:3 flask.Request.if_none_match:3 of
msgid ":class:`~werkzeug.datastructures.ETags`"
msgstr ":class:`~werkzeug.datastructures.ETags`"

#: flask.Request.if_modified_since:1 of
msgid "The parsed `If-Modified-Since` header as datetime object."
msgstr "The parsed `If-Modified-Since` header as datetime object."

#: flask.Request.if_none_match:1 of
msgid "An object containing all the etags in the `If-None-Match` header."
msgstr "An object containing all the etags in the `If-None-Match` header."

#: flask.Request.if_range:1 of
msgid "The parsed `If-Range` header."
msgstr "The parsed `If-Range` header."

#: flask.Request.if_range:5 of
msgid ":class:`~werkzeug.datastructures.IfRange`"
msgstr ":class:`~werkzeug.datastructures.IfRange`"

#: flask.Request.if_unmodified_since:1 of
msgid "The parsed `If-Unmodified-Since` header as datetime object."
msgstr "The parsed `If-Unmodified-Since` header as datetime object."

#: flask.Request.is_json:1 flask.Response.is_json:1 of
msgid ""
"Check if the mimetype indicates JSON data, either "
":mimetype:`application/json` or :mimetype:`application/*+json`."
msgstr "Check if the mimetype indicates JSON data, either :mimetype:`application/json` or :mimetype:`application/*+json`."

#: flask.Request.is_multiprocess:1 of
msgid ""
"boolean that is `True` if the application is served by a WSGI server that"
" spawns multiple processes."
msgstr "boolean that is `True` if the application is served by a WSGI server that spawns multiple processes."

#: flask.Request.is_multithread:1 of
msgid ""
"boolean that is `True` if the application is served by a multithreaded "
"WSGI server."
msgstr "boolean that is `True` if the application is served by a multithreaded WSGI server."

#: flask.Request.is_run_once:1 of
msgid ""
"boolean that is `True` if the application will be executed only once in a"
" process lifetime.  This is the case for CGI for example, but it's not "
"guaranteed that the execution only happens one time."
msgstr ""

#: flask.Request.is_secure:1 of
msgid "`True` if the request is secure."
msgstr "`True` if the request is secure."

#: flask.Request.is_xhr:1 of
msgid ""
"True if the request was triggered via a JavaScript XMLHttpRequest. This "
"only works with libraries that support the ``X-Requested-With`` header "
"and set it to \"XMLHttpRequest\".  Libraries that do that are prototype, "
"jQuery and Mochikit and probably some more."
msgstr ""

#: flask.Request.is_xhr:6 of
msgid ""
"``X-Requested-With`` is not standard and is unreliable. You may be able "
"to use :attr:`AcceptMixin.accept_mimetypes` instead."
msgstr "``X-Requested-With`` is not standard and is unreliable. You may be able to use :attr:`AcceptMixin.accept_mimetypes` instead."

#: flask.Request.json:1 of
msgid ""
"This will contain the parsed JSON data if the mimetype indicates JSON "
"(:mimetype:`application/json`, see :meth:`is_json`), otherwise it will be"
" ``None``."
msgstr ""

#: flask.Request.make_form_data_parser:1 of
msgid ""
"Creates the form data parser. Instantiates the "
":attr:`form_data_parser_class` with some parameters."
msgstr "Creates the form data parser. Instantiates the :attr:`form_data_parser_class` with some parameters."

#: flask.Request.max_content_length:1 of
msgid "Read-only view of the ``MAX_CONTENT_LENGTH`` config key."
msgstr "Read-only view of the ``MAX_CONTENT_LENGTH`` config key."

#: flask.Request.max_forwards:1 of
msgid ""
"The Max-Forwards request-header field provides a mechanism with the TRACE"
" and OPTIONS methods to limit the number of proxies or gateways that can "
"forward the request to the next inbound server."
msgstr ""

#: flask.Request.method:1 of
msgid "The request method. (For example ``'GET'`` or ``'POST'``)."
msgstr "The request method. (For example ``'GET'`` or ``'POST'``)."

#: flask.Request.mimetype:1 of
msgid ""
"Like :attr:`content_type`, but without parameters (eg, without charset, "
"type etc.) and always lowercase.  For example if the content type is "
"``text/HTML; charset=utf-8`` the mimetype would be ``'text/html'``."
msgstr ""

#: flask.Request.mimetype_params:1 of
msgid ""
"The mimetype parameters as dict.  For example if the content type is "
"``text/html; charset=utf-8`` the params would be ``{'charset': "
"'utf-8'}``."
msgstr ""

#: flask.Request.on_json_loading_failed:1 of
msgid ""
"Called if :meth:`get_json` parsing fails and isn't silenced. If this "
"method returns a value, it is used as the return value for "
":meth:`get_json`. The default implementation raises a :class:`BadRequest`"
" exception."
msgstr ""

#: flask.Request.on_json_loading_failed:6 of
msgid ""
"Raise a :exc:`BadRequest` error instead of returning an error message as "
"JSON. If you want that behavior you can add it by subclassing."
msgstr "Raise a :exc:`BadRequest` error instead of returning an error message as JSON. If you want that behavior you can add it by subclassing."

#: flask.Request.path:1 of
msgid ""
"Requested path as unicode.  This works a bit like the regular path info "
"in the WSGI environment but will always include a leading slash, even if "
"the URL root is accessed."
msgstr ""

#: flask.Request.pragma:1 of
msgid ""
"The Pragma general-header field is used to include implementation-"
"specific directives that might apply to any recipient along the "
"request/response chain.  All pragma directives specify optional behavior "
"from the viewpoint of the protocol; however, some systems MAY require "
"that behavior be consistent with the directives."
msgstr ""

#: flask.Request.query_string:1 of
msgid "The URL parameters as raw bytestring."
msgstr "The URL parameters as raw bytestring."

#: flask.Request.range:1 of
msgid "The parsed `Range` header."
msgstr "The parsed `Range` header."

#: flask.Request.range:5 of
msgid ":class:`~werkzeug.datastructures.Range`"
msgstr ":class:`~werkzeug.datastructures.Range`"

#: flask.Request.referrer:1 of
msgid ""
"The Referer[sic] request-header field allows the client to specify, for "
"the server's benefit, the address (URI) of the resource from which the "
"Request-URI was obtained (the \"referrer\", although the header field is "
"misspelled)."
msgstr ""

#: flask.Request.remote_addr:1 of
msgid "The remote address of the client."
msgstr "The remote address of the client."

#: flask.Request.remote_user:1 of
msgid ""
"If the server supports user authentication, and the script is protected, "
"this attribute contains the username the user has authenticated as."
msgstr "If the server supports user authentication, and the script is protected, this attribute contains the username the user has authenticated as."

#: flask.Request.routing_exception:1 of
msgid ""
"If matching the URL failed, this is the exception that will be raised / "
"was raised as part of the request handling.  This is usually a "
":exc:`~werkzeug.exceptions.NotFound` exception or something similar."
msgstr ""

#: flask.Request.scheme:1 of
msgid "URL scheme (http or https)."
msgstr "URL scheme (http or https)."

#: flask.Request.script_root:1 of
msgid "The root path of the script without the trailing slash."
msgstr "The root path of the script without the trailing slash."

#: flask.Request.stream:1 of
msgid ""
"If the incoming form data was not encoded with a known mimetype the data "
"is stored unmodified in this stream for consumption.  Most of the time it"
" is a better idea to use :attr:`data` which will give you that data as a "
"string.  The stream only returns the data once."
msgstr ""

#: flask.Request.stream:6 of
msgid ""
"Unlike :attr:`input_stream` this stream is properly guarded that you "
"can't accidentally read past the length of the input.  Werkzeug will "
"internally always refer to this stream to read data which makes it "
"possible to wrap this object with a stream that does filtering."
msgstr ""

#: flask.Request.stream:11 of
msgid ""
"This stream is now always available but might be consumed by the form "
"parser later on.  Previously the stream was only set if no parsing "
"happened."
msgstr ""

#: flask.Request.url:1 of
msgid "The reconstructed current URL as IRI. See also: :attr:`trusted_hosts`."
msgstr "The reconstructed current URL as IRI. See also: :attr:`trusted_hosts`."

#: flask.Request.url_charset:1 of
msgid ""
"The charset that is assumed for URLs.  Defaults to the value of "
":attr:`charset`."
msgstr "The charset that is assumed for URLs.  Defaults to the value of :attr:`charset`."

#: flask.Request.url_root:1 of
msgid ""
"The full URL root (with hostname), this is the application root as IRI. "
"See also: :attr:`trusted_hosts`."
msgstr "The full URL root (with hostname), this is the application root as IRI. See also: :attr:`trusted_hosts`."

#: flask.Request.url_rule:1 of
msgid ""
"The internal URL rule that matched the request.  This can be useful to "
"inspect which methods are allowed for the URL from a before/after handler"
" (``request.url_rule.methods``) etc. Though if the request's method was "
"invalid for the URL rule, the valid list is available in "
"``routing_exception.valid_methods`` instead (an attribute of the Werkzeug"
" exception :exc:`~werkzeug.exceptions.MethodNotAllowed`) because the "
"request was never internally bound."
msgstr ""

#: flask.Request.user_agent:1 of
msgid "The current user agent."
msgstr "The current user agent."

#: flask.Request.values:1 of
msgid ""
"A :class:`werkzeug.datastructures.CombinedMultiDict` that combines "
":attr:`args` and :attr:`form`."
msgstr "A :class:`werkzeug.datastructures.CombinedMultiDict` that combines :attr:`args` and :attr:`form`."

#: flask.Request.view_args:1 of
msgid ""
"A dict of view arguments that matched the request.  If an exception "
"happened when matching, this will be ``None``."
msgstr "A dict of view arguments that matched the request.  If an exception happened when matching, this will be ``None``."

#: flask.Request.want_form_data_parsed:1 of
msgid ""
"Returns True if the request method carries content.  As of Werkzeug 0.9 "
"this will be the case if a content type is transmitted."
msgstr "Returns True if the request method carries content.  As of Werkzeug 0.9 this will be the case if a content type is transmitted."

#: ../../api.rst:71
msgid ""
"To access incoming request data, you can use the global `request` object."
"  Flask parses incoming request data for you and gives you access to it "
"through that global object.  Internally Flask makes sure that you always "
"get the correct data for the active thread if you are in a multithreaded "
"environment."
msgstr ""

#: ../../api.rst:77 ../../api.rst:120
msgid "This is a proxy.  See :ref:`notes-on-proxies` for more information."
msgstr "This is a proxy.  See :ref:`notes-on-proxies` for more information."

#: ../../api.rst:79
msgid ""
"The request object is an instance of a "
":class:`~werkzeug.wrappers.Request` subclass and provides all of the "
"attributes Werkzeug defines.  This just shows a quick overview of the "
"most important ones."
msgstr ""

#: ../../api.rst:85
msgid "Response Objects"
msgstr "Response Objects"

#: flask.Response:1 of
msgid ""
"The response object that is used by default in Flask.  Works like the "
"response object from Werkzeug but is set to have an HTML mimetype by "
"default.  Quite often you don't have to create this object yourself "
"because :meth:`~flask.Flask.make_response` will take care of that for "
"you."
msgstr ""

#: flask.Response:6 of
msgid ""
"If you want to replace the response object used you can subclass this and"
" set :attr:`~flask.Flask.response_class` to your subclass."
msgstr "If you want to replace the response object used you can subclass this and set :attr:`~flask.Flask.response_class` to your subclass."

#: flask.Response:9 of
msgid ""
"JSON support is added to the response, like the request. This is useful "
"when testing to get the test client response data as JSON."
msgstr "JSON support is added to the response, like the request. This is useful when testing to get the test client response data as JSON."

#: flask.Response:15 of
msgid "Added :attr:`max_cookie_size`."
msgstr "Added :attr:`max_cookie_size`."

#: ../../api.rst:92
msgid ""
"A :class:`~werkzeug.datastructures.Headers` object representing the "
"response headers."
msgstr "A :class:`~werkzeug.datastructures.Headers` object representing the response headers."

#: ../../api.rst:96
msgid "A string with a response status."
msgstr "A string with a response status."

#: ../../api.rst:100
msgid "The response status as integer."
msgstr "The response status as integer."

#: flask.Response.data:1 of
msgid "A descriptor that calls :meth:`get_data` and :meth:`set_data`."
msgstr "A descriptor that calls :meth:`get_data` and :meth:`set_data`."

#: flask.Response.max_cookie_size:1 of
msgid "Read-only view of the :data:`MAX_COOKIE_SIZE` config key."
msgstr "Read-only view of the :data:`MAX_COOKIE_SIZE` config key."

#: flask.Response.max_cookie_size:3 of
msgid ""
"See :attr:`~werkzeug.wrappers.BaseResponse.max_cookie_size` in Werkzeug's"
" docs."
msgstr "See :attr:`~werkzeug.wrappers.BaseResponse.max_cookie_size` in Werkzeug's docs."

#: flask.Response.mimetype:1 of
msgid "The mimetype (content type without charset etc.)"
msgstr "The mimetype (content type without charset etc.)"

#: flask.Response.set_cookie:1 of
msgid ""
"Sets a cookie. The parameters are the same as in the cookie `Morsel` "
"object in the Python standard library but it accepts unicode data, too."
msgstr "Sets a cookie. The parameters are the same as in the cookie `Morsel` object in the Python standard library but it accepts unicode data, too."

#: flask.Response.set_cookie:4 of
msgid ""
"A warning is raised if the size of the cookie header exceeds "
":attr:`max_cookie_size`, but the header will still be set."
msgstr "A warning is raised if the size of the cookie header exceeds :attr:`max_cookie_size`, but the header will still be set."

#: flask.Response.set_cookie:7 of
msgid "the key (name) of the cookie to be set."
msgstr "the key (name) of the cookie to be set."

#: flask.Response.set_cookie:8 of
msgid "the value of the cookie."
msgstr "the value of the cookie."

#: flask.Response.set_cookie:9 of
msgid ""
"should be a number of seconds, or `None` (default) if the cookie should "
"last only as long as the client's browser session."
msgstr "should be a number of seconds, or `None` (default) if the cookie should last only as long as the client's browser session."

#: flask.Response.set_cookie:12 of
msgid "should be a `datetime` object or UNIX timestamp."
msgstr "should be a `datetime` object or UNIX timestamp."

#: flask.Response.set_cookie:13 of
msgid ""
"limits the cookie to a given path, per default it will span the whole "
"domain."
msgstr "limits the cookie to a given path, per default it will span the whole domain."

#: flask.Response.set_cookie:15 of
msgid ""
"if you want to set a cross-domain cookie.  For example, "
"``domain=\".example.com\"`` will set a cookie that is readable by the "
"domain ``www.example.com``, ``foo.example.com`` etc.  Otherwise, a cookie"
" will only be readable by the domain that set it."
msgstr ""

#: flask.Response.set_cookie:20 of
msgid "If `True`, the cookie will only be available via HTTPS"
msgstr "If `True`, the cookie will only be available via HTTPS"

#: flask.Response.set_cookie:21 of
msgid ""
"disallow JavaScript to access the cookie.  This is an extension to the "
"cookie standard and probably not supported by all browsers."
msgstr "disallow JavaScript to access the cookie.  This is an extension to the cookie standard and probably not supported by all browsers."

#: flask.Response.set_cookie:24 of
msgid ""
"Limits the scope of the cookie such that it will only be attached to "
"requests if those requests are \"same-site\"."
msgstr "Limits the scope of the cookie such that it will only be attached to requests if those requests are \"same-site\"."

#: ../../api.rst:104
msgid "Sessions"
msgstr "Sessions"

#: ../../api.rst:106
msgid ""
"If you have set :attr:`Flask.secret_key` (or configured it from "
":data:`SECRET_KEY`) you can use sessions in Flask applications. A session"
" makes it possible to remember information from one request to another. "
"The way Flask does this is by using a signed cookie. The user can look at"
" the session contents, but can't modify it unless they know the secret "
"key, so make sure to set that to something complex and unguessable."
msgstr ""

#: ../../api.rst:113
msgid "To access the current session you can use the :class:`session` object:"
msgstr "To access the current session you can use the :class:`session` object:"

#: ../../api.rst:117
msgid ""
"The session object works pretty much like an ordinary dict, with the "
"difference that it keeps track of modifications."
msgstr "The session object works pretty much like an ordinary dict, with the difference that it keeps track of modifications."

#: ../../api.rst:122
msgid "The following attributes are interesting:"
msgstr "The following attributes are interesting:"

#: ../../api.rst:126
msgid "``True`` if the session is new, ``False`` otherwise."
msgstr "``True`` if the session is new, ``False`` otherwise."

#: ../../api.rst:130
msgid ""
"``True`` if the session object detected a modification.  Be advised that "
"modifications on mutable structures are not picked up automatically, in "
"that situation you have to explicitly set the attribute to ``True`` "
"yourself.  Here an example::"
msgstr ""

#: ../../api.rst:143
msgid ""
"If set to ``True`` the session lives for "
":attr:`~flask.Flask.permanent_session_lifetime` seconds.  The default is "
"31 days.  If set to ``False`` (which is the default) the session will be "
"deleted when the user closes the browser."
msgstr ""

#: ../../api.rst:150
msgid "Session Interface"
msgstr "Session Interface"

#: ../../api.rst:154
msgid ""
"The session interface provides a simple way to replace the session "
"implementation that Flask is using."
msgstr "The session interface provides a simple way to replace the session implementation that Flask is using."

#: flask.sessions.SessionInterface:1 of
msgid ""
"The basic interface you have to implement in order to replace the default"
" session interface which uses werkzeug's securecookie implementation.  "
"The only methods you have to implement are :meth:`open_session` and "
":meth:`save_session`, the others have useful defaults which you don't "
"need to change."
msgstr ""

#: flask.sessions.SessionInterface:7 of
msgid ""
"The session object returned by the :meth:`open_session` method has to "
"provide a dictionary like interface plus the properties and methods from "
"the :class:`SessionMixin`.  We recommend just subclassing a dict and "
"adding that mixin::"
msgstr ""

#: flask.sessions.SessionInterface:15 of
msgid ""
"If :meth:`open_session` returns ``None`` Flask will call into "
":meth:`make_null_session` to create a session that acts as replacement if"
" the session support cannot work because some requirement is not "
"fulfilled.  The default :class:`NullSession` class that is created will "
"complain that the secret key was not set."
msgstr ""

#: flask.sessions.SessionInterface:21 of
msgid ""
"To replace the session interface on an application all you have to do is "
"to assign :attr:`flask.Flask.session_interface`::"
msgstr "To replace the session interface on an application all you have to do is to assign :attr:`flask.Flask.session_interface`::"

#: flask.sessions.SessionInterface.get_cookie_domain:1 of
msgid "Returns the domain that should be set for the session cookie."
msgstr "Returns the domain that should be set for the session cookie."

#: flask.sessions.SessionInterface.get_cookie_domain:3 of
msgid ""
"Uses ``SESSION_COOKIE_DOMAIN`` if it is configured, otherwise falls back "
"to detecting the domain based on ``SERVER_NAME``."
msgstr "Uses ``SESSION_COOKIE_DOMAIN`` if it is configured, otherwise falls back to detecting the domain based on ``SERVER_NAME``."

#: flask.sessions.SessionInterface.get_cookie_domain:6 of
msgid ""
"Once detected (or if not set at all), ``SESSION_COOKIE_DOMAIN`` is "
"updated to avoid re-running the logic."
msgstr "Once detected (or if not set at all), ``SESSION_COOKIE_DOMAIN`` is updated to avoid re-running the logic."

#: flask.sessions.SessionInterface.get_cookie_httponly:1 of
msgid ""
"Returns True if the session cookie should be httponly.  This currently "
"just returns the value of the ``SESSION_COOKIE_HTTPONLY`` config var."
msgstr "Returns True if the session cookie should be httponly.  This currently just returns the value of the ``SESSION_COOKIE_HTTPONLY`` config var."

#: flask.sessions.SessionInterface.get_cookie_path:1 of
msgid ""
"Returns the path for which the cookie should be valid.  The default "
"implementation uses the value from the ``SESSION_COOKIE_PATH`` config var"
" if it's set, and falls back to ``APPLICATION_ROOT`` or uses ``/`` if "
"it's ``None``."
msgstr ""

#: flask.sessions.SessionInterface.get_cookie_samesite:1 of
msgid ""
"Return ``'Strict'`` or ``'Lax'`` if the cookie should use the "
"``SameSite`` attribute. This currently just returns the value of the "
":data:`SESSION_COOKIE_SAMESITE` setting."
msgstr ""

#: flask.sessions.SessionInterface.get_cookie_secure:1 of
msgid ""
"Returns True if the cookie should be secure.  This currently just returns"
" the value of the ``SESSION_COOKIE_SECURE`` setting."
msgstr "Returns True if the cookie should be secure.  This currently just returns the value of the ``SESSION_COOKIE_SECURE`` setting."

#: flask.sessions.SessionInterface.get_expiration_time:1 of
msgid ""
"A helper method that returns an expiration date for the session or "
"``None`` if the session is linked to the browser session.  The default "
"implementation returns now + the permanent session lifetime configured on"
" the application."
msgstr ""

#: flask.sessions.SessionInterface.is_null_session:1 of
msgid ""
"Checks if a given object is a null session.  Null sessions are not asked "
"to be saved."
msgstr "Checks if a given object is a null session.  Null sessions are not asked to be saved."

#: flask.sessions.SessionInterface.is_null_session:4 of
msgid ""
"This checks if the object is an instance of :attr:`null_session_class` by"
" default."
msgstr "This checks if the object is an instance of :attr:`null_session_class` by default."

#: flask.sessions.SessionInterface.make_null_session:1 of
msgid ""
"Creates a null session which acts as a replacement object if the real "
"session support could not be loaded due to a configuration error.  This "
"mainly aids the user experience because the job of the null session is to"
" still support lookup without complaining but modifications are answered "
"with a helpful error message of what failed."
msgstr ""

#: flask.sessions.SessionInterface.make_null_session:8 of
msgid "This creates an instance of :attr:`null_session_class` by default."
msgstr "This creates an instance of :attr:`null_session_class` by default."

#: flask.sessions.SessionInterface.null_session_class:1 of
msgid ""
":meth:`make_null_session` will look here for the class that should be "
"created when a null session is requested.  Likewise the "
":meth:`is_null_session` method will perform a typecheck against this "
"type."
msgstr ""

#: flask.sessions.SecureCookieSessionInterface.open_session:1
#: flask.sessions.SessionInterface.open_session:1 of
msgid ""
"This method has to be implemented and must either return ``None`` in case"
" the loading failed because of a configuration error or an instance of a "
"session object which implements a dictionary like interface + the methods"
" and attributes on :class:`SessionMixin`."
msgstr ""

#: flask.sessions.SessionInterface.pickle_based:1 of
msgid ""
"A flag that indicates if the session interface is pickle based. This can "
"be used by Flask extensions to make a decision in regards to how to deal "
"with the session object."
msgstr ""

#: flask.sessions.SecureCookieSessionInterface.save_session:1
#: flask.sessions.SessionInterface.save_session:1 of
msgid ""
"This is called for actual sessions returned by :meth:`open_session` at "
"the end of the request.  This is still called during a request context so"
" if you absolutely need access to the request you can do that."
msgstr ""

#: flask.sessions.SessionInterface.should_set_cookie:1 of
msgid ""
"Used by session backends to determine if a ``Set-Cookie`` header should "
"be set for this session cookie for this response. If the session has been"
" modified, the cookie is set. If the session is permanent and the "
"``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is always "
"set."
msgstr ""

#: flask.sessions.SessionInterface.should_set_cookie:7 of
msgid "This check is usually skipped if the session was deleted."
msgstr "This check is usually skipped if the session was deleted."

#: flask.sessions.SecureCookieSessionInterface:1 of
msgid ""
"The default session interface that stores sessions in signed cookies "
"through the :mod:`itsdangerous` module."
msgstr "The default session interface that stores sessions in signed cookies through the :mod:`itsdangerous` module."

#: flask.sessions.SecureCookieSessionInterface.digest_method:1 of
msgid "the hash function to use for the signature.  The default is sha1"
msgstr "the hash function to use for the signature.  The default is sha1"

#: flask.sessions.SecureCookieSessionInterface.key_derivation:1 of
msgid ""
"the name of the itsdangerous supported key derivation.  The default is "
"hmac."
msgstr "the name of the itsdangerous supported key derivation.  The default is hmac."

#: flask.sessions.SecureCookieSessionInterface.salt:1 of
msgid ""
"the salt that should be applied on top of the secret key for the signing "
"of cookie based sessions."
msgstr "the salt that should be applied on top of the secret key for the signing of cookie based sessions."

#: flask.sessions.SecureCookieSessionInterface.serializer:1 of
msgid ""
"A python serializer for the payload.  The default is a compact JSON "
"derived serializer with support for some extra Python types such as "
"datetime objects or tuples."
msgstr ""

#: flask.sessions.SecureCookieSession:1 of
msgid "Base class for sessions based on signed cookies."
msgstr "Base class for sessions based on signed cookies."

#: flask.sessions.SecureCookieSession:3 of
msgid ""
"This session backend will set the :attr:`modified` and :attr:`accessed` "
"attributes. It cannot reliably track whether a session is new (vs. "
"empty), so :attr:`new` remains hard coded to ``False``."
msgstr ""

#: flask.sessions.SecureCookieSession.accessed:1 of
msgid ""
"header, which allows caching proxies to cache different pages for "
"different users."
msgstr "header, which allows caching proxies to cache different pages for different users."

#: flask.sessions.SecureCookieSession.get:1
#: flask.sessions.SecureCookieSession.setdefault:3 of
msgid "Return the value for key if key is in the dictionary, else default."
msgstr "Return the value for key if key is in the dictionary, else default."

#: flask.sessions.SecureCookieSession.modified:1 of
msgid ""
"When data is changed, this is set to ``True``. Only the session "
"dictionary itself is tracked; if the session contains mutable data (for "
"example a nested dict) then this must be set to ``True`` manually when "
"modifying that data. The session cookie will only be written to the "
"response if this is ``True``."
msgstr ""

#: flask.sessions.SecureCookieSession.setdefault:1 of
msgid "Insert key with a value of default if key is not in the dictionary."
msgstr "Insert key with a value of default if key is not in the dictionary."

#: flask.sessions.NullSession:1 of
msgid ""
"Class used to generate nicer error messages if sessions are not "
"available.  Will still allow read-only access to the empty session but "
"fail on setting."
msgstr ""

#: flask.sessions.SessionMixin:1 of
msgid "Expands a basic dictionary with session attributes."
msgstr "Expands a basic dictionary with session attributes."

#: flask.sessions.SessionMixin.accessed:1 of
msgid ""
"Some implementations can detect when session data is read or written and "
"set this when that happens. The mixin default is hard coded to ``True``."
msgstr "Some implementations can detect when session data is read or written and set this when that happens. The mixin default is hard coded to ``True``."

#: flask.sessions.SessionMixin.modified:1 of
msgid ""
"Some implementations can detect changes to the session and set this when "
"that happens. The mixin default is hard coded to ``True``."
msgstr "Some implementations can detect changes to the session and set this when that happens. The mixin default is hard coded to ``True``."

#: flask.sessions.SessionMixin.permanent:1 of
msgid "This reflects the ``'_permanent'`` key in the dict."
msgstr "This reflects the ``'_permanent'`` key in the dict."

#: ../../api.rst:174
msgid "Notice"
msgstr "Notice"

#: ../../api.rst:176
msgid ""
"The ``PERMANENT_SESSION_LIFETIME`` config key can also be an integer "
"starting with Flask 0.8.  Either catch this down yourself or use the "
":attr:`~flask.Flask.permanent_session_lifetime` attribute on the app "
"which converts the result to an integer automatically."
msgstr ""

#: ../../api.rst:183
msgid "Test Client"
msgstr "Test Client"

#: flask.testing.FlaskClient:1 of
msgid ""
"Works like a regular Werkzeug test client but has some knowledge about "
"how Flask works to defer the cleanup of the request context stack to the "
"end of a ``with`` body when used in a ``with`` statement.  For general "
"information about how to use this class refer to "
":class:`werkzeug.test.Client`."
msgstr ""

#: flask.testing.FlaskClient:7 of
msgid ""
"`app.test_client()` includes preset default environment, which can be set"
" after instantiation of the `app.test_client()` object in "
"`client.environ_base`."
msgstr ""

#: flask.testing.FlaskClient:12 of
msgid "Basic usage is outlined in the :ref:`testing` chapter."
msgstr "Basic usage is outlined in the :ref:`testing` chapter."

#: flask.testing.FlaskClient.open:1 of
msgid ""
"Takes the same arguments as the :class:`EnvironBuilder` class with some "
"additions:  You can provide a :class:`EnvironBuilder` or a WSGI "
"environment as only argument instead of the :class:`EnvironBuilder` "
"arguments and two optional keyword arguments (`as_tuple`, `buffered`) "
"that change the type of the return value or the way the application is "
"executed."
msgstr ""

#: flask.testing.FlaskClient.open:8 of
msgid ""
"If a dict is provided as file in the dict for the `data` parameter the "
"content type has to be called `content_type` now instead of `mimetype`.  "
"This change was made for consistency with :class:`werkzeug.FileWrapper`."
msgstr ""

#: flask.testing.FlaskClient.open:14 of
msgid "The `follow_redirects` parameter was added to :func:`open`."
msgstr "The `follow_redirects` parameter was added to :func:`open`."

#: flask.testing.FlaskClient.open:16 of
msgid "Additional parameters:"
msgstr "Additional parameters:"

#: flask.testing.FlaskClient.open:18 of
msgid "Returns a tuple in the form ``(environ, result)``"
msgstr "Returns a tuple in the form ``(environ, result)``"

#: flask.testing.FlaskClient.open:19 of
msgid ""
"Set this to True to buffer the application run. This will automatically "
"close the application for you as well."
msgstr "Set this to True to buffer the application run. This will automatically close the application for you as well."

#: flask.testing.FlaskClient.open:22 of
msgid "Set this to True if the `Client` should follow HTTP redirects."
msgstr "Set this to True if the `Client` should follow HTTP redirects."

#: flask.testing.FlaskClient.session_transaction:1 of
msgid ""
"When used in combination with a ``with`` statement this opens a session "
"transaction.  This can be used to modify the session that the test client"
" uses.  Once the ``with`` block is left the session is stored back."
msgstr ""

#: flask.testing.FlaskClient.session_transaction:11 of
msgid ""
"Internally this is implemented by going through a temporary test request "
"context and since session handling could depend on request variables this"
" function accepts the same arguments as "
":meth:`~flask.Flask.test_request_context` which are directly passed "
"through."
msgstr ""

#: ../../api.rst:192
msgid "Test CLI Runner"
msgstr "Test CLI Runner"

#: flask.testing.FlaskCliRunner:1 of
msgid ""
"A :class:`~click.testing.CliRunner` for testing a Flask app's CLI "
"commands. Typically created using :meth:`~flask.Flask.test_cli_runner`. "
"See :ref:`testing-cli`."
msgstr ""

#: flask.testing.FlaskCliRunner.invoke:1 of
msgid ""
"Invokes a CLI command in an isolated environment. See "
":meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for full method"
" documentation. See :ref:`testing-cli` for examples."
msgstr ""

#: flask.testing.FlaskCliRunner.invoke:5 of
msgid ""
"If the ``obj`` argument is not given, passes an instance of "
":class:`~flask.cli.ScriptInfo` that knows how to load the Flask app being"
" tested."
msgstr ""

#: flask.testing.FlaskCliRunner.invoke:9 of
msgid ""
"Command object to invoke. Default is the app's "
":attr:`~flask.app.Flask.cli` group."
msgstr "Command object to invoke. Default is the app's :attr:`~flask.app.Flask.cli` group."

#: flask.testing.FlaskCliRunner.invoke:11 of
msgid "List of strings to invoke the command with."
msgstr "List of strings to invoke the command with."

#: flask.testing.FlaskCliRunner.invoke:13 of
msgid "a :class:`~click.testing.Result` object."
msgstr "a :class:`~click.testing.Result` object."

#: ../../api.rst:201
msgid "Application Globals"
msgstr "Application Globals"

#: ../../api.rst:205
msgid ""
"To share data that is valid for one request only from one function to "
"another, a global variable is not good enough because it would break in "
"threaded environments.  Flask provides you with a special object that "
"ensures it is only valid for the active request and that will return "
"different values for each request.  In a nutshell: it does the right "
"thing, like it does for :class:`request` and :class:`session`."
msgstr ""

#: ../../api.rst:214
msgid ""
"A namespace object that can store data during an :doc:`application "
"context </appcontext>`. This is an instance of "
":attr:`Flask.app_ctx_globals_class`, which defaults to "
":class:`ctx._AppCtxGlobals`."
msgstr ""

#: ../../api.rst:219
msgid ""
"This is a good place to store resources during a request. During testing,"
" you can use the :ref:`faking-resources` pattern to pre-configure such "
"resources."
msgstr ""

#: ../../api.rst:223 ../../api.rst:247
msgid "This is a proxy. See :ref:`notes-on-proxies` for more information."
msgstr "This is a proxy. See :ref:`notes-on-proxies` for more information."

#: ../../api.rst:225
msgid "Bound to the application context instead of the request context."
msgstr "Bound to the application context instead of the request context."

#: flask.ctx._AppCtxGlobals:1 of
msgid ""
"A plain object. Used as a namespace for storing data during an "
"application context."
msgstr "A plain object. Used as a namespace for storing data during an application context."

#: flask.ctx._AppCtxGlobals:4 of
msgid ""
"Creating an app context automatically creates this object, which is made "
"available as the :data:`g` proxy."
msgstr "Creating an app context automatically creates this object, which is made available as the :data:`g` proxy."

#: flask.ctx._AppCtxGlobals:9 of
msgid "Check whether an attribute is present."
msgstr "Check whether an attribute is present."

#: flask.ctx._AppCtxGlobals:15 of
msgid "Return an iterator over the attribute names."
msgstr "Return an iterator over the attribute names."

#: flask.ctx._AppCtxGlobals.get:1 of
msgid "Get an attribute by name, or a default value. Like :meth:`dict.get`."
msgstr "Get an attribute by name, or a default value. Like :meth:`dict.get`."

#: flask.ctx._AppCtxGlobals.get:4 flask.ctx._AppCtxGlobals.setdefault:4 of
msgid "Name of attribute to get."
msgstr "Name of attribute to get."

#: flask.ctx._AppCtxGlobals.get:5 of
msgid "Value to return if the attribute is not present."
msgstr "Value to return if the attribute is not present."

#: flask.ctx._AppCtxGlobals.pop:1 of
msgid "Get and remove an attribute by name. Like :meth:`dict.pop`."
msgstr "Get and remove an attribute by name. Like :meth:`dict.pop`."

#: flask.ctx._AppCtxGlobals.pop:3 of
msgid "Name of attribute to pop."
msgstr "Name of attribute to pop."

#: flask.ctx._AppCtxGlobals.pop:4 of
msgid ""
"Value to return if the attribute is not present, instead of raise a "
"``KeyError``."
msgstr "Value to return if the attribute is not present, instead of raise a ``KeyError``."

#: flask.ctx._AppCtxGlobals.setdefault:1 of
msgid ""
"Get the value of an attribute if it is present, otherwise set and return "
"a default value. Like :meth:`dict.setdefault`."
msgstr "Get the value of an attribute if it is present, otherwise set and return a default value. Like :meth:`dict.setdefault`."

#: flask.ctx._AppCtxGlobals.setdefault of
msgid "param"
msgstr "param"

#: flask.ctx._AppCtxGlobals.setdefault:5 of
msgid "default: Value to set and return if the attribute is not present."
msgstr "default: Value to set and return if the attribute is not present."

#: ../../api.rst:233
msgid "Useful Functions and Classes"
msgstr "Useful Functions and Classes"

#: ../../api.rst:237
msgid ""
"A proxy to the application handling the current request. This is useful "
"to access the application without needing to import it, or if it can't be"
" imported, such as when using the application factory pattern or in "
"blueprints and extensions."
msgstr ""

#: ../../api.rst:242
msgid ""
"This is only available when an :doc:`application context </appcontext>` "
"is pushed. This happens automatically during requests and CLI commands. "
"It can be controlled manually with :meth:`~flask.Flask.app_context`."
msgstr ""

#: flask.has_request_context:1 of
msgid ""
"If you have code that wants to test if a request context is there or not "
"this function can be used.  For instance, you may want to take advantage "
"of request information if the request object is available, but fail "
"silently if it is unavailable."
msgstr ""

#: flask.has_request_context:16 of
msgid ""
"Alternatively you can also just test any of the context bound objects "
"(such as :class:`request` or :class:`g` for truthness)::"
msgstr "Alternatively you can also just test any of the context bound objects (such as :class:`request` or :class:`g` for truthness)::"

#: flask.copy_current_request_context:1 of
msgid ""
"A helper function that decorates a function to retain the current request"
" context.  This is useful when working with greenlets.  The moment the "
"function is decorated a copy of the request context is created and then "
"pushed when the function is called.  The current session is also included"
" in the copied request context."
msgstr ""

#: flask.has_app_context:1 of
msgid ""
"Works like :func:`has_request_context` but for the application context.  "
"You can also just do a boolean check on the :data:`current_app` object "
"instead."
msgstr ""

#: flask.url_for:1 of
msgid "Generates a URL to the given endpoint with the method provided."
msgstr "Generates a URL to the given endpoint with the method provided."

#: flask.url_for:3 of
msgid ""
"Variable arguments that are unknown to the target endpoint are appended "
"to the generated URL as query arguments.  If the value of a query "
"argument is ``None``, the whole pair is skipped.  In case blueprints are "
"active you can shortcut references to the same blueprint by prefixing the"
" local endpoint with a dot (``.``)."
msgstr ""

#: flask.url_for:9 of
msgid "This will reference the index function local to the current blueprint::"
msgstr "This will reference the index function local to the current blueprint::"

#: flask.url_for:13 of
msgid "For more information, head over to the :ref:`Quickstart <url-building>`."
msgstr "For more information, head over to the :ref:`Quickstart <url-building>`."

#: flask.url_for:15 of
msgid ""
"To integrate applications, :class:`Flask` has a hook to intercept URL "
"build errors through :attr:`Flask.url_build_error_handlers`.  The "
"`url_for` function results in a :exc:`~werkzeug.routing.BuildError` when "
"the current app does not have a URL for the given endpoint and values.  "
"When it does, the :data:`~flask.current_app` calls its "
":attr:`~Flask.url_build_error_handlers` if it is not ``None``, which can "
"return a string to use as the result of `url_for` (instead of `url_for`'s"
" default to raise the :exc:`~werkzeug.routing.BuildError` exception) or "
"re-raise the exception. An example::"
msgstr ""

#: flask.url_for:44 of
msgid ""
"Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and"
" `endpoint` and `values` are the arguments passed into `url_for`.  Note "
"that this is for building URLs outside the current application, and not "
"for handling 404 NotFound errors."
msgstr ""

#: flask.url_for:49 of
msgid "The `_scheme` parameter was added."
msgstr "The `_scheme` parameter was added."

#: flask.url_for:52 of
msgid "The `_anchor` and `_method` parameters were added."
msgstr "The `_anchor` and `_method` parameters were added."

#: flask.url_for:55 of
msgid ""
"Calls :meth:`Flask.handle_build_error` on "
":exc:`~werkzeug.routing.BuildError`."
msgstr "Calls :meth:`Flask.handle_build_error` on :exc:`~werkzeug.routing.BuildError`."

#: flask.url_for:59 of
msgid "the endpoint of the URL (name of the function)"
msgstr "the endpoint of the URL (name of the function)"

#: flask.url_for:60 of
msgid "the variable arguments of the URL rule"
msgstr "the variable arguments of the URL rule"

#: flask.url_for:61 of
msgid ""
"if set to ``True``, an absolute URL is generated. Server address can be "
"changed via ``SERVER_NAME`` configuration variable which defaults to "
"`localhost`."
msgstr ""

#: flask.url_for:64 of
msgid ""
"a string specifying the desired URL scheme. The `_external` parameter "
"must be set to ``True`` or a :exc:`ValueError` is raised. The default "
"behavior uses the same scheme as the current request, or "
"``PREFERRED_URL_SCHEME`` from the :ref:`app configuration <config>` if no"
" request context is available. As of Werkzeug 0.10, this also can be set "
"to an empty string to build protocol-relative URLs."
msgstr ""

#: flask.url_for:70 of
msgid "if provided this is added as anchor to the URL."
msgstr "if provided this is added as anchor to the URL."

#: flask.url_for:71 of
msgid "if provided this explicitly specifies an HTTP method."
msgstr "if provided this explicitly specifies an HTTP method."

#: flask.abort:1 of
msgid ""
"Raises an :py:exc:`HTTPException` for the given status code or WSGI "
"application::"
msgstr "Raises an :py:exc:`HTTPException` for the given status code or WSGI application::"

#: flask.abort:7 of
msgid ""
"Can be passed a WSGI application or a status code.  If a status code is "
"given it's looked up in the list of exceptions and will raise that "
"exception, if passed a WSGI application it will wrap it in a proxy WSGI "
"exception and raise that::"
msgstr ""

#: flask.redirect:1 of
msgid ""
"Returns a response object (a WSGI application) that, if called, redirects"
" the client to the target location. Supported codes are 301, 302, 303, "
"305, 307, and 308. 300 is not supported because it's not a real redirect "
"and 304 because it's the answer for a request with a request with defined"
" If-Modified-Since headers."
msgstr ""

#: flask.redirect:11 of
msgid "The class used for the Response object can now be passed in."
msgstr "The class used for the Response object can now be passed in."

#: flask.redirect:7 of
msgid ""
"The location can now be a unicode string that is encoded using the "
":func:`iri_to_uri` function."
msgstr "The location can now be a unicode string that is encoded using the :func:`iri_to_uri` function."

#: flask.redirect:14 of
msgid "the location the response should redirect to."
msgstr "the location the response should redirect to."

#: flask.redirect:15 of
msgid "the redirect status code. defaults to 302."
msgstr "the redirect status code. defaults to 302."

#: flask.redirect:16 of
msgid ""
"a Response class to use when instantiating a response. The default is "
":class:`werkzeug.wrappers.Response` if unspecified."
msgstr "a Response class to use when instantiating a response. The default is :class:`werkzeug.wrappers.Response` if unspecified."

#: flask.make_response:1 of
msgid ""
"Sometimes it is necessary to set additional headers in a view.  Because "
"views do not have to return response objects but can return a value that "
"is converted into a response object by Flask itself, it becomes tricky to"
" add headers to it.  This function can be called instead of using a "
"return and you will get a response object which you can use to attach "
"headers."
msgstr ""

#: flask.make_response:7 of
msgid "If view looked like this and you want to add a new header::"
msgstr "If view looked like this and you want to add a new header::"

#: flask.make_response:12 of
msgid "You can now do something like this::"
msgstr "You can now do something like this::"

#: flask.make_response:19 of
msgid ""
"This function accepts the very same arguments you can return from a view "
"function.  This for example creates a response with a 404 error code::"
msgstr "This function accepts the very same arguments you can return from a view function.  This for example creates a response with a 404 error code::"

#: flask.make_response:25 of
msgid ""
"The other use case of this function is to force the return value of a "
"view function into a response which is helpful with view decorators::"
msgstr "The other use case of this function is to force the return value of a view function into a response which is helpful with view decorators::"

#: flask.make_response:32 of
msgid "Internally this function does the following things:"
msgstr "Internally this function does the following things:"

#: flask.make_response:34 of
msgid "if no arguments are passed, it creates a new response argument"
msgstr "if no arguments are passed, it creates a new response argument"

#: flask.make_response:35 of
msgid ""
"if one argument is passed, :meth:`flask.Flask.make_response` is invoked "
"with it."
msgstr "if one argument is passed, :meth:`flask.Flask.make_response` is invoked with it."

#: flask.make_response:37 of
msgid ""
"if more than one argument is passed, the arguments are passed to the "
":meth:`flask.Flask.make_response` function as tuple."
msgstr "if more than one argument is passed, the arguments are passed to the :meth:`flask.Flask.make_response` function as tuple."

#: flask.after_this_request:1 of
msgid ""
"Executes a function after this request.  This is useful to modify "
"response objects.  The function is passed the response object and has to "
"return the same or a new one."
msgstr ""

#: flask.after_this_request:15 of
msgid ""
"This is more useful if a function other than the view function wants to "
"modify a response.  For instance think of a decorator that wants to add "
"some headers without converting the return value into a response object."
msgstr ""

#: flask.send_file:1 of
msgid ""
"Sends the contents of a file to the client.  This will use the most "
"efficient method available and configured.  By default it will try to use"
" the WSGI server's file_wrapper support.  Alternatively you can set the "
"application's :attr:`~Flask.use_x_sendfile` attribute to ``True`` to "
"directly emit an ``X-Sendfile`` header.  This however requires support of"
" the underlying webserver for ``X-Sendfile``."
msgstr ""

#: flask.send_file:8 of
msgid ""
"By default it will try to guess the mimetype for you, but you can also "
"explicitly provide one.  For extra security you probably want to send "
"certain files as attachment (HTML for instance).  The mimetype guessing "
"requires a `filename` or an `attachment_filename` to be provided."
msgstr ""

#: flask.send_file:14 of
msgid ""
"ETags will also be attached automatically if a `filename` is provided. "
"You can turn this off by setting `add_etags=False`."
msgstr "ETags will also be attached automatically if a `filename` is provided. You can turn this off by setting `add_etags=False`."

#: flask.send_file:17 of
msgid ""
"If `conditional=True` and `filename` is provided, this method will try to"
" upgrade the response stream to support range requests.  This will allow "
"the request to be answered with partial content response."
msgstr ""

#: flask.send_file:21 of
msgid ""
"Please never pass filenames to this function from user sources; you "
"should use :func:`send_from_directory` instead."
msgstr "Please never pass filenames to this function from user sources; you should use :func:`send_from_directory` instead."

#: flask.send_file:48 of
msgid "UTF-8 filenames, as specified in `RFC 2231`_, are supported."
msgstr "UTF-8 filenames, as specified in `RFC 2231`_, are supported."

#: flask.send_file:39 of
msgid ""
"The filename is no longer automatically inferred from file objects. If "
"you want to use automatic mimetype and etag support, pass a filepath via "
"`filename_or_fp` or `attachment_filename`."
msgstr ""

#: flask.send_file:44 of
msgid ""
"The `attachment_filename` is preferred over `filename` for MIME-type "
"detection."
msgstr "The `attachment_filename` is preferred over `filename` for MIME-type detection."

#: flask.send_file:36 of
msgid "cache_timeout pulls its default from application config, when None."
msgstr "cache_timeout pulls its default from application config, when None."

#: flask.send_file:30 of
msgid ""
"mimetype guessing and etag support for file objects was deprecated "
"because it was unreliable.  Pass a filename if you are able to, otherwise"
" attach an etag yourself.  This functionality will be removed in Flask "
"1.0"
msgstr ""

#: flask.send_file:26 of
msgid ""
"The `add_etags`, `cache_timeout` and `conditional` parameters were added."
"  The default behavior is now to attach etags."
msgstr "The `add_etags`, `cache_timeout` and `conditional` parameters were added.  The default behavior is now to attach etags."

#: flask.send_file:57 of
msgid "Filename may be a :class:`~os.PathLike` object."
msgstr "Filename may be a :class:`~os.PathLike` object."

#: flask.send_file:60 of
msgid "Partial content supports :class:`~io.BytesIO`."
msgstr "Partial content supports :class:`~io.BytesIO`."

#: flask.send_file:53 of
msgid ""
"Filenames are encoded with ASCII instead of Latin-1 for broader "
"compatibility with WSGI servers."
msgstr "Filenames are encoded with ASCII instead of Latin-1 for broader compatibility with WSGI servers."

#: flask.send_file:63 of
msgid ""
"the filename of the file to send. This is relative to the "
":attr:`~Flask.root_path` if a relative path is specified. Alternatively a"
" file object might be provided in which case ``X-Sendfile`` might not "
"work and fall back to the traditional method.  Make sure that the file "
"pointer is positioned at the start of data to send before calling "
":func:`send_file`."
msgstr ""

#: flask.send_file:71 of
msgid ""
"the mimetype of the file if provided. If a file path is given, auto "
"detection happens as fallback, otherwise an error will be raised."
msgstr "the mimetype of the file if provided. If a file path is given, auto detection happens as fallback, otherwise an error will be raised."

#: flask.send_file:74 of
msgid ""
"set to ``True`` if you want to send this file with a ``Content-"
"Disposition: attachment`` header."
msgstr "set to ``True`` if you want to send this file with a ``Content-Disposition: attachment`` header."

#: flask.send_file:76 of
msgid "the filename for the attachment if it differs from the file's filename."
msgstr "the filename for the attachment if it differs from the file's filename."

#: flask.send_file:78 of
msgid "set to ``False`` to disable attaching of etags."
msgstr "set to ``False`` to disable attaching of etags."

#: flask.send_file:79 of
msgid "set to ``True`` to enable conditional responses."
msgstr "set to ``True`` to enable conditional responses."

#: flask.send_file:81 of
msgid ""
"the timeout in seconds for the headers. When ``None`` (default), this "
"value is set by :meth:`~Flask.get_send_file_max_age` of "
":data:`~flask.current_app`."
msgstr ""

#: flask.send_file:85 of
msgid ""
"set the ``Last-Modified`` header to this value, a "
":class:`~datetime.datetime` or timestamp. If a file was passed, this "
"overrides its mtime."
msgstr ""

#: flask.send_from_directory:1 of
msgid ""
"Send a file from a given directory with :func:`send_file`.  This is a "
"secure way to quickly expose static files from an upload folder or "
"something similar."
msgstr ""

#: ../../api.rst:411 ../../api.rst:571 flask.json.jsonify:18 flask.safe_join:4
#: flask.send_from_directory:5 of
msgid "Example usage::"
msgstr "Example usage::"

#: flask.send_from_directory:12 of
msgid "Sending files and Performance"
msgstr "Sending files and Performance"

#: flask.send_from_directory:14 of
msgid ""
"It is strongly recommended to activate either ``X-Sendfile`` support in "
"your webserver or (if no authentication happens) to tell the webserver to"
" serve files for the given path on its own without calling into the web "
"application for improved performance."
msgstr ""

#: flask.send_from_directory:21 of
msgid "the directory where all the files are stored."
msgstr "the directory where all the files are stored."

#: flask.send_from_directory:22 of
msgid "the filename relative to that directory to download."
msgstr "the filename relative to that directory to download."

#: flask.send_from_directory:24 of
msgid ""
"optional keyword arguments that are directly forwarded to "
":func:`send_file`."
msgstr "optional keyword arguments that are directly forwarded to :func:`send_file`."

#: flask.safe_join:1 of
msgid "Safely join `directory` and zero or more untrusted `pathnames` components."
msgstr "Safely join `directory` and zero or more untrusted `pathnames` components."

#: flask.safe_join:12 of
msgid "the trusted base directory."
msgstr "the trusted base directory."

#: flask.safe_join:13 of
msgid "the untrusted pathnames relative to that directory."
msgstr "the untrusted pathnames relative to that directory."

#: flask.safe_join of
msgid "raises"
msgstr "raises"

#: flask.safe_join:14 of
msgid ""
":class:`~werkzeug.exceptions.NotFound` if one or more passed paths fall "
"out of its boundaries."
msgstr ":class:`~werkzeug.exceptions.NotFound` if one or more passed paths fall out of its boundaries."

#: ../../docstring flask.escape:1 of
msgid ""
"Convert the characters &, <, >, ', and \" in string s to HTML-safe "
"sequences.  Use this if you need to display text that might contain such "
"characters in HTML.  Marks return value as markup string."
msgstr ""

#: flask.Markup:1 of
msgid ""
"A string that is ready to be safely inserted into an HTML or XML "
"document, either because it was escaped or because it was marked safe."
msgstr "A string that is ready to be safely inserted into an HTML or XML document, either because it was escaped or because it was marked safe."

#: flask.Markup:5 of
msgid ""
"Passing an object to the constructor converts it to text and wraps it to "
"mark it safe without escaping. To escape the text, use the :meth:`escape`"
" class method instead."
msgstr ""

#: flask.Markup:16 of
msgid ""
"This implements the ``__html__()`` interface that some frameworks use. "
"Passing an object that implements ``__html__()`` will wrap the output of "
"that method, marking it safe."
msgstr ""

#: flask.Markup:27 of
msgid ""
"This is a subclass of the text type (``str`` in Python 3, ``unicode`` in "
"Python 2). It has the same methods as that type, but all methods escape "
"their arguments and return a ``Markup`` instance."
msgstr ""

#: flask.Markup.escape:1 of
msgid ""
"Escape a string. Calls :func:`escape` and ensures that for subclasses the"
" correct type is returned."
msgstr "Escape a string. Calls :func:`escape` and ensures that for subclasses the correct type is returned."

#: flask.Markup.striptags:1 of
msgid ""
":meth:`unescape` the markup, remove tags, and normalize whitespace to "
"single spaces."
msgstr ":meth:`unescape` the markup, remove tags, and normalize whitespace to single spaces."

#: flask.Markup.unescape:1 of
msgid ""
"Convert escaped markup back into a text string. This replaces HTML "
"entities with the characters they represent."
msgstr "Convert escaped markup back into a text string. This replaces HTML entities with the characters they represent."

#: ../../api.rst:277
msgid "Message Flashing"
msgstr "Message Flashing"

#: flask.flash:1 of
msgid ""
"Flashes a message to the next request.  In order to remove the flashed "
"message from the session and to display it to the user, the template has "
"to call :func:`get_flashed_messages`."
msgstr ""

#: flask.flash:5 of
msgid "`category` parameter added."
msgstr "`category` parameter added."

#: flask.flash:8 of
msgid "the message to be flashed."
msgstr "the message to be flashed."

#: flask.flash:9 of
msgid ""
"the category for the message.  The following values are recommended: "
"``'message'`` for any kind of message, ``'error'`` for errors, ``'info'``"
" for information messages and ``'warning'`` for warnings.  However any "
"kind of string can be used as category."
msgstr ""

#: flask.get_flashed_messages:1 of
msgid ""
"Pulls all flashed messages from the session and returns them. Further "
"calls in the same request to the function will return the same messages."
"  By default just the messages are returned, but when `with_categories` "
"is set to ``True``, the return value will be a list of tuples in the form"
" ``(category, message)`` instead."
msgstr ""

#: flask.get_flashed_messages:7 of
msgid ""
"Filter the flashed messages to one or more categories by providing those "
"categories in `category_filter`.  This allows rendering categories in "
"separate html blocks.  The `with_categories` and `category_filter` "
"arguments are distinct:"
msgstr ""

#: flask.get_flashed_messages:12 of
msgid ""
"`with_categories` controls whether categories are returned with message "
"text (``True`` gives a tuple, where ``False`` gives just the message "
"text)."
msgstr ""

#: flask.get_flashed_messages:14 of
msgid ""
"`category_filter` filters the messages down to only those matching the "
"provided categories."
msgstr "`category_filter` filters the messages down to only those matching the provided categories."

#: flask.get_flashed_messages:17 of
msgid "See :ref:`message-flashing-pattern` for examples."
msgstr "See :ref:`message-flashing-pattern` for examples."

#: flask.get_flashed_messages:22 of
msgid "`category_filter` parameter added."
msgstr "`category_filter` parameter added."

#: flask.get_flashed_messages:19 of
msgid "`with_categories` parameter added."
msgstr "`with_categories` parameter added."

#: flask.get_flashed_messages:25 of
msgid "set to ``True`` to also receive categories."
msgstr "set to ``True`` to also receive categories."

#: flask.get_flashed_messages:26 of
msgid "whitelist of categories to limit return values"
msgstr "whitelist of categories to limit return values"

#: ../../api.rst:284
msgid "JSON Support"
msgstr "JSON Support"

#: ../../api.rst:288
msgid ""
"Flask uses ``simplejson`` for the JSON implementation.  Since simplejson "
"is provided by both the standard library as well as extension, Flask will"
" try simplejson first and then fall back to the stdlib json module.  On "
"top of that it will delegate access to the current application's JSON "
"encoders and decoders for easier customization."
msgstr ""

#: ../../api.rst:294
msgid "So for starters instead of doing::"
msgstr "So for starters instead of doing::"

#: ../../api.rst:301
msgid "You can instead just do this::"
msgstr "You can instead just do this::"

#: ../../api.rst:305
msgid ""
"For usage examples, read the :mod:`json` documentation in the standard "
"library.  The following extensions are by default applied to the stdlib's"
" JSON module:"
msgstr ""

#: ../../api.rst:309
msgid "``datetime`` objects are serialized as :rfc:`822` strings."
msgstr "``datetime`` objects are serialized as :rfc:`822` strings."

#: ../../api.rst:310
msgid ""
"Any object with an ``__html__`` method (like :class:`~flask.Markup`) will"
" have that method called and then the return value is serialized as "
"string."
msgstr ""

#: ../../api.rst:314
msgid ""
"The :func:`~htmlsafe_dumps` function of this json module is also "
"available as a filter called ``|tojson`` in Jinja2.  Note that in "
"versions of Flask prior to Flask 0.10, you must disable escaping with "
"``|safe`` if you intend to use ``|tojson`` output inside ``script`` tags."
" In Flask 0.10 and above, this happens automatically (but it's harmless "
"to include ``|safe`` anyway)."
msgstr ""

#: ../../api.rst:326
msgid "Auto-Sort JSON Keys"
msgstr "Auto-Sort JSON Keys"

#: ../../api.rst:328
msgid ""
"The configuration variable ``JSON_SORT_KEYS`` (:ref:`config`) can be set "
"to false to stop Flask from auto-sorting keys.  By default sorting is "
"enabled and outside of the app context sorting is turned on."
msgstr ""

#: ../../api.rst:332
msgid ""
"Notice that disabling key sorting can cause issues when using content "
"based HTTP caches and Python's hash randomization feature."
msgstr "Notice that disabling key sorting can cause issues when using content based HTTP caches and Python's hash randomization feature."

#: flask.json.jsonify:1 of
msgid ""
"This function wraps :func:`dumps` to add a few enhancements that make "
"life easier.  It turns the JSON output into a :class:`~flask.Response` "
"object with the :mimetype:`application/json` mimetype.  For convenience, "
"it also converts multiple arguments into an array or multiple keyword "
"arguments into a dict.  This means that both ``jsonify(1,2,3)`` and "
"``jsonify([1,2,3])`` serialize to ``[1,2,3]``."
msgstr ""

#: flask.json.jsonify:8 of
msgid ""
"For clarity, the JSON serialization behavior has the following "
"differences from :func:`dumps`:"
msgstr "For clarity, the JSON serialization behavior has the following differences from :func:`dumps`:"

#: flask.json.jsonify:11 of
msgid "Single argument: Passed straight through to :func:`dumps`."
msgstr "Single argument: Passed straight through to :func:`dumps`."

#: flask.json.jsonify:12 of
msgid ""
"Multiple arguments: Converted to an array before being passed to "
":func:`dumps`."
msgstr "Multiple arguments: Converted to an array before being passed to :func:`dumps`."

#: flask.json.jsonify:14 of
msgid ""
"Multiple keyword arguments: Converted to a dict before being passed to "
":func:`dumps`."
msgstr "Multiple keyword arguments: Converted to a dict before being passed to :func:`dumps`."

#: flask.json.jsonify:16 of
msgid "Both args and kwargs: Behavior undefined and will throw an exception."
msgstr "Both args and kwargs: Behavior undefined and will throw an exception."

#: flask.json.jsonify:28 of
msgid "This will send a JSON response like this to the browser::"
msgstr "This will send a JSON response like this to the browser::"

#: flask.json.jsonify:37 of
msgid ""
"Added support for serializing top-level arrays. This introduces a "
"security risk in ancient browsers. See :ref:`json-security` for details."
msgstr "Added support for serializing top-level arrays. This introduces a security risk in ancient browsers. See :ref:`json-security` for details."

#: flask.json.jsonify:41 of
msgid ""
"This function's response will be pretty printed if the "
"``JSONIFY_PRETTYPRINT_REGULAR`` config parameter is set to True or the "
"Flask app is running in debug mode. Compressed (not pretty) formatting "
"currently means no indents and no spaces after separators."
msgstr ""

#: flask.json.dumps:1 of
msgid ""
"Serialize ``obj`` to a JSON formatted ``str`` by using the application's "
"configured encoder (:attr:`~flask.Flask.json_encoder`) if there is an "
"application on the stack."
msgstr ""

#: flask.json.dumps:5 of
msgid ""
"This function can return ``unicode`` strings or ascii-only bytestrings by"
" default which coerce into unicode strings automatically.  That behavior "
"by default is controlled by the ``JSON_AS_ASCII`` configuration variable "
"and can be overridden by the simplejson ``ensure_ascii`` parameter."
msgstr ""

#: flask.json.dump:1 of
msgid "Like :func:`dumps` but writes into a file object."
msgstr "Like :func:`dumps` but writes into a file object."

#: flask.json.loads:1 of
msgid ""
"Unserialize a JSON object from a string ``s`` by using the application's "
"configured decoder (:attr:`~flask.Flask.json_decoder`) if there is an "
"application on the stack."
msgstr ""

#: flask.json.load:1 of
msgid "Like :func:`loads` but reads from a file object."
msgstr "Like :func:`loads` but reads from a file object."

#: flask.json.JSONEncoder:1 of
msgid ""
"The default Flask JSON encoder.  This one extends the default simplejson "
"encoder by also supporting ``datetime`` objects, ``UUID`` as well as "
"``Markup`` objects which are serialized as RFC 822 datetime strings (same"
" as the HTTP date format).  In order to support more data types override "
"the :meth:`default` method."
msgstr ""

#: flask.json.JSONEncoder.default:1 of
msgid ""
"Implement this method in a subclass such that it returns a serializable "
"object for ``o``, or calls the base implementation (to raise a "
":exc:`TypeError`)."
msgstr ""

#: flask.json.JSONEncoder.default:5 of
msgid ""
"For example, to support arbitrary iterators, you could implement default "
"like this::"
msgstr "For example, to support arbitrary iterators, you could implement default like this::"

#: flask.json.JSONDecoder:1 of
msgid ""
"The default JSON decoder.  This one does not change the behavior from the"
" default simplejson decoder.  Consult the :mod:`json` documentation for "
"more information.  This decoder is not only used for the load functions "
"of this module but also :attr:`~flask.Request`."
msgstr ""

#: flask.json.tag:2 of
msgid "Tagged JSON"
msgstr "Tagged JSON"

#: flask.json.tag:4 of
msgid ""
"A compact representation for lossless serialization of non-standard JSON "
"types. :class:`~flask.sessions.SecureCookieSessionInterface` uses this to"
" serialize the session data, but it may be useful in other places. It can"
" be extended to support other types."
msgstr ""

#: flask.json.tag.TaggedJSONSerializer:1 of
msgid ""
"Serializer that uses a tag system to compactly represent objects that are"
" not JSON types. Passed as the intermediate serializer to "
":class:`itsdangerous.Serializer`."
msgstr ""

#: flask.json.tag.TaggedJSONSerializer:5 of
msgid "The following extra types are supported:"
msgstr "The following extra types are supported:"

#: flask.json.tag.TaggedJSONSerializer:7 of
msgid ":class:`dict`"
msgstr ":class:`dict`"

#: flask.json.tag.TaggedJSONSerializer:8 of
msgid ":class:`tuple`"
msgstr ":class:`tuple`"

#: flask.json.tag.TaggedJSONSerializer:9 of
msgid ":class:`bytes`"
msgstr ":class:`bytes`"

#: flask.json.tag.TaggedJSONSerializer:10 of
msgid ":class:`~flask.Markup`"
msgstr ":class:`~flask.Markup`"

#: flask.json.tag.TaggedJSONSerializer:11 of
msgid ":class:`~uuid.UUID`"
msgstr ":class:`~uuid.UUID`"

#: flask.json.tag.TaggedJSONSerializer:12 of
msgid ":class:`~datetime.datetime`"
msgstr ":class:`~datetime.datetime`"

#: flask.json.tag.TaggedJSONSerializer.default_tags:1 of
msgid ""
"Tag classes to bind when creating the serializer. Other tags can be added"
" later using :meth:`~register`."
msgstr "Tag classes to bind when creating the serializer. Other tags can be added later using :meth:`~register`."

#: flask.json.tag.TaggedJSONSerializer.dumps:1 of
msgid "Tag the value and dump it to a compact JSON string."
msgstr "Tag the value and dump it to a compact JSON string."

#: flask.json.tag.TaggedJSONSerializer.loads:1 of
msgid "Load data from a JSON string and deserialized any tagged objects."
msgstr "Load data from a JSON string and deserialized any tagged objects."

#: flask.json.tag.TaggedJSONSerializer.register:1 of
msgid "Register a new tag with this serializer."
msgstr "Register a new tag with this serializer."

#: flask.json.tag.TaggedJSONSerializer.register:3 of
msgid "tag class to register. Will be instantiated with this serializer instance."
msgstr "tag class to register. Will be instantiated with this serializer instance."

#: flask.json.tag.TaggedJSONSerializer.register:5 of
msgid ""
"overwrite an existing tag. If false (default), a :exc:`KeyError` is "
"raised."
msgstr "overwrite an existing tag. If false (default), a :exc:`KeyError` is raised."

#: flask.json.tag.TaggedJSONSerializer.register:7 of
msgid ""
"index to insert the new tag in the tag order. Useful when the new tag is "
"a special case of an existing tag. If ``None`` (default), the tag is "
"appended to the end of the order."
msgstr ""

#: flask.json.tag.TaggedJSONSerializer.register of
msgid "引发"
msgstr "引发"

#: flask.json.tag.TaggedJSONSerializer.register:11 of
msgid "if the tag key is already registered and ``force`` is not true."
msgstr "if the tag key is already registered and ``force`` is not true."

#: flask.json.tag.TaggedJSONSerializer.tag:1 of
msgid "Convert a value to a tagged representation if necessary."
msgstr "Convert a value to a tagged representation if necessary."

#: flask.json.tag.TaggedJSONSerializer.untag:1 of
msgid "Convert a tagged representation back to the original type."
msgstr "Convert a tagged representation back to the original type."

#: flask.json.tag.JSONTag:1 of
msgid "Base class for defining type tags for :class:`TaggedJSONSerializer`."
msgstr "Base class for defining type tags for :class:`TaggedJSONSerializer`."

#: flask.json.tag.JSONTag.check:1 of
msgid "Check if the given value should be tagged by this tag."
msgstr "Check if the given value should be tagged by this tag."

#: flask.json.tag.JSONTag.key:1 of
msgid ""
"The tag to mark the serialized object with. If ``None``, this tag is only"
" used as an intermediate step during tagging."
msgstr "The tag to mark the serialized object with. If ``None``, this tag is only used as an intermediate step during tagging."

#: flask.json.tag.JSONTag.tag:1 of
msgid ""
"Convert the value to a valid JSON type and add the tag structure around "
"it."
msgstr "Convert the value to a valid JSON type and add the tag structure around it."

#: flask.json.tag.JSONTag.to_json:1 of
msgid ""
"Convert the Python object to an object that is a valid JSON type. The tag"
" will be added later."
msgstr "Convert the Python object to an object that is a valid JSON type. The tag will be added later."

#: flask.json.tag.JSONTag.to_python:1 of
msgid ""
"Convert the JSON representation back to the correct type. The tag will "
"already be removed."
msgstr "Convert the JSON representation back to the correct type. The tag will already be removed."

#: flask.json.tag:15 of
msgid ""
"Let's seen an example that adds support for "
":class:`~collections.OrderedDict`. Dicts don't have an order in Python or"
" JSON, so to handle this we will dump the items as a list of ``[key, "
"value]`` pairs. Subclass :class:`JSONTag` and give it the new key ``' "
"od'`` to identify the type. The session serializer processes dicts first,"
" so insert the new tag at the front of the order since ``OrderedDict`` "
"must be processed before ``dict``. ::"
msgstr ""

#: flask.json.tag of
msgid "copyright"
msgstr "copyright"

#: flask.json.tag:39 of
msgid "© 2010 by the Pallets team."
msgstr "© 2010 by the Pallets team."

#: flask.json.tag of
msgid "license"
msgstr "license"

#: flask.json.tag:40 of
msgid "BSD, see LICENSE for more details."
msgstr "BSD, see LICENSE for more details."

#: ../../api.rst:354
msgid "Template Rendering"
msgstr "Template Rendering"

#: flask.render_template:1 of
msgid "Renders a template from the template folder with the given context."
msgstr "Renders a template from the template folder with the given context."

#: flask.render_template:4 of
msgid ""
"the name of the template to be rendered, or an iterable with template "
"names the first one existing will be rendered"
msgstr "the name of the template to be rendered, or an iterable with template names the first one existing will be rendered"

#: flask.render_template:7 flask.render_template_string:6 of
msgid "the variables that should be available in the context of the template."
msgstr "the variables that should be available in the context of the template."

#: flask.render_template_string:1 of
msgid ""
"Renders a template from the given template source string with the given "
"context. Template variables will be autoescaped."
msgstr "Renders a template from the given template source string with the given context. Template variables will be autoescaped."

#: flask.render_template_string:4 of
msgid "the source code of the template to be rendered"
msgstr "the source code of the template to be rendered"

#: flask.get_template_attribute:1 of
msgid ""
"Loads a macro (or variable) a template exports.  This can be used to "
"invoke a macro from within Python code.  If you for example have a "
"template named :file:`_cider.html` with the following contents:"
msgstr ""

#: flask.get_template_attribute:9 of
msgid "You can access this from Python code like this::"
msgstr "You can access this from Python code like this::"

#: flask.get_template_attribute:16 of
msgid "the name of the template"
msgstr "the name of the template"

#: flask.get_template_attribute:17 of
msgid "the name of the variable of macro to access"
msgstr "the name of the variable of macro to access"

#: ../../api.rst:365
msgid "Configuration"
msgstr "Configuration"

#: flask.Config:1 of
msgid ""
"Works exactly like a dict but provides ways to fill it from files or "
"special dictionaries.  There are two common patterns to populate the "
"config."
msgstr ""

#: flask.Config:5 of
msgid "Either you can fill the config from a config file::"
msgstr "Either you can fill the config from a config file::"

#: flask.Config:9 of
msgid ""
"Or alternatively you can define the configuration options in the module "
"that calls :meth:`from_object` or provide an import path to a module that"
" should be loaded.  It is also possible to tell it to use the same module"
" and with that provide the configuration values just before the call::"
msgstr ""

#: flask.Config:19 of
msgid ""
"In both cases (loading from any Python file or loading from modules), "
"only uppercase keys are added to the config.  This makes it possible to "
"use lowercase values in the config file for temporary values that are not"
" added to the config or to define the config keys in the same file that "
"implements the application."
msgstr ""

#: flask.Config:25 of
msgid ""
"Probably the most interesting way to load configurations is from an "
"environment variable pointing to a file::"
msgstr "Probably the most interesting way to load configurations is from an environment variable pointing to a file::"

#: flask.Config:30 of
msgid ""
"In this case before launching the application you have to set this "
"environment variable to the file you want to use.  On Linux and OS X use "
"the export statement::"
msgstr ""

#: flask.Config:36 of
msgid "On windows use `set` instead."
msgstr "On windows use `set` instead."

#: flask.Config:38 of
msgid ""
"path to which files are read relative from.  When the config object is "
"created by the application, this is the application's "
":attr:`~flask.Flask.root_path`."
msgstr ""

#: flask.Config:41 of
msgid "an optional dictionary of default values"
msgstr "an optional dictionary of default values"

#: flask.Config.from_envvar:1 of
msgid ""
"Loads a configuration from an environment variable pointing to a "
"configuration file.  This is basically just a shortcut with nicer error "
"messages for this line of code::"
msgstr ""

#: flask.Config.from_envvar:7 of
msgid "name of the environment variable"
msgstr "name of the environment variable"

#: flask.Config.from_envvar:8 flask.Config.from_json:8
#: flask.Config.from_pyfile:8 of
msgid "set to ``True`` if you want silent failure for missing files."
msgstr "set to ``True`` if you want silent failure for missing files."

#: flask.Config.from_envvar:10 of
msgid "bool. ``True`` if able to load config, ``False`` otherwise."
msgstr "bool. ``True`` if able to load config, ``False`` otherwise."

#: flask.Config.from_json:1 of
msgid ""
"Updates the values in the config from a JSON file. This function behaves "
"as if the JSON object was a dictionary and passed to the "
":meth:`from_mapping` function."
msgstr ""

#: flask.Config.from_json:5 of
msgid ""
"the filename of the JSON file.  This can either be an absolute filename "
"or a filename relative to the root path."
msgstr "the filename of the JSON file.  This can either be an absolute filename or a filename relative to the root path."

#: flask.Config.from_mapping:1 of
msgid "Updates the config like :meth:`update` ignoring items with non-upper keys."
msgstr "Updates the config like :meth:`update` ignoring items with non-upper keys."

#: flask.Config.from_object:1 of
msgid ""
"Updates the values from the given object.  An object can be of one of the"
" following two types:"
msgstr "Updates the values from the given object.  An object can be of one of the following two types:"

#: flask.Config.from_object:4 of
msgid "a string: in this case the object with that name will be imported"
msgstr "a string: in this case the object with that name will be imported"

#: flask.Config.from_object:5 of
msgid "an actual object reference: that object is used directly"
msgstr "an actual object reference: that object is used directly"

#: flask.Config.from_object:7 of
msgid ""
"Objects are usually either modules or classes. :meth:`from_object` loads "
"only the uppercase attributes of the module/class. A ``dict`` object will"
" not work with :meth:`from_object` because the keys of a ``dict`` are not"
" attributes of the ``dict`` class."
msgstr ""

#: flask.Config.from_object:12 of
msgid "Example of module-based configuration::"
msgstr "Example of module-based configuration::"

#: flask.Config.from_object:18 of
msgid ""
"Nothing is done to the object before loading. If the object is a class "
"and has ``@property`` attributes, it needs to be instantiated before "
"being passed to this method."
msgstr ""

#: flask.Config.from_object:22 of
msgid ""
"You should not use this function to load the actual configuration but "
"rather configuration defaults.  The actual config should be loaded with "
":meth:`from_pyfile` and ideally from a location not within the package "
"because the package might be installed system wide."
msgstr ""

#: flask.Config.from_object:27 of
msgid ""
"See :ref:`config-dev-prod` for an example of class-based configuration "
"using :meth:`from_object`."
msgstr "See :ref:`config-dev-prod` for an example of class-based configuration using :meth:`from_object`."

#: flask.Config.from_object:30 of
msgid "an import name or object"
msgstr "an import name or object"

#: flask.Config.from_pyfile:1 of
msgid ""
"Updates the values in the config from a Python file.  This function "
"behaves as if the file was imported as module with the "
":meth:`from_object` function."
msgstr ""

#: flask.Config.from_pyfile:5 of
msgid ""
"the filename of the config.  This can either be an absolute filename or a"
" filename relative to the root path."
msgstr "the filename of the config.  This can either be an absolute filename or a filename relative to the root path."

#: flask.Config.from_pyfile:11 of
msgid "`silent` parameter."
msgstr "`silent` parameter."

#: flask.Config.get_namespace:1 of
msgid ""
"Returns a dictionary containing a subset of configuration options that "
"match the specified namespace/prefix. Example usage::"
msgstr "Returns a dictionary containing a subset of configuration options that match the specified namespace/prefix. Example usage::"

#: flask.Config.get_namespace:9 of
msgid "The resulting dictionary `image_store_config` would look like::"
msgstr "The resulting dictionary `image_store_config` would look like::"

#: flask.Config.get_namespace:17 of
msgid ""
"This is often useful when configuration options map directly to keyword "
"arguments in functions or class constructors."
msgstr "This is often useful when configuration options map directly to keyword arguments in functions or class constructors."

#: flask.Config.get_namespace:20 of
msgid "a configuration namespace"
msgstr "a configuration namespace"

#: flask.Config.get_namespace:21 of
msgid ""
"a flag indicating if the keys of the resulting dictionary should be "
"lowercase"
msgstr "a flag indicating if the keys of the resulting dictionary should be lowercase"

#: flask.Config.get_namespace:23 of
msgid ""
"a flag indicating if the keys of the resulting dictionary should not "
"include the namespace"
msgstr "a flag indicating if the keys of the resulting dictionary should not include the namespace"

#: ../../api.rst:372
msgid "Stream Helpers"
msgstr "Stream Helpers"

#: flask.stream_with_context:1 of
msgid ""
"Request contexts disappear when the response is started on the server. "
"This is done for efficiency reasons and to make it less likely to "
"encounter memory leaks with badly written WSGI middlewares.  The downside"
" is that if you are using streamed responses, the generator cannot access"
" request bound information any more."
msgstr ""

#: flask.stream_with_context:7 of
msgid "This function however can help you keep the context around for longer::"
msgstr "This function however can help you keep the context around for longer::"

#: flask.stream_with_context:20 of
msgid "Alternatively it can also be used around a specific generator::"
msgstr "Alternatively it can also be used around a specific generator::"

#: ../../api.rst:377
msgid "Useful Internals"
msgstr "Useful Internals"

#: flask.ctx.RequestContext:1 of
msgid ""
"The request context contains all request relevant information.  It is "
"created at the beginning of the request and pushed to the "
"`_request_ctx_stack` and removed at the end of it.  It will create the "
"URL adapter and request object for the WSGI environment provided."
msgstr ""

#: flask.ctx.RequestContext:6 of
msgid ""
"Do not attempt to use this class directly, instead use "
":meth:`~flask.Flask.test_request_context` and "
":meth:`~flask.Flask.request_context` to create this object."
msgstr ""

#: flask.ctx.RequestContext:10 of
msgid ""
"When the request context is popped, it will evaluate all the functions "
"registered on the application for teardown execution "
"(:meth:`~flask.Flask.teardown_request`)."
msgstr ""

#: flask.ctx.RequestContext:14 of
msgid ""
"The request context is automatically popped at the end of the request for"
" you.  In debug mode the request context is kept around if exceptions "
"happen so that interactive debuggers have a chance to introspect the "
"data.  With 0.4 this can also be forced for requests that did not fail "
"and outside of ``DEBUG`` mode.  By setting ``'flask._preserve_context'`` "
"to ``True`` on the WSGI environment the context will not pop itself at "
"the end of the request.  This is used by the "
":meth:`~flask.Flask.test_client` for example to implement the deferred "
"cleanup functionality."
msgstr ""

#: flask.ctx.RequestContext:24 of
msgid ""
"You might find this helpful for unittests where you need the information "
"from the context local around for a little longer.  Make sure to properly"
" :meth:`~werkzeug.LocalStack.pop` the stack yourself in that situation, "
"otherwise your unittests will leak memory."
msgstr ""

#: flask.ctx.RequestContext.copy:1 of
msgid ""
"Creates a copy of this request context with the same request object. This"
" can be used to move a request context to a different greenlet. Because "
"the actual request object is the same this cannot be used to move a "
"request context to a different thread unless access to the request object"
" is locked."
msgstr ""

#: flask.ctx.RequestContext.copy:9 of
msgid ""
"The current session object is used instead of reloading the original "
"data. This prevents `flask.session` pointing to an out-of-date object."
msgstr "The current session object is used instead of reloading the original data. This prevents `flask.session` pointing to an out-of-date object."

#: flask.ctx.RequestContext.match_request:1 of
msgid "Can be overridden by a subclass to hook into the matching of the request."
msgstr "Can be overridden by a subclass to hook into the matching of the request."

#: flask.ctx.RequestContext.pop:1 of
msgid ""
"Pops the request context and unbinds it by doing that.  This will also "
"trigger the execution of functions registered by the "
":meth:`~flask.Flask.teardown_request` decorator."
msgstr ""

#: flask.ctx.RequestContext.pop:5 of
msgid "Added the `exc` argument."
msgstr "Added the `exc` argument."

#: flask.ctx.RequestContext.push:1 of
msgid "Binds the request context to the current context."
msgstr "Binds the request context to the current context."

#: ../../api.rst:384
msgid ""
"The internal :class:`~werkzeug.local.LocalStack` that holds "
":class:`~flask.ctx.RequestContext` instances. Typically, the "
":data:`request` and :data:`session` proxies should be accessed instead of"
" the stack. It may be useful to access the stack in extension code."
msgstr ""

#: ../../api.rst:390
msgid "The following attributes are always present on each layer of the stack:"
msgstr "The following attributes are always present on each layer of the stack:"

#: ../../api.rst:394
msgid "`app`"
msgstr "`app`"

#: ../../api.rst:394
msgid "the active Flask application."
msgstr "the active Flask application."

#: ../../api.rst:397
msgid "`url_adapter`"
msgstr "`url_adapter`"

#: ../../api.rst:397
msgid "the URL adapter that was used to match the request."
msgstr "the URL adapter that was used to match the request."

#: ../../api.rst:400
msgid "`request`"
msgstr "`request`"

#: ../../api.rst:400
msgid "the current request object."
msgstr "the current request object."

#: ../../api.rst:403
msgid "`session`"
msgstr "`session`"

#: ../../api.rst:403
msgid "the active session object."
msgstr "the active session object."

#: ../../api.rst:406
msgid "`g`"
msgstr "`g`"

#: ../../api.rst:406
msgid "an object with all the attributes of the :data:`flask.g` object."
msgstr "an object with all the attributes of the :data:`flask.g` object."

#: ../../api.rst:409
msgid "`flashes`"
msgstr "`flashes`"

#: ../../api.rst:409
msgid "an internal cache for the flashed messages."
msgstr "an internal cache for the flashed messages."

#: flask.ctx.AppContext:1 of
msgid ""
"The application context binds an application object implicitly to the "
"current thread or greenlet, similar to how the :class:`RequestContext` "
"binds request information.  The application context is also implicitly "
"created if a request context is created but the application is not on top"
" of the individual application context."
msgstr ""

#: flask.ctx.AppContext.pop:1 of
msgid "Pops the app context."
msgstr "Pops the app context."

#: flask.ctx.AppContext.push:1 of
msgid "Binds the app context to the current context."
msgstr "Binds the app context to the current context."

#: ../../api.rst:425
msgid ""
"The internal :class:`~werkzeug.local.LocalStack` that holds "
":class:`~flask.ctx.AppContext` instances. Typically, the "
":data:`current_app` and :data:`g` proxies should be accessed instead of "
"the stack. Extensions can access the contexts on the stack as a namespace"
" to store data."
msgstr ""

#: flask.blueprints.BlueprintSetupState:1 of
msgid ""
"Temporary holder object for registering a blueprint with the application."
"  An instance of this class is created by the "
":meth:`~flask.Blueprint.make_setup_state` method and later passed to all "
"register callback functions."
msgstr ""

#: flask.blueprints.BlueprintSetupState.add_url_rule:1 of
msgid ""
"A helper method to register a rule (and optionally a view function) to "
"the application.  The endpoint is automatically prefixed with the "
"blueprint's name."
msgstr ""

#: flask.blueprints.BlueprintSetupState.app:1 of
msgid "a reference to the current application"
msgstr "a reference to the current application"

#: flask.blueprints.BlueprintSetupState.blueprint:1 of
msgid "a reference to the blueprint that created this setup state."
msgstr "a reference to the blueprint that created this setup state."

#: flask.blueprints.BlueprintSetupState.first_registration:1 of
msgid ""
"as blueprints can be registered multiple times with the application and "
"not everything wants to be registered multiple times on it, this "
"attribute can be used to figure out if the blueprint was registered in "
"the past already."
msgstr ""

#: flask.blueprints.BlueprintSetupState.options:1 of
msgid ""
"a dictionary with all options that were passed to the "
":meth:`~flask.Flask.register_blueprint` method."
msgstr "a dictionary with all options that were passed to the :meth:`~flask.Flask.register_blueprint` method."

#: flask.blueprints.BlueprintSetupState.subdomain:1 of
msgid "The subdomain that the blueprint should be active for, ``None`` otherwise."
msgstr "The subdomain that the blueprint should be active for, ``None`` otherwise."

#: flask.blueprints.BlueprintSetupState.url_defaults:1 of
msgid ""
"A dictionary with URL defaults that is added to each and every URL that "
"was defined with the blueprint."
msgstr "A dictionary with URL defaults that is added to each and every URL that was defined with the blueprint."

#: flask.blueprints.BlueprintSetupState.url_prefix:1 of
msgid "The prefix that should be used for all URLs defined on the blueprint."
msgstr "The prefix that should be used for all URLs defined on the blueprint."

#: ../../api.rst:439
msgid "Signals"
msgstr "Signals"

#: ../../api.rst:445
msgid ""
"``True`` if the signaling system is available.  This is the case when "
"`blinker`_ is installed."
msgstr "``True`` if the signaling system is available.  This is the case when `blinker`_ is installed."

#: ../../api.rst:448
msgid "The following signals exist in Flask:"
msgstr "The following signals exist in Flask:"

#: ../../api.rst:452
msgid ""
"This signal is sent when a template was successfully rendered.  The "
"signal is invoked with the instance of the template as `template` and the"
" context as dictionary (named `context`)."
msgstr ""

#: ../../api.rst:456 ../../api.rst:473 ../../api.rst:490 ../../api.rst:503
#: ../../api.rst:519 ../../api.rst:534 ../../api.rst:553 ../../api.rst:608
msgid "Example subscriber::"
msgstr "Example subscriber::"

#: ../../api.rst:469
msgid ""
"This signal is sent before template rendering process. The signal is "
"invoked with the instance of the template as `template` and the context "
"as dictionary (named `context`)."
msgstr ""

#: ../../api.rst:485
msgid ""
"This signal is sent when the request context is set up, before any "
"request processing happens.  Because the request context is already "
"bound, the subscriber can access the request with the standard global "
"proxies such as :class:`~flask.request`."
msgstr ""

#: ../../api.rst:500
msgid ""
"This signal is sent right before the response is sent to the client. It "
"is passed the response to be sent named `response`."
msgstr "This signal is sent right before the response is sent to the client. It is passed the response to be sent named `response`."

#: ../../api.rst:514
msgid ""
"This signal is sent when an exception happens during request processing. "
"It is sent *before* the standard exception handling kicks in and even in "
"debug mode, where no exception handling happens.  The exception itself is"
" passed to the subscriber as `exception`."
msgstr ""

#: ../../api.rst:529
msgid ""
"This signal is sent when the request is tearing down.  This is always "
"called, even if an exception is caused.  Currently functions listening to"
" this signal are called after the regular teardown handlers, but this is "
"not something you can rely on."
msgstr ""

#: ../../api.rst:542
msgid ""
"As of Flask 0.9, this will also be passed an `exc` keyword argument that "
"has a reference to the exception that caused the teardown if there was "
"one."
msgstr ""

#: ../../api.rst:548
msgid ""
"This signal is sent when the app context is tearing down.  This is always"
" called, even if an exception is caused.  Currently functions listening "
"to this signal are called after the regular teardown handlers, but this "
"is not something you can rely on."
msgstr ""

#: ../../api.rst:561
msgid ""
"This will also be passed an `exc` keyword argument that has a reference "
"to the exception that caused the teardown if there was one."
msgstr "This will also be passed an `exc` keyword argument that has a reference to the exception that caused the teardown if there was one."

#: ../../api.rst:566
msgid ""
"This signal is sent when an application context is pushed.  The sender is"
" the application.  This is usually useful for unittests in order to "
"temporarily hook in information.  For instance it can be used to set a "
"resource early onto the `g` object."
msgstr ""

#: ../../api.rst:583
msgid "And in the testcode::"
msgstr "And in the testcode::"

#: ../../api.rst:595
msgid ""
"This signal is sent when an application context is popped.  The sender is"
" the application.  This usually falls in line with the "
":data:`appcontext_tearing_down` signal."
msgstr ""

#: ../../api.rst:604
msgid ""
"This signal is sent when the application is flashing a message.  The "
"messages is sent as `message` keyword argument and the category as "
"`category`."
msgstr ""

#: ../../api.rst:621
msgid ""
"An alias for :class:`blinker.base.Namespace` if blinker is available, "
"otherwise a dummy class that creates fake signals.  This class is "
"available for Flask extensions that want to provide the same fallback "
"system as Flask itself."
msgstr ""

#: ../../api.rst:628
msgid ""
"Creates a new signal for this namespace if blinker is available, "
"otherwise returns a fake signal that has a send method that will do "
"nothing but will fail with a :exc:`RuntimeError` for all other "
"operations, including connecting."
msgstr ""

#: ../../api.rst:639
msgid "Class-Based Views"
msgstr "Class-Based Views"

#: flask.views.View:1 of
msgid ""
"Alternative way to use view functions.  A subclass has to implement "
":meth:`dispatch_request` which is called with the view arguments from the"
" URL routing system.  If :attr:`methods` is provided the methods do not "
"have to be passed to the :meth:`~flask.Flask.add_url_rule` method "
"explicitly::"
msgstr ""

#: flask.views.View:15 of
msgid ""
"When you want to decorate a pluggable view you will have to either do "
"that when the view function is created (by wrapping the return value of "
":meth:`as_view`) or you can use the :attr:`decorators` attribute::"
msgstr ""

#: flask.views.View:26 of
msgid ""
"The decorators stored in the decorators list are applied one after "
"another when the view function is created.  Note that you can *not* use "
"the class based decorators since those would decorate the view class and "
"not the generated view function!"
msgstr ""

#: flask.views.View.as_view:1 of
msgid ""
"Converts the class into an actual view function that can be used with the"
" routing system.  Internally this generates a function on the fly which "
"will instantiate the :class:`View` on each request and call the "
":meth:`dispatch_request` method on it."
msgstr ""

#: flask.views.View.as_view:6 of
msgid ""
"The arguments passed to :meth:`as_view` are forwarded to the constructor "
"of the class."
msgstr "The arguments passed to :meth:`as_view` are forwarded to the constructor of the class."

#: flask.views.View.decorators:1 of
msgid ""
"The canonical way to decorate class-based views is to decorate the return"
" value of as_view().  However since this moves parts of the logic from "
"the class declaration to the place where it's hooked into the routing "
"system."
msgstr ""

#: flask.views.View.decorators:6 of
msgid ""
"You can place one or more decorators in this list and whenever the view "
"function is created the result is automatically decorated."
msgstr "You can place one or more decorators in this list and whenever the view function is created the result is automatically decorated."

#: flask.views.MethodView.dispatch_request:1
#: flask.views.View.dispatch_request:1 of
msgid ""
"Subclasses have to override this method to implement the actual view "
"function code.  This method is called with all the arguments from the URL"
" rule."
msgstr ""

#: flask.views.View.methods:1 of
msgid "A list of methods this view can handle."
msgstr "A list of methods this view can handle."

#: flask.views.View.provide_automatic_options:1 of
msgid "Setting this disables or force-enables the automatic options handling."
msgstr "Setting this disables or force-enables the automatic options handling."

#: flask.views.MethodView:1 of
msgid ""
"A class-based view that dispatches request methods to the corresponding "
"class methods. For example, if you implement a ``get`` method, it will be"
" used to handle ``GET`` requests. ::"
msgstr ""

#: ../../api.rst:654
msgid "URL Route Registrations"
msgstr "URL Route Registrations"

#: ../../api.rst:656
msgid "Generally there are three ways to define rules for the routing system:"
msgstr "Generally there are three ways to define rules for the routing system:"

#: ../../api.rst:658
msgid "You can use the :meth:`flask.Flask.route` decorator."
msgstr "You can use the :meth:`flask.Flask.route` decorator."

#: ../../api.rst:659
msgid "You can use the :meth:`flask.Flask.add_url_rule` function."
msgstr "You can use the :meth:`flask.Flask.add_url_rule` function."

#: ../../api.rst:660
msgid ""
"You can directly access the underlying Werkzeug routing system which is "
"exposed as :attr:`flask.Flask.url_map`."
msgstr "You can directly access the underlying Werkzeug routing system which is exposed as :attr:`flask.Flask.url_map`."

#: ../../api.rst:663
msgid ""
"Variable parts in the route can be specified with angular brackets "
"(``/user/<username>``).  By default a variable part in the URL accepts "
"any string without a slash however a different converter can be specified"
" as well by using ``<converter:name>``."
msgstr ""

#: ../../api.rst:668
msgid "Variable parts are passed to the view function as keyword arguments."
msgstr "Variable parts are passed to the view function as keyword arguments."

#: ../../api.rst:670
msgid "The following converters are available:"
msgstr "The following converters are available:"

#: ../../api.rst:673
msgid "`string`"
msgstr "`string`"

#: ../../api.rst:673
msgid "accepts any text without a slash (the default)"
msgstr "accepts any text without a slash (the default)"

#: ../../api.rst:674
msgid "`int`"
msgstr "`int`"

#: ../../api.rst:674
msgid "accepts integers"
msgstr "accepts integers"

#: ../../api.rst:675
msgid "`float`"
msgstr "`float`"

#: ../../api.rst:675
msgid "like `int` but for floating point values"
msgstr "like `int` but for floating point values"

#: ../../api.rst:676
msgid "like the default but also accepts slashes"
msgstr "like the default but also accepts slashes"

#: ../../api.rst:677
msgid "`any`"
msgstr "`any`"

#: ../../api.rst:677
msgid "matches one of the items provided"
msgstr "matches one of the items provided"

#: ../../api.rst:678
msgid "`uuid`"
msgstr "`uuid`"

#: ../../api.rst:678
msgid "accepts UUID strings"
msgstr "accepts UUID strings"

#: ../../api.rst:681
msgid "Custom converters can be defined using :attr:`flask.Flask.url_map`."
msgstr "Custom converters can be defined using :attr:`flask.Flask.url_map`."

#: ../../api.rst:683
msgid "Here are some examples::"
msgstr "Here are some examples::"

#: ../../api.rst:697
msgid ""
"An important detail to keep in mind is how Flask deals with trailing "
"slashes.  The idea is to keep each URL unique so the following rules "
"apply:"
msgstr ""

#: ../../api.rst:701
msgid ""
"If a rule ends with a slash and is requested without a slash by the user,"
" the user is automatically redirected to the same page with a trailing "
"slash attached."
msgstr ""

#: ../../api.rst:704
msgid ""
"If a rule does not end with a trailing slash and the user requests the "
"page with a trailing slash, a 404 not found is raised."
msgstr "If a rule does not end with a trailing slash and the user requests the page with a trailing slash, a 404 not found is raised."

#: ../../api.rst:707
msgid ""
"This is consistent with how web servers deal with static files.  This "
"also makes it possible to use relative link targets safely."
msgstr "This is consistent with how web servers deal with static files.  This also makes it possible to use relative link targets safely."

#: ../../api.rst:710
msgid ""
"You can also define multiple rules for the same function.  They have to "
"be unique however.  Defaults can also be specified.  Here for example is "
"a definition for a URL that accepts an optional page::"
msgstr ""

#: ../../api.rst:719
msgid ""
"This specifies that ``/users/`` will be the URL for page one and "
"``/users/page/N`` will be the URL for page ``N``."
msgstr "This specifies that ``/users/`` will be the URL for page one and ``/users/page/N`` will be the URL for page ``N``."

#: ../../api.rst:722
msgid ""
"If a URL contains a default value, it will be redirected to its simpler "
"form with a 301 redirect. In the above example, ``/users/page/1`` will be"
" redirected to ``/users/``. If your route handles ``GET`` and ``POST`` "
"requests, make sure the default route only handles ``GET``, as redirects "
"can't preserve form data. ::"
msgstr ""

#: ../../api.rst:733
msgid ""
"Here are the parameters that :meth:`~flask.Flask.route` and "
":meth:`~flask.Flask.add_url_rule` accept.  The only difference is that "
"with the route parameter the view function is defined with the decorator "
"instead of the `view_func` parameter."
msgstr ""

#: ../../api.rst:739
msgid "`rule`"
msgstr "`rule`"

#: ../../api.rst:740
msgid "`endpoint`"
msgstr "`endpoint`"

#: ../../api.rst:740
msgid ""
"the endpoint for the registered URL rule.  Flask itself assumes that the "
"name of the view function is the name of the endpoint if not explicitly "
"stated."
msgstr ""

#: ../../api.rst:743
msgid "`view_func`"
msgstr "`view_func`"

#: ../../api.rst:743
msgid ""
"the function to call when serving a request to the provided endpoint.  If"
" this is not provided one can specify the function later by storing it in"
" the :attr:`~flask.Flask.view_functions` dictionary with the endpoint as "
"key."
msgstr ""

#: ../../api.rst:748
msgid "`defaults`"
msgstr "`defaults`"

#: ../../api.rst:748
msgid ""
"A dictionary with defaults for this rule.  See the example above for how "
"defaults work."
msgstr "A dictionary with defaults for this rule.  See the example above for how defaults work."

#: ../../api.rst:750
msgid "`subdomain`"
msgstr "`subdomain`"

#: ../../api.rst:750
msgid ""
"specifies the rule for the subdomain in case subdomain matching is in "
"use.  If not specified the default subdomain is assumed."
msgstr "specifies the rule for the subdomain in case subdomain matching is in use.  If not specified the default subdomain is assumed."

#: ../../api.rst:753
msgid "`**options`"
msgstr "`**options`"

#: ../../api.rst:753
msgid ""
"the options to be forwarded to the underlying "
":class:`~werkzeug.routing.Rule` object.  A change to Werkzeug is handling"
" of method options.  methods is a list of methods this rule should be "
"limited to (``GET``, ``POST`` etc.).  By default a rule just listens for "
"``GET`` (and implicitly ``HEAD``).  Starting with Flask 0.6, ``OPTIONS`` "
"is implicitly added and handled by the standard request handling.  They "
"have to be specified as keyword arguments."
msgstr ""

#: ../../api.rst:766
msgid "View Function Options"
msgstr "View Function Options"

#: ../../api.rst:768
msgid ""
"For internal usage the view functions can have some attributes attached "
"to customize behavior the view function would normally not have control "
"over. The following attributes can be provided optionally to either "
"override some defaults to :meth:`~flask.Flask.add_url_rule` or general "
"behavior:"
msgstr ""

#: ../../api.rst:773
msgid ""
"`__name__`: The name of a function is by default used as endpoint.  If "
"endpoint is provided explicitly this value is used.  Additionally this "
"will be prefixed with the name of the blueprint by default which cannot "
"be customized from the function itself."
msgstr ""

#: ../../api.rst:778
msgid ""
"`methods`: If methods are not provided when the URL rule is added, Flask "
"will look on the view function object itself if a `methods` attribute "
"exists.  If it does, it will pull the information for the methods from "
"there."
msgstr ""

#: ../../api.rst:783
msgid ""
"`provide_automatic_options`: if this attribute is set Flask will either "
"force enable or disable the automatic implementation of the HTTP "
"``OPTIONS`` response.  This can be useful when working with decorators "
"that want to customize the ``OPTIONS`` response on a per-view basis."
msgstr ""

#: ../../api.rst:789
msgid ""
"`required_methods`: if this attribute is set, Flask will always add these"
" methods when registering a URL rule even if the methods were explicitly "
"overridden in the ``route()`` call."
msgstr ""

#: ../../api.rst:793
msgid "Full example::"
msgstr "Full example::"

#: ../../api.rst:805
msgid "The `provide_automatic_options` functionality was added."
msgstr "The `provide_automatic_options` functionality was added."

#: ../../api.rst:809
msgid "Command Line Interface"
msgstr "Command Line Interface"

#: flask.cli.FlaskGroup:1 of
msgid ""
"Special subclass of the :class:`AppGroup` group that supports loading "
"more commands from the configured Flask app.  Normally a developer does "
"not have to interface with this class but there are some very advanced "
"use cases for which it makes sense to create an instance of this."
msgstr ""

#: flask.cli.FlaskGroup:7 of
msgid "For information as of why this is useful see :ref:`custom-scripts`."
msgstr "For information as of why this is useful see :ref:`custom-scripts`."

#: flask.cli.FlaskGroup:9 of
msgid "if this is True then the default run and shell commands wil be added."
msgstr "if this is True then the default run and shell commands wil be added."

#: flask.cli.FlaskGroup:11 of
msgid "adds the ``--version`` option."
msgstr "adds the ``--version`` option."

#: flask.cli.FlaskGroup:12 of
msgid ""
"an optional callback that is passed the script info and returns the "
"loaded app."
msgstr "an optional callback that is passed the script info and returns the loaded app."

#: flask.cli.FlaskGroup:17 of
msgid "Set the app's debug flag based on the active environment"
msgstr "Set the app's debug flag based on the active environment"

#: flask.cli.FlaskGroup.get_command:1 of
msgid ""
"Given a context and a command name, this returns a :class:`Command` "
"object if it exists or returns `None`."
msgstr "Given a context and a command name, this returns a :class:`Command` object if it exists or returns `None`."

#: flask.cli.FlaskGroup.list_commands:1 of
msgid "Returns a list of subcommand names in the order they should appear."
msgstr "Returns a list of subcommand names in the order they should appear."

#: flask.cli.FlaskGroup.main:1 of
msgid ""
"This is the way to invoke a script with all the bells and whistles as a "
"command line application.  This will always terminate the application "
"after a call.  If this is not wanted, ``SystemExit`` needs to be caught."
msgstr ""

#: flask.cli.FlaskGroup.main:6 of
msgid ""
"This method is also available by directly calling the instance of a "
":class:`Command`."
msgstr "This method is also available by directly calling the instance of a :class:`Command`."

#: flask.cli.FlaskGroup.main:9 of
msgid "Added the `standalone_mode` flag to control the standalone mode."
msgstr "Added the `standalone_mode` flag to control the standalone mode."

#: flask.cli.FlaskGroup.main:12 of
msgid ""
"the arguments that should be used for parsing.  If not provided, "
"``sys.argv[1:]`` is used."
msgstr "the arguments that should be used for parsing.  If not provided, ``sys.argv[1:]`` is used."

#: flask.cli.FlaskGroup.main:14 of
msgid ""
"the program name that should be used.  By default the program name is "
"constructed by taking the file name from ``sys.argv[0]``."
msgstr "the program name that should be used.  By default the program name is constructed by taking the file name from ``sys.argv[0]``."

#: flask.cli.FlaskGroup.main:17 of
msgid ""
"the environment variable that controls the bash completion support.  The "
"default is ``\"_<prog_name>_COMPLETE\"`` with prog_name in uppercase."
msgstr "the environment variable that controls the bash completion support.  The default is ``\"_<prog_name>_COMPLETE\"`` with prog_name in uppercase."

#: flask.cli.FlaskGroup.main:21 of
msgid ""
"the default behavior is to invoke the script in standalone mode.  Click "
"will then handle exceptions and convert them into error messages and the "
"function will never return but shut down the interpreter.  If this is set"
" to `False` they will be propagated to the caller and the return value of"
" this function is the return value of :meth:`invoke`."
msgstr ""

#: flask.cli.FlaskGroup.main:30 of
msgid ""
"extra keyword arguments are forwarded to the context constructor.  See "
":class:`Context` for more information."
msgstr "extra keyword arguments are forwarded to the context constructor.  See :class:`Context` for more information."

#: flask.cli.AppGroup:1 of
msgid ""
"This works similar to a regular click :class:`~click.Group` but it "
"changes the behavior of the :meth:`command` decorator so that it "
"automatically wraps the functions in :func:`with_appcontext`."
msgstr ""

#: flask.cli.AppGroup:5 of
msgid "Not to be confused with :class:`FlaskGroup`."
msgstr "Not to be confused with :class:`FlaskGroup`."

#: flask.cli.AppGroup.command:1 of
msgid ""
"This works exactly like the method of the same name on a regular "
":class:`click.Group` but it wraps callbacks in :func:`with_appcontext` "
"unless it's disabled by passing ``with_appcontext=False``."
msgstr ""

#: flask.cli.AppGroup.group:1 of
msgid ""
"This works exactly like the method of the same name on a regular "
":class:`click.Group` but it defaults the group class to "
":class:`AppGroup`."
msgstr ""

#: flask.cli.ScriptInfo:1 of
msgid ""
"Helper object to deal with Flask applications.  This is usually not "
"necessary to interface with as it's used internally in the dispatching to"
" click.  In future versions of Flask this object will most likely play a "
"bigger role.  Typically it's created automatically by the "
":class:`FlaskGroup` but you can also manually create it and pass it "
"onwards as click object."
msgstr ""

#: flask.cli.ScriptInfo.app_import_path:1 of
msgid "Optionally the import path for the Flask application."
msgstr "Optionally the import path for the Flask application."

#: flask.cli.ScriptInfo.create_app:1 of
msgid ""
"Optionally a function that is passed the script info to create the "
"instance of the application."
msgstr "Optionally a function that is passed the script info to create the instance of the application."

#: flask.cli.ScriptInfo.data:1 of
msgid ""
"A dictionary with arbitrary data that can be associated with this script "
"info."
msgstr "A dictionary with arbitrary data that can be associated with this script info."

#: flask.cli.ScriptInfo.load_app:1 of
msgid ""
"Loads the Flask app (if not yet loaded) and returns it.  Calling this "
"multiple times will just result in the already loaded app to be returned."
msgstr "Loads the Flask app (if not yet loaded) and returns it.  Calling this multiple times will just result in the already loaded app to be returned."

#: flask.cli.load_dotenv:1 of
msgid "Load \"dotenv\" files in order of precedence to set environment variables."
msgstr "Load \"dotenv\" files in order of precedence to set environment variables."

#: flask.cli.load_dotenv:3 of
msgid ""
"If an env var is already set it is not overwritten, so earlier files in "
"the list are preferred over later files."
msgstr "If an env var is already set it is not overwritten, so earlier files in the list are preferred over later files."

#: flask.cli.load_dotenv:6 of
msgid ""
"Changes the current working directory to the location of the first file "
"found, with the assumption that it is in the top level project directory "
"and will be where the Python path should import local packages from."
msgstr ""

#: flask.cli.load_dotenv:10 of
msgid "This is a no-op if `python-dotenv`_ is not installed."
msgstr "This is a no-op if `python-dotenv`_ is not installed."

#: flask.cli.load_dotenv:14 of
msgid "Load the file at this location instead of searching."
msgstr "Load the file at this location instead of searching."

#: flask.cli.load_dotenv:15 of
msgid "``True`` if a file was loaded."
msgstr "``True`` if a file was loaded."

#: flask.cli.with_appcontext:1 of
msgid ""
"Wraps a callback so that it's guaranteed to be executed with the script's"
" application context.  If callbacks are registered directly to the "
"``app.cli`` object then they are wrapped with this function by default "
"unless it's disabled."
msgstr ""

#: ../../api.rst:828
msgid ""
"Marks a function so that an instance of :class:`ScriptInfo` is passed as "
"first argument to the click callback."
msgstr "Marks a function so that an instance of :class:`ScriptInfo` is passed as first argument to the click callback."

#: flask.cli.run_command:1 of
msgid "Run a local development server."
msgstr "Run a local development server."

#: flask.cli.run_command:3 of
msgid ""
"This server is for development purposes only. It does not provide the "
"stability, security, or performance of production WSGI servers."
msgstr "This server is for development purposes only. It does not provide the stability, security, or performance of production WSGI servers."

#: flask.cli.run_command:6 of
msgid ""
"The reloader and debugger are enabled by default if FLASK_ENV=development"
" or FLASK_DEBUG=1."
msgstr "The reloader and debugger are enabled by default if FLASK_ENV=development or FLASK_DEBUG=1."

#: flask.cli.shell_command:1 of
msgid ""
"Run an interactive Python shell in the context of a given Flask "
"application.  The application will populate the default namespace of this"
" shell according to it's configuration."
msgstr ""

#: flask.cli.shell_command:5 of
msgid ""
"This is useful for executing small snippets of management code without "
"having to manually configure the application."
msgstr "This is useful for executing small snippets of management code without having to manually configure the application."

