# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets Team
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-20 10:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../becomingbig.rst:4
msgid "Becoming Big"
msgstr "变得很大"

#: ../../becomingbig.rst:6
msgid ""
"Here are your options when growing your codebase or scaling your "
"application."
msgstr "在扩展代码库或扩展应用程序时, 您可以选择以下选项. "

#: ../../becomingbig.rst:9
msgid "Read the Source."
msgstr "阅读来源. "

#: ../../becomingbig.rst:11
msgid ""
"Flask started in part to demonstrate how to build your own framework on "
"top of existing well-used tools Werkzeug (WSGI) and Jinja (templating), "
"and as it developed, it became useful to a wide audience.  As you grow "
"your codebase, don't just use Flask -- understand it.  Read the source.  "
"Flask's code is written to be read; its documentation is published so you"
" can use its internal APIs.  Flask sticks to documented APIs in upstream "
"libraries, and documents its internal utilities so that you can find the "
"hook points needed for your project."
msgstr ""

#: ../../becomingbig.rst:21
msgid "Hook. Extend."
msgstr "钩. 延伸. "

#: ../../becomingbig.rst:23
msgid ""
"The :ref:`api` docs are full of available overrides, hook points, and "
":ref:`signals`. You can provide custom classes for things like the "
"request and response objects.  Dig deeper on the APIs you use, and look "
"for the customizations which are available out of the box in a Flask "
"release.  Look for ways in which your project can be refactored into a "
"collection of utilities and Flask extensions.  Explore the many "
"`extensions <http://flask.pocoo.org/extensions/>`_ in the community, and "
"look for patterns to build your own extensions if you do not find the "
"tools you need."
msgstr ""

#: ../../becomingbig.rst:33
msgid "Subclass."
msgstr "子类. "

#: ../../becomingbig.rst:35
msgid ""
"The :class:`~flask.Flask` class has many methods designed for "
"subclassing. You can quickly add or customize behavior by subclassing "
":class:`~flask.Flask` (see the linked method docs) and using that "
"subclass wherever you instantiate an application class. This works well "
"with :ref:`app-factories`. See :doc:`/patterns/subclassing` for an "
"example."
msgstr ""

#: ../../becomingbig.rst:41
msgid "Wrap with middleware."
msgstr "用中间件包装. "

#: ../../becomingbig.rst:43
msgid ""
"The :ref:`app-dispatch` chapter shows in detail how to apply middleware. "
"You can introduce WSGI middleware to wrap your Flask instances and "
"introduce fixes and changes at the layer between your Flask application "
"and your HTTP server. Werkzeug includes several `middlewares "
"<http://werkzeug.pocoo.org/docs/middlewares/>`_."
msgstr ""

#: ../../becomingbig.rst:50
msgid "Fork."
msgstr "叉子. "

#: ../../becomingbig.rst:52
msgid ""
"If none of the above options work, fork Flask.  The majority of code of "
"Flask is within Werkzeug and Jinja2.  These libraries do the majority of "
"the work. Flask is just the paste that glues those together.  For every "
"project there is the point where the underlying framework gets in the way"
" (due to assumptions the original developers had).  This is natural "
"because if this would not be the case, the framework would be a very "
"complex system to begin with which causes a steep learning curve and a "
"lot of user frustration."
msgstr ""

#: ../../becomingbig.rst:60
msgid ""
"This is not unique to Flask.  Many people use patched and modified "
"versions of their framework to counter shortcomings.  This idea is also "
"reflected in the license of Flask.  You don't have to contribute any "
"changes back if you decide to modify the framework."
msgstr ""

#: ../../becomingbig.rst:65
msgid ""
"The downside of forking is of course that Flask extensions will most "
"likely break because the new framework has a different import name. "
"Furthermore integrating upstream changes can be a complex process, "
"depending on the number of changes.  Because of that, forking should be "
"the very last resort."
msgstr ""

#: ../../becomingbig.rst:72
msgid "Scale like a pro."
msgstr "像专业人士一样扩展. "

#: ../../becomingbig.rst:74
msgid ""
"For many web applications the complexity of the code is less an issue "
"than the scaling for the number of users or data entries expected.  Flask"
" by itself is only limited in terms of scaling by your application code, "
"the data store you want to use and the Python implementation and "
"webserver you are running on."
msgstr ""

#: ../../becomingbig.rst:80
msgid ""
"Scaling well means for example that if you double the amount of servers "
"you get about twice the performance.  Scaling bad means that if you add a"
" new server the application won't perform any better or would not even "
"support a second server."
msgstr ""

#: ../../becomingbig.rst:85
msgid ""
"There is only one limiting factor regarding scaling in Flask which are "
"the context local proxies.  They depend on context which in Flask is "
"defined as being either a thread, process or greenlet.  If your server "
"uses some kind of concurrency that is not based on threads or greenlets, "
"Flask will no longer be able to support these global proxies.  However "
"the majority of servers are using either threads, greenlets or separate "
"processes to achieve concurrency which are all methods well supported by "
"the underlying Werkzeug library."
msgstr "关于Flask中缩放的唯一限制因素是上下文本地代理. 它们取决于Flask中被定义为线程, 进程或greenlet的上下文. 如果您的服务器使用某种不基于线程或greenlet的并发, Flask将无法再支持这些全局代理. 但是, 大多数服务器使用线程, greenlet或单独的进程来实现并发性, 这些都是底层Werkzeug库所支持的所有方法. "

#: ../../becomingbig.rst:95
msgid "Discuss with the community."
msgstr "与社区讨论. "

#: ../../becomingbig.rst:97
msgid ""
"The Flask developers keep the framework accessible to users with "
"codebases big and small. If you find an obstacle in your way, caused by "
"Flask, don't hesitate to contact the developers on the mailinglist or IRC"
" channel.  The best way for the Flask and Flask extension developers to "
"improve the tools for larger applications is getting feedback from users."
msgstr "Flask开发人员使用大小代码的用户可以访问框架. 如果您发现由Flask引起的障碍, 请不要犹豫与邮件列表或IRC频道上的开发人员联系.  Flask和Flask扩展开发人员改进大型应用程序工具的最佳方法是从用户那里获得反馈. "

