# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets Team
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-20 10:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../extensiondev.rst:4
msgid "Flask Extension Development"
msgstr "Flask 扩展开发"

#: ../../extensiondev.rst:6
msgid ""
"Flask, being a microframework, often requires some repetitive steps to "
"get a third party library working.  Because very often these steps could "
"be abstracted to support multiple projects the `Flask Extension "
"Registry`_ was created."
msgstr ""

#: ../../extensiondev.rst:11
msgid ""
"If you want to create your own Flask extension for something that does "
"not exist yet, this guide to extension development will help you get your"
" extension running in no time and to feel like users would expect your "
"extension to behave."
msgstr ""

#: ../../extensiondev.rst:19
msgid "Anatomy of an Extension"
msgstr "Anatomy of an Extension"

#: ../../extensiondev.rst:21
msgid ""
"Extensions are all located in a package called ``flask_something`` where "
"\"something\" is the name of the library you want to bridge.  So for "
"example if you plan to add support for a library named `simplexml` to "
"Flask, you would name your extension's package ``flask_simplexml``."
msgstr ""

#: ../../extensiondev.rst:26
msgid ""
"The name of the actual extension (the human readable name) however would "
"be something like \"Flask-SimpleXML\".  Make sure to include the name "
"\"Flask\" somewhere in that name and that you check the capitalization. "
"This is how users can then register dependencies to your extension in "
"their :file:`setup.py` files."
msgstr ""

#: ../../extensiondev.rst:32
msgid ""
"But what do extensions look like themselves?  An extension has to ensure "
"that it works with multiple Flask application instances at once.  This is"
" a requirement because many people will use patterns like the :ref:`app-"
"factories` pattern to create their application as needed to aid unittests"
" and to support multiple configurations.  Because of that it is crucial "
"that your application supports that kind of behavior."
msgstr ""

#: ../../extensiondev.rst:39
msgid ""
"Most importantly the extension must be shipped with a :file:`setup.py` "
"file and registered on PyPI.  Also the development checkout link should "
"work so that people can easily install the development version into their"
" virtualenv without having to download the library by hand."
msgstr ""

#: ../../extensiondev.rst:44
msgid ""
"Flask extensions must be licensed under a BSD, MIT or more liberal "
"license in order to be listed in the Flask Extension Registry.  Keep in "
"mind that the Flask Extension Registry is a moderated place and libraries"
" will be reviewed upfront if they behave as required."
msgstr ""

#: ../../extensiondev.rst:50
msgid "\"Hello Flaskext!\""
msgstr "\"Hello Flaskext!\""

#: ../../extensiondev.rst:52
msgid ""
"So let's get started with creating such a Flask extension.  The extension"
" we want to create here will provide very basic support for SQLite3."
msgstr "So let's get started with creating such a Flask extension.  The extension we want to create here will provide very basic support for SQLite3."

#: ../../extensiondev.rst:55
msgid "First we create the following folder structure::"
msgstr "First we create the following folder structure::"

#: ../../extensiondev.rst:62
msgid "Here's the contents of the most important files:"
msgstr "Here's the contents of the most important files:"

#: ../../extensiondev.rst:65
msgid "setup.py"
msgstr "setup.py"

#: ../../extensiondev.rst:67
msgid ""
"The next file that is absolutely required is the :file:`setup.py` file "
"which is used to install your Flask extension.  The following contents "
"are something you can work with::"
msgstr ""

#: ../../extensiondev.rst:110
msgid ""
"That's a lot of code but you can really just copy/paste that from "
"existing extensions and adapt."
msgstr "That's a lot of code but you can really just copy/paste that from existing extensions and adapt."

#: ../../extensiondev.rst:114
msgid "flask_sqlite3.py"
msgstr "flask_sqlite3.py"

#: ../../extensiondev.rst:116
msgid ""
"Now this is where your extension code goes.  But how exactly should such "
"an extension look like?  What are the best practices?  Continue reading "
"for some insight."
msgstr ""

#: ../../extensiondev.rst:121
msgid "Initializing Extensions"
msgstr "Initializing Extensions"

#: ../../extensiondev.rst:123
msgid ""
"Many extensions will need some kind of initialization step.  For example,"
" consider an application that's currently connecting to SQLite like the "
"documentation suggests (:ref:`sqlite3`).  So how does the extension know "
"the name of the application object?"
msgstr ""

#: ../../extensiondev.rst:128
msgid "Quite simple: you pass it to it."
msgstr "Quite simple: you pass it to it."

#: ../../extensiondev.rst:130
msgid "There are two recommended ways for an extension to initialize:"
msgstr "There are two recommended ways for an extension to initialize:"

#: ../../extensiondev.rst:132
msgid "initialization functions:"
msgstr "initialization functions:"

#: ../../extensiondev.rst:134
msgid ""
"If your extension is called `helloworld` you might have a function called"
" ``init_helloworld(app[, extra_args])`` that initializes the extension "
"for that application.  It could attach before / after handlers etc."
msgstr ""

#: ../../extensiondev.rst:139
msgid "classes:"
msgstr "classes:"

#: ../../extensiondev.rst:141
msgid ""
"Classes work mostly like initialization functions but can later be used "
"to further change the behavior.  For an example look at how the `OAuth "
"extension`_ works: there is an `OAuth` object that provides some helper "
"functions like `OAuth.remote_app` to create a reference to a remote "
"application that uses OAuth."
msgstr ""

#: ../../extensiondev.rst:147
msgid ""
"What to use depends on what you have in mind.  For the SQLite 3 extension"
" we will use the class-based approach because it will provide users with "
"an object that handles opening and closing database connections."
msgstr ""

#: ../../extensiondev.rst:151
msgid ""
"When designing your classes, it's important to make them easily reusable "
"at the module level. This means the object itself must not under any "
"circumstances store any application specific state and must be shareable "
"between different applications."
msgstr ""

#: ../../extensiondev.rst:157
msgid "The Extension Code"
msgstr "The Extension Code"

#: ../../extensiondev.rst:159
msgid "Here's the contents of the `flask_sqlite3.py` for copy/paste::"
msgstr "Here's the contents of the `flask_sqlite3.py` for copy/paste::"

#: ../../extensiondev.rst:192
msgid "So here's what these lines of code do:"
msgstr "So here's what these lines of code do:"

#: ../../extensiondev.rst:194
msgid ""
"The ``__init__`` method takes an optional app object and, if supplied, "
"will call ``init_app``."
msgstr "The ``__init__`` method takes an optional app object and, if supplied, will call ``init_app``."

#: ../../extensiondev.rst:196
msgid ""
"The ``init_app`` method exists so that the ``SQLite3`` object can be "
"instantiated without requiring an app object.  This method supports the "
"factory pattern for creating applications.  The ``init_app`` will set the"
" configuration for the database, defaulting to an in memory database if "
"no configuration is supplied.  In addition, the ``init_app`` method "
"attaches the ``teardown`` handler."
msgstr ""

#: ../../extensiondev.rst:202
msgid "Next, we define a ``connect`` method that opens a database connection."
msgstr "Next, we define a ``connect`` method that opens a database connection."

#: ../../extensiondev.rst:203
msgid ""
"Finally, we add a ``connection`` property that on first access opens the "
"database connection and stores it on the context.  This is also the "
"recommended way to handling resources: fetch resources lazily the first "
"time they are used."
msgstr ""

#: ../../extensiondev.rst:208
msgid ""
"Note here that we're attaching our database connection to the top "
"application context via ``_app_ctx_stack.top``. Extensions should use the"
" top context for storing their own information with a sufficiently "
"complex name."
msgstr ""

#: ../../extensiondev.rst:213
msgid ""
"So why did we decide on a class-based approach here?  Because using our "
"extension looks something like this::"
msgstr "So why did we decide on a class-based approach here?  Because using our extension looks something like this::"

#: ../../extensiondev.rst:223
msgid "You can then use the database from views like this::"
msgstr "You can then use the database from views like this::"

#: ../../extensiondev.rst:230
msgid ""
"Likewise if you are outside of a request you can use the database by "
"pushing an app context::"
msgstr "Likewise if you are outside of a request you can use the database by pushing an app context::"

#: ../../extensiondev.rst:237
msgid ""
"At the end of the ``with`` block the teardown handles will be executed "
"automatically."
msgstr "At the end of the ``with`` block the teardown handles will be executed automatically."

#: ../../extensiondev.rst:240
msgid ""
"Additionally, the ``init_app`` method is used to support the factory "
"pattern for creating apps::"
msgstr "Additionally, the ``init_app`` method is used to support the factory pattern for creating apps::"

#: ../../extensiondev.rst:248
msgid ""
"Keep in mind that supporting this factory pattern for creating apps is "
"required for approved flask extensions (described below)."
msgstr "Keep in mind that supporting this factory pattern for creating apps is required for approved flask extensions (described below)."

#: ../../extensiondev.rst:251
msgid "Note on ``init_app``"
msgstr "Note on ``init_app``"

#: ../../extensiondev.rst:253
msgid ""
"As you noticed, ``init_app`` does not assign ``app`` to ``self``.  This "
"is intentional!  Class based Flask extensions must only store the "
"application on the object when the application was passed to the "
"constructor.  This tells the extension: I am not interested in using "
"multiple applications."
msgstr ""

#: ../../extensiondev.rst:259
msgid ""
"When the extension needs to find the current application and it does not "
"have a reference to it, it must either use the :data:`~flask.current_app`"
" context local or change the API in a way that you can pass the "
"application explicitly."
msgstr ""

#: ../../extensiondev.rst:266
msgid "Using _app_ctx_stack"
msgstr "Using _app_ctx_stack"

#: ../../extensiondev.rst:268
msgid ""
"In the example above, before every request, a ``sqlite3_db`` variable is "
"assigned to ``_app_ctx_stack.top``.  In a view function, this variable is"
" accessible using the ``connection`` property of ``SQLite3``.  During the"
" teardown of a request, the ``sqlite3_db`` connection is closed.  By "
"using this pattern, the *same* connection to the sqlite3 database is "
"accessible to anything that needs it for the duration of the request."
msgstr ""

#: ../../extensiondev.rst:277
msgid "Learn from Others"
msgstr "Learn from Others"

#: ../../extensiondev.rst:279
msgid ""
"This documentation only touches the bare minimum for extension "
"development.  If you want to learn more, it's a very good idea to check "
"out existing extensions on the `Flask Extension Registry`_.  If you feel "
"lost there is still the `mailinglist`_ and the `IRC channel`_ to get some"
" ideas for nice looking APIs.  Especially if you do something nobody "
"before you did, it might be a very good idea to get some more input.  "
"This not only generates useful feedback on what people might want from an"
" extension, but also avoids having multiple developers working in "
"isolation on pretty much the same problem."
msgstr ""

#: ../../extensiondev.rst:289
msgid ""
"Remember: good API design is hard, so introduce your project on the "
"mailinglist, and let other developers give you a helping hand with "
"designing the API."
msgstr ""

#: ../../extensiondev.rst:293
msgid ""
"The best Flask extensions are extensions that share common idioms for the"
" API.  And this can only work if collaboration happens early."
msgstr "The best Flask extensions are extensions that share common idioms for the API.  And this can only work if collaboration happens early."

#: ../../extensiondev.rst:297
msgid "Approved Extensions"
msgstr "Approved Extensions"

#: ../../extensiondev.rst:299
msgid ""
"Flask also has the concept of approved extensions.  Approved extensions "
"are tested as part of Flask itself to ensure extensions do not break on "
"new releases.  These approved extensions are listed on the `Flask "
"Extension Registry`_ and marked appropriately.  If you want your own "
"extension to be approved you have to follow these guidelines:"
msgstr ""

#: ../../extensiondev.rst:305
msgid ""
"An approved Flask extension requires a maintainer. In the event an "
"extension author would like to move beyond the project, the project "
"should find a new maintainer including full source hosting transition and"
" PyPI access.  If no maintainer is available, give access to the Flask "
"core team."
msgstr ""

#: ../../extensiondev.rst:309
msgid ""
"An approved Flask extension must provide exactly one package or module "
"named ``flask_extensionname``."
msgstr "An approved Flask extension must provide exactly one package or module named ``flask_extensionname``."

#: ../../extensiondev.rst:311
msgid ""
"It must ship a testing suite that can either be invoked with ``make "
"test`` or ``python setup.py test``.  For test suites invoked with ``make "
"test`` the extension has to ensure that all dependencies for the test are"
" installed automatically.  If tests are invoked with ``python setup.py "
"test``, test dependencies can be specified in the :file:`setup.py` file."
"  The test suite also has to be part of the distribution."
msgstr ""

#: ../../extensiondev.rst:317
msgid ""
"APIs of approved extensions will be checked for the following "
"characteristics:"
msgstr "APIs of approved extensions will be checked for the following characteristics:"

#: ../../extensiondev.rst:320
msgid ""
"an approved extension has to support multiple applications running in the"
" same Python process."
msgstr "an approved extension has to support multiple applications running in the same Python process."

#: ../../extensiondev.rst:322
msgid "it must be possible to use the factory pattern for creating applications."
msgstr "it must be possible to use the factory pattern for creating applications."

#: ../../extensiondev.rst:325
msgid "The license must be BSD/MIT/WTFPL licensed."
msgstr "The license must be BSD/MIT/WTFPL licensed."

#: ../../extensiondev.rst:326
msgid ""
"The naming scheme for official extensions is *Flask-ExtensionName* or "
"*ExtensionName-Flask*."
msgstr "The naming scheme for official extensions is *Flask-ExtensionName* or *ExtensionName-Flask*."

#: ../../extensiondev.rst:328
msgid ""
"Approved extensions must define all their dependencies in the "
":file:`setup.py` file unless a dependency cannot be met because it is not"
" available on PyPI."
msgstr ""

#: ../../extensiondev.rst:331
msgid ""
"The documentation must use the ``flask`` theme from the `Official Pallets"
" Themes`_."
msgstr "The documentation must use the ``flask`` theme from the `Official Pallets Themes`_."

#: ../../extensiondev.rst:333
msgid ""
"The setup.py description (and thus the PyPI description) has to link to "
"the documentation, website (if there is one) and there must be a link to "
"automatically install the development version (``PackageName==dev``)."
msgstr ""

#: ../../extensiondev.rst:337
msgid ""
"The ``zip_safe`` flag in the setup script must be set to ``False``, even "
"if the extension would be safe for zipping."
msgstr "The ``zip_safe`` flag in the setup script must be set to ``False``, even if the extension would be safe for zipping."

#: ../../extensiondev.rst:339
msgid "An extension currently has to support Python 3.4 and newer and 2.7."
msgstr "An extension currently has to support Python 3.4 and newer and 2.7."

