# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets Team
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-20 10:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../config.rst:4
msgid "Configuration Handling"
msgstr "配置处理"

#: ../../config.rst:6
msgid ""
"Applications need some kind of configuration.  There are different "
"settings you might want to change depending on the application "
"environment like toggling the debug mode, setting the secret key, and "
"other such environment-specific things."
msgstr ""

#: ../../config.rst:11
msgid ""
"The way Flask is designed usually requires the configuration to be "
"available when the application starts up.  You can hardcode the "
"configuration in the code, which for many small applications is not "
"actually that bad, but there are better ways."
msgstr ""

#: ../../config.rst:16
msgid ""
"Independent of how you load your config, there is a config object "
"available which holds the loaded configuration values: The "
":attr:`~flask.Flask.config` attribute of the :class:`~flask.Flask` "
"object.  This is the place where Flask itself puts certain configuration "
"values and also where extensions can put their configuration values.  But"
" this is also where you can have your own configuration."
msgstr ""

#: ../../config.rst:25
msgid "Configuration Basics"
msgstr "配置基础知识"

#: ../../config.rst:27
msgid ""
"The :attr:`~flask.Flask.config` is actually a subclass of a dictionary "
"and can be modified just like any dictionary::"
msgstr "The :attr:`~flask.Flask.config` is actually a subclass of a dictionary and can be modified just like any dictionary::"

#: ../../config.rst:33
msgid ""
"Certain configuration values are also forwarded to the "
":attr:`~flask.Flask` object so you can read and write them from there::"
msgstr "某些配置值也会转发到:attr:`~flask.Flask`对象, 以便您可以从那里读取和写入它们::"

#: ../../config.rst:38
msgid ""
"To update multiple keys at once you can use the :meth:`dict.update` "
"method::"
msgstr "To update multiple keys at once you can use the :meth:`dict.update` method::"

#: ../../config.rst:48
msgid "Environment and Debug Features"
msgstr "环境和调试功能"

#: ../../config.rst:50
msgid ""
"The :data:`ENV` and :data:`DEBUG` config values are special because they "
"may behave inconsistently if changed after the app has begun setting up. "
"In order to set the environment and debug mode reliably, Flask uses "
"environment variables."
msgstr ""

#: ../../config.rst:55
msgid ""
"The environment is used to indicate to Flask, extensions, and other "
"programs, like Sentry, what context Flask is running in. It is controlled"
" with the :envvar:`FLASK_ENV` environment variable and defaults to "
"``production``."
msgstr ""

#: ../../config.rst:60
msgid ""
"Setting :envvar:`FLASK_ENV` to ``development`` will enable debug mode. "
"``flask run`` will use the interactive debugger and reloader by default "
"in debug mode. To control this separately from the environment, use the "
":envvar:`FLASK_DEBUG` flag."
msgstr ""

#: ../../config.rst:65
msgid ""
"Added :envvar:`FLASK_ENV` to control the environment separately from "
"debug mode. The development environment enables debug mode."
msgstr "补充:envvar:`FLASK_ENV`与调试模式分开控制环境. 开发环境启用调试模式. "

#: ../../config.rst:69
msgid ""
"To switch Flask to the development environment and enable debug mode, set"
" :envvar:`FLASK_ENV`::"
msgstr "要将Flask切换到开发环境并启用调试模式, 请设置:envvar:`FLASK_ENV` ::"

#: ../../config.rst:75
msgid "(On Windows, use ``set`` instead of ``export``.)"
msgstr "(On Windows, use ``set`` instead of ``export``.)"

#: ../../config.rst:77
msgid ""
"Using the environment variables as described above is recommended. While "
"it is possible to set :data:`ENV` and :data:`DEBUG` in your config or "
"code, this is strongly discouraged. They can't be read early by the "
"``flask`` command, and some systems or extensions may have already "
"configured themselves based on a previous value."
msgstr ""

#: ../../config.rst:85
msgid "Builtin Configuration Values"
msgstr "内置配置值"

#: ../../config.rst:87
msgid "The following configuration values are used internally by Flask:"
msgstr "Flask内部使用以下配置值:"

#: ../../config.rst:91
msgid ""
"What environment the app is running in. Flask and extensions may enable "
"behaviors based on the environment, such as enabling debug mode. The "
":attr:`~flask.Flask.env` attribute maps to this config key. This is set "
"by the :envvar:`FLASK_ENV` environment variable and may not behave as "
"expected if set in code."
msgstr ""

#: ../../config.rst:97
msgid "**Do not enable development when deploying in production.**"
msgstr "**在生产中部署时不要启用开发. **"

#: ../../config.rst:99
msgid "Default: ``'production'``"
msgstr "默认: ``'production'``"

#: ../../config.rst:105
msgid ""
"Whether debug mode is enabled. When using ``flask run`` to start the "
"development server, an interactive debugger will be shown for unhandled "
"exceptions, and the server will be reloaded when code changes. The "
":attr:`~flask.Flask.debug` attribute maps to this config key. This is "
"enabled when :data:`ENV` is ``'development'`` and is overridden by the "
"``FLASK_DEBUG`` environment variable. It may not behave as expected if "
"set in code."
msgstr ""

#: ../../config.rst:113
msgid "**Do not enable debug mode when deploying in production.**"
msgstr "**在生产中部署时, 请勿启用调试模式. **"

#: ../../config.rst:115
msgid ""
"Default: ``True`` if :data:`ENV` is ``'development'``, or ``False`` "
"otherwise."
msgstr "Default: ``True`` if :data:`ENV` is ``'development'``, or ``False`` otherwise."

#: ../../config.rst:120
msgid ""
"Enable testing mode. Exceptions are propagated rather than handled by the"
" the app's error handlers. Extensions may also change their behavior to "
"facilitate easier testing. You should enable this in your own tests."
msgstr "启用测试模式. 异常传播而不是由应用程序的错误处理程序处理. 扩展也可能会改变其行为, 以方便测试. 您应该在自己的测试中启用它. "

#: ../../config.rst:124 ../../config.rst:148 ../../config.rst:209
#: ../../config.rst:247 ../../config.rst:323 ../../config.rst:344
msgid "Default: ``False``"
msgstr "默认: ``False``"

#: ../../config.rst:128
msgid ""
"Exceptions are re-raised rather than being handled by the app's error "
"handlers. If not set, this is implicitly true if ``TESTING`` or ``DEBUG``"
" is enabled."
msgstr ""

#: ../../config.rst:132 ../../config.rst:140 ../../config.rst:158
#: ../../config.rst:172 ../../config.rst:187 ../../config.rst:194
#: ../../config.rst:217 ../../config.rst:274 ../../config.rst:298
#: ../../config.rst:336
msgid "Default: ``None``"
msgstr "默认: ``None``"

#: ../../config.rst:136
msgid ""
"Don't pop the request context when an exception occurs. If not set, this "
"is true if ``DEBUG`` is true. This allows debuggers to introspect the "
"request data on errors, and should normally not need to be set directly."
msgstr ""

#: ../../config.rst:144
msgid ""
"If there is no handler for an ``HTTPException``-type exception, re-raise "
"it to be handled by the interactive debugger instead of returning it as a"
" simple error response."
msgstr ""

#: ../../config.rst:152
msgid ""
"Trying to access a key that doesn't exist from request dicts like "
"``args`` and ``form`` will return a 400 Bad Request error page. Enable "
"this to treat the error as an unhandled exception instead so that you get"
" the interactive debugger. This is a more specific version of "
"``TRAP_HTTP_EXCEPTIONS``. If unset, it is enabled in debug mode."
msgstr ""

#: ../../config.rst:162
msgid ""
"A secret key that will be used for securely signing the session cookie "
"and can be used for any other security related needs by extensions or "
"your application. It should be a long random string of bytes, although "
"unicode is accepted too. For example, copy the output of this to your "
"config::"
msgstr ""

#: ../../config.rst:170
msgid ""
"**Do not reveal the secret key when posting questions or committing "
"code.**"
msgstr "**发布问题或提交代码时不要泄露密钥. **"

#: ../../config.rst:176
msgid ""
"The name of the session cookie. Can be changed in case you already have a"
" cookie with the same name."
msgstr "会话cookie的名称. 如果您已经拥有相同名称的cookie, 则可以更改. "

#: ../../config.rst:179
msgid "Default: ``'session'``"
msgstr "默认: ``'session'``"

#: ../../config.rst:183
msgid ""
"The domain match rule that the session cookie will be valid for. If not "
"set, the cookie will be valid for all subdomains of :data:`SERVER_NAME`. "
"If ``False``, the cookie's domain will not be set."
msgstr ""

#: ../../config.rst:191
msgid ""
"The path that the session cookie will be valid for. If not set, the "
"cookie will be valid underneath ``APPLICATION_ROOT`` or ``/`` if that is "
"not set."
msgstr ""

#: ../../config.rst:198
msgid ""
"Browsers will not allow JavaScript access to cookies marked as \"HTTP "
"only\" for security."
msgstr "浏览器不允许JavaScript访问标记为“仅限HTTP”的cookie以确保安全性. "

#: ../../config.rst:201 ../../config.rst:239 ../../config.rst:307
#: ../../config.rst:316
msgid "Default: ``True``"
msgstr "默认: ``True``"

#: ../../config.rst:205
msgid ""
"Browsers will only send cookies with requests over HTTPS if the cookie is"
" marked \"secure\". The application must be served over HTTPS for this to"
" make sense."
msgstr ""

#: ../../config.rst:213
msgid ""
"Restrict how cookies are sent with requests from external sites. Can be "
"set to ``'Lax'`` (recommended) or ``'Strict'``. See :ref:`security-"
"cookie`."
msgstr ""

#: ../../config.rst:223
msgid ""
"If ``session.permanent`` is true, the cookie's expiration will be set "
"this number of seconds in the future. Can either be a "
":class:`datetime.timedelta` or an ``int``."
msgstr ""

#: ../../config.rst:227
msgid ""
"Flask's default cookie implementation validates that the cryptographic "
"signature is not older than this value."
msgstr "Flask的默认cookie实现验证加密签名不​​早于此值. "

#: ../../config.rst:230
msgid "Default: ``timedelta(days=31)`` (``2678400`` seconds)"
msgstr "默认: ``timedelta(days=31)`` (``2678400`` seconds)"

#: ../../config.rst:234
msgid ""
"Control whether the cookie is sent with every response when "
"``session.permanent`` is true. Sending the cookie every time (the "
"default) can more reliably keep the session from expiring, but uses more "
"bandwidth. Non-permanent sessions are not affected."
msgstr ""

#: ../../config.rst:243
msgid ""
"When serving files, set the ``X-Sendfile`` header instead of serving the "
"data with Flask. Some web servers, such as Apache, recognize this and "
"serve the data more efficiently. This only makes sense when using such a "
"server."
msgstr ""

#: ../../config.rst:251
msgid ""
"When serving files, set the cache control max age to this number of "
"seconds.  Can either be a :class:`datetime.timedelta` or an ``int``. "
"Override this value on a per-file basis using "
":meth:`~flask.Flask.get_send_file_max_age` on the application or "
"blueprint."
msgstr ""

#: ../../config.rst:256
msgid "Default: ``timedelta(hours=12)`` (``43200`` seconds)"
msgstr "默认: ``timedelta(hours=12)`` (``43200`` seconds)"

#: ../../config.rst:260
msgid ""
"Inform the application what host and port it is bound to. Required for "
"subdomain route matching support."
msgstr "通知应用程序绑定的主机和端口. 子域路由匹配支持所必需的. "

#: ../../config.rst:263
msgid ""
"If set, will be used for the session cookie domain if "
":data:`SESSION_COOKIE_DOMAIN` is not set. Modern web browsers will not "
"allow setting cookies for domains without a dot. To use a domain locally,"
" add any names that should route to the app to your ``hosts`` file. ::"
msgstr ""

#: ../../config.rst:271
msgid ""
"If set, ``url_for`` can generate external URLs with only an application "
"context instead of a request context."
msgstr "如果设置, ``url_for``可以生成仅包含应用程序上下文而不是请求上下文的外部URL. “"

#: ../../config.rst:278
msgid ""
"Inform the application what path it is mounted under by the application /"
" web server."
msgstr "Inform the application what path it is mounted under by the application / web server."

#: ../../config.rst:281
msgid ""
"Will be used for the session cookie path if ``SESSION_COOKIE_PATH`` is "
"not set."
msgstr "Will be used for the session cookie path if ``SESSION_COOKIE_PATH`` is not set."

#: ../../config.rst:284
msgid "Default: ``'/'``"
msgstr "Default: ``'/'``"

#: ../../config.rst:288
msgid ""
"Use this scheme for generating external URLs when not in a request "
"context."
msgstr "不在请求上下文中时, 使用此方案生成外部URL. "

#: ../../config.rst:290
msgid "Default: ``'http'``"
msgstr "Default: ``'http'``"

#: ../../config.rst:294
msgid ""
"Don't read more than this many bytes from the incoming request data. If "
"not set and the request does not specify a ``CONTENT_LENGTH``, no data "
"will be read for security."
msgstr ""

#: ../../config.rst:302
msgid ""
"Serialize objects to ASCII-encoded JSON. If this is disabled, the JSON "
"will be returned as a Unicode string, or encoded as ``UTF-8`` by "
"``jsonify``. This has security implications when rendering the JSON into "
"JavaScript in templates, and should typically remain enabled."
msgstr ""

#: ../../config.rst:311
msgid ""
"Sort the keys of JSON objects alphabetically. This is useful for caching "
"because it ensures the data is serialized the same way no matter what "
"Python's hash seed is. While not recommended, you can disable this for a "
"possible performance improvement at the cost of caching."
msgstr ""

#: ../../config.rst:320
msgid ""
"``jsonify`` responses will be output with newlines, spaces, and "
"indentation for easier reading by humans. Always enabled in debug mode."
msgstr "``jsonify`` responses will be output with newlines, spaces, and indentation for easier reading by humans. Always enabled in debug mode."

#: ../../config.rst:327
msgid "The mimetype of ``jsonify`` responses."
msgstr "'jsonify``响应的mimetype. "

#: ../../config.rst:329
msgid "Default: ``'application/json'``"
msgstr "Default: ``'application/json'``"

#: ../../config.rst:333
msgid ""
"Reload templates when they are changed. If not set, it will be enabled in"
" debug mode."
msgstr "更改模板时重新加载模板. 如果未设置, 将在调试模式下启用. "

#: ../../config.rst:340
msgid ""
"Log debugging information tracing how a template file was loaded. This "
"can be useful to figure out why a template was not loaded or the wrong "
"file appears to be loaded."
msgstr ""

#: ../../config.rst:348
msgid ""
"Warn if cookie headers are larger than this many bytes. Defaults to "
"``4093``. Larger cookies may be silently ignored by browsers. Set to "
"``0`` to disable the warning."
msgstr ""

#: ../../config.rst:380
msgid ""
"``LOGGER_NAME`` and ``LOGGER_HANDLER_POLICY`` were removed. See "
":ref:`logging` for information about configuration."
msgstr "``LOGGER_NAME`` and ``LOGGER_HANDLER_POLICY`` were removed. See :ref:`logging` for information about configuration."

#: ../../config.rst:384
msgid "Added :data:`ENV` to reflect the :envvar:`FLASK_ENV` environment variable."
msgstr "Added :data:`ENV` to reflect the :envvar:`FLASK_ENV` environment variable."

#: ../../config.rst:387
msgid ""
"Added :data:`SESSION_COOKIE_SAMESITE` to control the session cookie's "
"``SameSite`` option."
msgstr "Added :data:`SESSION_COOKIE_SAMESITE` to control the session cookie's ``SameSite`` option."

#: ../../config.rst:390
msgid "Added :data:`MAX_COOKIE_SIZE` to control a warning from Werkzeug."
msgstr "Added :data:`MAX_COOKIE_SIZE` to control a warning from Werkzeug."

#: ../../config.rst:376
msgid ""
"``SESSION_REFRESH_EACH_REQUEST``, ``TEMPLATES_AUTO_RELOAD``, "
"``LOGGER_HANDLER_POLICY``, ``EXPLAIN_TEMPLATE_LOADING``"
msgstr "``SESSION_REFRESH_EACH_REQUEST``, ``TEMPLATES_AUTO_RELOAD``, ``LOGGER_HANDLER_POLICY``, ``EXPLAIN_TEMPLATE_LOADING``"

#: ../../config.rst:373
msgid "``JSON_AS_ASCII``, ``JSON_SORT_KEYS``, ``JSONIFY_PRETTYPRINT_REGULAR``"
msgstr "``JSON_AS_ASCII``, ``JSON_SORT_KEYS``, ``JSONIFY_PRETTYPRINT_REGULAR``"

#: ../../config.rst:370
msgid "``PREFERRED_URL_SCHEME``"
msgstr "``PREFERRED_URL_SCHEME``"

#: ../../config.rst:364
msgid ""
"``TRAP_BAD_REQUEST_ERRORS``, ``TRAP_HTTP_EXCEPTIONS``, "
"``APPLICATION_ROOT``, ``SESSION_COOKIE_DOMAIN``, ``SESSION_COOKIE_PATH``,"
" ``SESSION_COOKIE_HTTPONLY``, ``SESSION_COOKIE_SECURE``"
msgstr ""

#: ../../config.rst:361
msgid "``PROPAGATE_EXCEPTIONS``, ``PRESERVE_CONTEXT_ON_EXCEPTION``"
msgstr "``PROPAGATE_EXCEPTIONS``, ``PRESERVE_CONTEXT_ON_EXCEPTION``"

#: ../../config.rst:358
msgid "``MAX_CONTENT_LENGTH``"
msgstr "``MAX_CONTENT_LENGTH``"

#: ../../config.rst:355
msgid "``SERVER_NAME``"
msgstr "``SERVER_NAME``"

#: ../../config.rst:352
msgid "``LOGGER_NAME``"
msgstr "``LOGGER_NAME``"

#: ../../config.rst:394
msgid "Configuring from Files"
msgstr "从文件配置"

#: ../../config.rst:396
msgid ""
"Configuration becomes more useful if you can store it in a separate file,"
" ideally located outside the actual application package. This makes "
"packaging and distributing your application possible via various package "
"handling tools (:ref:`distribute-deployment`) and finally modifying the "
"configuration file afterwards."
msgstr ""

#: ../../config.rst:402
msgid "So a common pattern is this::"
msgstr "所以一个共同的模式就是这个::"

#: ../../config.rst:408
msgid ""
"This first loads the configuration from the "
"`yourapplication.default_settings` module and then overrides the values "
"with the contents of the file the :envvar:`YOURAPPLICATION_SETTINGS` "
"environment variable points to.  This environment variable can be set on "
"Linux or OS X with the export command in the shell before starting the "
"server::"
msgstr ""

#: ../../config.rst:420 ../../config.rst:456
msgid "On Windows systems use the `set` builtin instead::"
msgstr "在Windows系统上使用`set`内置::"

#: ../../config.rst:424
msgid ""
"The configuration files themselves are actual Python files.  Only values "
"in uppercase are actually stored in the config object later on.  So make "
"sure to use uppercase letters for your config keys."
msgstr ""

#: ../../config.rst:428
msgid "Here is an example of a configuration file::"
msgstr "以下是配置文件的示例::"

#: ../../config.rst:434
msgid ""
"Make sure to load the configuration very early on, so that extensions "
"have the ability to access the configuration when starting up.  There are"
" other methods on the config object as well to load from individual "
"files.  For a complete reference, read the :class:`~flask.Config` "
"object's documentation."
msgstr ""

#: ../../config.rst:441
msgid "Configuring from Environment Variables"
msgstr "从环境变量配置"

#: ../../config.rst:443
msgid ""
"In addition to pointing to configuration files using environment "
"variables, you may find it useful (or necessary) to control your "
"configuration values directly from the environment."
msgstr ""

#: ../../config.rst:447
msgid ""
"Environment variables can be set on Linux or OS X with the export command"
" in the shell before starting the server::"
msgstr "在启动服务器之前, 可以使用shell中的export命令在Linux或OS X上设置环境变量::"

#: ../../config.rst:461
msgid ""
"While this approach is straightforward to use, it is important to "
"remember that environment variables are strings -- they are not "
"automatically deserialized into Python types."
msgstr ""

#: ../../config.rst:465
msgid ""
"Here is an example of a configuration file that uses environment "
"variables::"
msgstr "以下是使用环境变量的配置文件的示例::"

#: ../../config.rst:480
msgid ""
"Notice that any value besides an empty string will be interpreted as a "
"boolean ``True`` value in Python, which requires care if an environment "
"explicitly sets values intended to be ``False``."
msgstr ""

#: ../../config.rst:484
msgid ""
"Make sure to load the configuration very early on, so that extensions "
"have the ability to access the configuration when starting up.  There are"
" other methods on the config object as well to load from individual "
"files.  For a complete reference, read the :class:`~flask.Config` class "
"documentation."
msgstr ""

#: ../../config.rst:490
msgid "Configuration Best Practices"
msgstr "配置最佳实践"

#: ../../config.rst:492
#, python-format
msgid ""
"The downside with the approach mentioned earlier is that it makes testing"
" a little harder.  There is no single 100% solution for this problem in "
"general, but there are a couple of things you can keep in mind to improve"
" that experience:"
msgstr ""

#: ../../config.rst:497
msgid ""
"Create your application in a function and register blueprints on it. That"
" way you can create multiple instances of your application with different"
" configurations attached which makes unittesting a lot easier.  You can "
"use this to pass in configuration as needed."
msgstr ""

#: ../../config.rst:502
msgid ""
"Do not write code that needs the configuration at import time.  If you "
"limit yourself to request-only accesses to the configuration you can "
"reconfigure the object later on as needed."
msgstr ""

#: ../../config.rst:509
msgid "Development / Production"
msgstr "开发/生产"

#: ../../config.rst:511
msgid ""
"Most applications need more than one configuration.  There should be at "
"least separate configurations for the production server and the one used "
"during development.  The easiest way to handle this is to use a default "
"configuration that is always loaded and part of the version control, and "
"a separate configuration that overrides the values as necessary as "
"mentioned in the example above::"
msgstr ""

#: ../../config.rst:522
msgid ""
"Then you just have to add a separate :file:`config.py` file and export "
"``YOURAPPLICATION_SETTINGS=/path/to/config.py`` and you are done.  "
"However there are alternative ways as well.  For example you could use "
"imports or subclassing."
msgstr ""

#: ../../config.rst:527
msgid ""
"What is very popular in the Django world is to make the import explicit "
"in the config file by adding ``from yourapplication.default_settings "
"import *`` to the top of the file and then overriding the changes by "
"hand. You could also inspect an environment variable like "
"``YOURAPPLICATION_MODE`` and set that to `production`, `development` etc "
"and import different hardcoded files based on that."
msgstr ""

#: ../../config.rst:534
msgid ""
"An interesting pattern is also to use classes and inheritance for "
"configuration::"
msgstr "一个有趣的模式也是使用类和继承进行配置::"

#: ../../config.rst:551
msgid ""
"To enable such a config you just have to call into "
":meth:`~flask.Config.from_object`::"
msgstr "要启用这样的配置, 您只需调用:meth:`~flask.Config.from_object`::"

#: ../../config.rst:556
msgid ""
"Note that :meth:`~flask.Config.from_object` does not instantiate the "
"class object. If you need to instantiate the class, such as to access a "
"property, then you must do so before calling "
":meth:`~flask.Config.from_object`::"
msgstr ""

#: ../../config.rst:568
msgid ""
"Instantiating the configuration object allows you to use ``@property`` in"
" your configuration classes::"
msgstr "实例化配置对象允许您在配置类中使用``@ property``::"

#: ../../config.rst:594
msgid ""
"There are many different ways and it's up to you how you want to manage "
"your configuration files.  However here a list of good recommendations:"
msgstr "有许多不同的方法, 由您决定如何管理配置文件. 不过这里列出了很好的建议:"

#: ../../config.rst:597
msgid ""
"Keep a default configuration in version control.  Either populate the "
"config with this default configuration or import it in your own "
"configuration files before overriding values."
msgstr ""

#: ../../config.rst:600
msgid ""
"Use an environment variable to switch between the configurations. This "
"can be done from outside the Python interpreter and makes development and"
" deployment much easier because you can quickly and easily switch between"
" different configs without having to touch the code at all.  If you are "
"working often on different projects you can even create your own script "
"for sourcing that activates a virtualenv and exports the development "
"configuration for you."
msgstr ""

#: ../../config.rst:607
msgid ""
"Use a tool like `fabric`_ in production to push code and configurations "
"separately to the production server(s).  For some details about how to do"
" that, head over to the :ref:`fabric-deployment` pattern."
msgstr ""

#: ../../config.rst:618
msgid "Instance Folders"
msgstr "实例文件夹"

#: ../../config.rst:622
msgid ""
"Flask 0.8 introduces instance folders.  Flask for a long time made it "
"possible to refer to paths relative to the application's folder directly "
"(via :attr:`Flask.root_path`).  This was also how many developers loaded "
"configurations stored next to the application.  Unfortunately however "
"this only works well if applications are not packages in which case the "
"root path refers to the contents of the package."
msgstr ""

#: ../../config.rst:629
msgid ""
"With Flask 0.8 a new attribute was introduced: "
":attr:`Flask.instance_path`.  It refers to a new concept called the "
"“instance folder”.  The instance folder is designed to not be under "
"version control and be deployment specific.  It's the perfect place to "
"drop things that either change at runtime or configuration files."
msgstr ""

#: ../../config.rst:635
msgid ""
"You can either explicitly provide the path of the instance folder when "
"creating the Flask application or you can let Flask autodetect the "
"instance folder.  For explicit configuration use the `instance_path` "
"parameter::"
msgstr ""

#: ../../config.rst:642
msgid "Please keep in mind that this path *must* be absolute when provided."
msgstr "请记住, 这条路径*在提供时必须是绝对的. "

#: ../../config.rst:644
msgid ""
"If the `instance_path` parameter is not provided the following default "
"locations are used:"
msgstr "如果未提供`instance_path`参数, 则使用以下默认位置:"

#: ../../config.rst:647
msgid "Uninstalled module::"
msgstr "卸载模块::"

#: ../../config.rst:652
msgid "Uninstalled package::"
msgstr "卸载包::"

#: ../../config.rst:658
msgid "Installed module or package::"
msgstr "已安装的模块或包::"

#: ../../config.rst:663
msgid ""
"``$PREFIX`` is the prefix of your Python installation.  This can be "
"``/usr`` or the path to your virtualenv.  You can print the value of "
"``sys.prefix`` to see what the prefix is set to."
msgstr ""

#: ../../config.rst:667
msgid ""
"Since the config object provided loading of configuration files from "
"relative filenames we made it possible to change the loading via "
"filenames to be relative to the instance path if wanted.  The behavior of"
" relative paths in config files can be flipped between “relative to the "
"application root” (the default) to “relative to instance folder” via the "
"`instance_relative_config` switch to the application constructor::"
msgstr ""

#: ../../config.rst:676
msgid ""
"Here is a full example of how to configure Flask to preload the config "
"from a module and then override the config from a file in the instance "
"folder if it exists::"
msgstr ""

#: ../../config.rst:684
msgid ""
"The path to the instance folder can be found via the "
":attr:`Flask.instance_path`.  Flask also provides a shortcut to open a "
"file from the instance folder with :meth:`Flask.open_instance_resource`."
msgstr ""

#: ../../config.rst:688
msgid "Example usage for both::"
msgstr "两者的示例用法::"

