# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets Team
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-20 10:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../unicode.rst:2
msgid "Unicode in Flask"
msgstr "Flask中的Unicode"

#: ../../unicode.rst:4
msgid ""
"Flask, like Jinja2 and Werkzeug, is totally Unicode based when it comes "
"to text.  Not only these libraries, also the majority of web related "
"Python libraries that deal with text.  If you don't know Unicode so far, "
"you should probably read `The Absolute Minimum Every Software Developer "
"Absolutely, Positively Must Know About Unicode and Character Sets "
"<https://www.joelonsoftware.com/articles/Unicode.html>`_.  This part of "
"the documentation just tries to cover the very basics so that you have a "
"pleasant experience with Unicode related things."
msgstr ""

#: ../../unicode.rst:14
msgid "Automatic Conversion"
msgstr "Automatic Conversion"

#: ../../unicode.rst:16
msgid ""
"Flask has a few assumptions about your application (which you can change "
"of course) that give you basic and painless Unicode support:"
msgstr "Flask has a few assumptions about your application (which you can change of course) that give you basic and painless Unicode support:"

#: ../../unicode.rst:19
msgid "the encoding for text on your website is UTF-8"
msgstr "the encoding for text on your website is UTF-8"

#: ../../unicode.rst:20
msgid ""
"internally you will always use Unicode exclusively for text except for "
"literal strings with only ASCII character points."
msgstr "internally you will always use Unicode exclusively for text except for literal strings with only ASCII character points."

#: ../../unicode.rst:22
msgid ""
"encoding and decoding happens whenever you are talking over a protocol "
"that requires bytes to be transmitted."
msgstr "encoding and decoding happens whenever you are talking over a protocol that requires bytes to be transmitted."

#: ../../unicode.rst:25
msgid "So what does this mean to you?"
msgstr "So what does this mean to you?"

#: ../../unicode.rst:27
msgid ""
"HTTP is based on bytes.  Not only the protocol, also the system used to "
"address documents on servers (so called URIs or URLs).  However HTML "
"which is usually transmitted on top of HTTP supports a large variety of "
"character sets and which ones are used, are transmitted in an HTTP "
"header. To not make this too complex Flask just assumes that if you are "
"sending Unicode out you want it to be UTF-8 encoded.  Flask will do the "
"encoding and setting of the appropriate headers for you."
msgstr ""

#: ../../unicode.rst:35
msgid ""
"The same is true if you are talking to databases with the help of "
"SQLAlchemy or a similar ORM system.  Some databases have a protocol that "
"already transmits Unicode and if they do not, SQLAlchemy or your other "
"ORM should take care of that."
msgstr ""

#: ../../unicode.rst:41
msgid "The Golden Rule"
msgstr "The Golden Rule"

#: ../../unicode.rst:43
msgid ""
"So the rule of thumb: if you are not dealing with binary data, work with "
"Unicode.  What does working with Unicode in Python 2.x mean?"
msgstr "So the rule of thumb: if you are not dealing with binary data, work with Unicode.  What does working with Unicode in Python 2.x mean?"

#: ../../unicode.rst:46
msgid ""
"as long as you are using ASCII charpoints only (basically numbers, some "
"special characters of latin letters without umlauts or anything fancy) "
"you can use regular string literals (``'Hello World'``)."
msgstr ""

#: ../../unicode.rst:49
msgid ""
"if you need anything else than ASCII in a string you have to mark this "
"string as Unicode string by prefixing it with a lowercase `u`. (like "
"``u'Hänsel und Gretel'``)"
msgstr ""

#: ../../unicode.rst:52
msgid ""
"if you are using non-Unicode characters in your Python files you have to "
"tell Python which encoding your file uses.  Again, I recommend UTF-8 for "
"this purpose.  To tell the interpreter your encoding you can put the ``# "
"-*- coding: utf-8 -*-`` into the first or second line of your Python "
"source file."
msgstr ""

#: ../../unicode.rst:57
msgid ""
"Jinja is configured to decode the template files from UTF-8.  So make "
"sure to tell your editor to save the file as UTF-8 there as well."
msgstr "Jinja is configured to decode the template files from UTF-8.  So make sure to tell your editor to save the file as UTF-8 there as well."

#: ../../unicode.rst:61
msgid "Encoding and Decoding Yourself"
msgstr "Encoding and Decoding Yourself"

#: ../../unicode.rst:63
msgid ""
"If you are talking with a filesystem or something that is not really "
"based on Unicode you will have to ensure that you decode properly when "
"working with Unicode interface.  So for example if you want to load a "
"file on the filesystem and embed it into a Jinja2 template you will have "
"to decode it from the encoding of that file.  Here the old problem that "
"text files do not specify their encoding comes into play.  So do yourself"
" a favour and limit yourself to UTF-8 for text files as well."
msgstr ""

#: ../../unicode.rst:71
msgid ""
"Anyways.  To load such a file with Unicode you can use the built-in "
":meth:`str.decode` method::"
msgstr "Anyways.  To load such a file with Unicode you can use the built-in :meth:`str.decode` method::"

#: ../../unicode.rst:78
msgid ""
"To go from Unicode into a specific charset such as UTF-8 you can use the "
":meth:`unicode.encode` method::"
msgstr "To go from Unicode into a specific charset such as UTF-8 you can use the :meth:`unicode.encode` method::"

#: ../../unicode.rst:86
msgid "Configuring Editors"
msgstr "Configuring Editors"

#: ../../unicode.rst:88
msgid ""
"Most editors save as UTF-8 by default nowadays but in case your editor is"
" not configured to do this you have to change it.  Here some common ways "
"to set your editor to store as UTF-8:"
msgstr ""

#: ../../unicode.rst:92
msgid "Vim: put ``set enc=utf-8`` to your ``.vimrc`` file."
msgstr "Vim: put ``set enc=utf-8`` to your ``.vimrc`` file."

#: ../../unicode.rst:94
msgid ""
"Emacs: either use an encoding cookie or put this into your ``.emacs`` "
"file::"
msgstr "Emacs: either use an encoding cookie or put this into your ``.emacs`` file::"

#: ../../unicode.rst:100
msgid "Notepad++:"
msgstr "Notepad++:"

#: ../../unicode.rst:102
msgid "Go to *Settings -> Preferences ...*"
msgstr "Go to *Settings -> Preferences ...*"

#: ../../unicode.rst:103
msgid "Select the \"New Document/Default Directory\" tab"
msgstr "Select the \"New Document/Default Directory\" tab"

#: ../../unicode.rst:104
msgid "Select \"UTF-8 without BOM\" as encoding"
msgstr "Select \"UTF-8 without BOM\" as encoding"

#: ../../unicode.rst:106
msgid ""
"It is also recommended to use the Unix newline format, you can select it "
"in the same panel but this is not a requirement."
msgstr "It is also recommended to use the Unix newline format, you can select it in the same panel but this is not a requirement."

