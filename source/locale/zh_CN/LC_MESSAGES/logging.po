# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets Team
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-20 10:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../logging.rst:4
msgid "Logging"
msgstr "记录"

#: ../../logging.rst:6
msgid ""
"Flask uses standard Python :mod:`logging`. All Flask-related messages are"
" logged under the ``'flask'`` logger namespace. :meth:`Flask.logger "
"<flask.Flask.logger>` returns the logger named ``'flask.app'``, and can "
"be used to log messages for your application. ::"
msgstr ""

#: ../../logging.rst:25
msgid "Basic Configuration"
msgstr "基本配置"

#: ../../logging.rst:27
msgid ""
"When you want to configure logging for your project, you should do it as "
"soon as possible when the program starts. If :meth:`app.logger "
"<flask.Flask.logger>` is accessed before logging is configured, it will "
"add a default handler. If possible, configure logging before creating the"
" application object."
msgstr ""

#: ../../logging.rst:32
msgid ""
"This example uses :func:`~logging.config.dictConfig` to create a logging "
"configuration similar to Flask's default, except for all logs::"
msgstr "此示例使用:func:`~logging.config.dictConfig`创建类似于Flask默认的日志记录配置, 但所有日志除外::"

#: ../../logging.rst:57
msgid "Default Configuration"
msgstr "默认配置"

#: ../../logging.rst:59
msgid ""
"If you do not configure logging yourself, Flask will add a "
":class:`~logging.StreamHandler` to :meth:`app.logger "
"<flask.Flask.logger>` automatically. During requests, it will write to "
"the stream specified by the WSGI server in ``environ['wsgi.errors']`` "
"(which is usually :data:`sys.stderr`). Outside a request, it will log to "
":data:`sys.stderr`."
msgstr ""

#: ../../logging.rst:67
msgid "Removing the Default Handler"
msgstr "删除默认处理程序"

#: ../../logging.rst:69
msgid ""
"If you configured logging after accessing :meth:`app.logger "
"<flask.Flask.logger>`, and need to remove the default handler, you can "
"import and remove it::"
msgstr ""

#: ../../logging.rst:79
msgid "Email Errors to Admins"
msgstr "向管理员发送电子邮件错误"

#: ../../logging.rst:81
msgid ""
"When running the application on a remote server for production, you "
"probably won't be looking at the log messages very often. The WSGI server"
" will probably send log messages to a file, and you'll only check that "
"file if a user tells you something went wrong."
msgstr ""

#: ../../logging.rst:86
msgid ""
"To be proactive about discovering and fixing bugs, you can configure a "
":class:`logging.handlers.SMTPHandler` to send an email when errors and "
"higher are logged. ::"
msgstr ""

#: ../../logging.rst:107
msgid ""
"This requires that you have an SMTP server set up on the same server. See"
" the Python docs for more information about configuring the handler."
msgstr "This requires that you have an SMTP server set up on the same server. See the Python docs for more information about configuring the handler."

#: ../../logging.rst:112
msgid "Injecting Request Information"
msgstr "注入请求信息"

#: ../../logging.rst:114
msgid ""
"Seeing more information about the request, such as the IP address, may "
"help debugging some errors. You can subclass :class:`logging.Formatter` "
"to inject your own fields that can be used in messages. You can change "
"the formatter for Flask's default handler, the mail handler defined "
"above, or any other handler. ::"
msgstr ""

#: ../../logging.rst:138
msgid "Other Libraries"
msgstr "其他图书馆"

#: ../../logging.rst:140
msgid ""
"Other libraries may use logging extensively, and you want to see relevant"
" messages from those logs too. The simplest way to do this is to add "
"handlers to the root logger instead of only the app logger. ::"
msgstr ""

#: ../../logging.rst:150
msgid ""
"Depending on your project, it may be more useful to configure each logger"
" you care about separately, instead of configuring only the root logger. "
"::"
msgstr ""

#: ../../logging.rst:163
msgid "Werkzeug"
msgstr "Werkzeug"

#: ../../logging.rst:165
msgid ""
"Werkzeug logs basic request/response information to the ``'werkzeug'`` "
"logger. If the root logger has no handlers configured, Werkzeug adds a "
":class:`~logging.StreamHandler` to its logger."
msgstr ""

#: ../../logging.rst:171
msgid "Flask Extensions"
msgstr " Flask 扩展"

#: ../../logging.rst:173
msgid ""
"Depending on the situation, an extension may choose to log to "
":meth:`app.logger <flask.Flask.logger>` or its own named logger. Consult "
"each extension's documentation for details."
msgstr ""

