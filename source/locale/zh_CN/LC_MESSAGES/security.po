# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets Team
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-20 10:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../security.rst:2
msgid "Security Considerations"
msgstr "安全考虑因素"

#: ../../security.rst:4
msgid ""
"Web applications usually face all kinds of security problems and it's "
"very hard to get everything right.  Flask tries to solve a few of these "
"things for you, but there are a couple more you have to take care of "
"yourself."
msgstr ""

#: ../../security.rst:11
msgid "Cross-Site Scripting (XSS)"
msgstr "跨站点脚本(XSS)"

#: ../../security.rst:13
msgid ""
"Cross site scripting is the concept of injecting arbitrary HTML (and with"
" it JavaScript) into the context of a website.  To remedy this, "
"developers have to properly escape text so that it cannot include "
"arbitrary HTML tags.  For more information on that have a look at the "
"Wikipedia article on `Cross-Site Scripting <https://en.wikipedia.org/wiki"
"/Cross-site_scripting>`_."
msgstr ""

#: ../../security.rst:20
msgid ""
"Flask configures Jinja2 to automatically escape all values unless "
"explicitly told otherwise.  This should rule out all XSS problems caused "
"in templates, but there are still other places where you have to be "
"careful:"
msgstr ""

#: ../../security.rst:25
msgid "generating HTML without the help of Jinja2"
msgstr "在没有Jinja2帮助的情况下生成HTML"

#: ../../security.rst:26
msgid "calling :class:`~flask.Markup` on data submitted by users"
msgstr "对用户提交的数据调用:class:`~flask.Markup`"

#: ../../security.rst:27
msgid ""
"sending out HTML from uploaded files, never do that, use the ``Content-"
"Disposition: attachment`` header to prevent that problem."
msgstr "从上传的文件发送HTML, 从不这样做, 使用``Content-Disposition:attachment``标题来防止这个问题. "

#: ../../security.rst:29
msgid ""
"sending out textfiles from uploaded files.  Some browsers are using "
"content-type guessing based on the first few bytes so users could trick a"
" browser to execute HTML."
msgstr ""

#: ../../security.rst:33
msgid ""
"Another thing that is very important are unquoted attributes.  While "
"Jinja2 can protect you from XSS issues by escaping HTML, there is one "
"thing it cannot protect you from: XSS by attribute injection.  To counter"
" this possible attack vector, be sure to always quote your attributes "
"with either double or single quotes when using Jinja expressions in them:"
msgstr ""

#: ../../security.rst:43
msgid ""
"Why is this necessary?  Because if you would not be doing that, an "
"attacker could easily inject custom JavaScript handlers.  For example an "
"attacker could inject this piece of HTML+JavaScript:"
msgstr ""

#: ../../security.rst:51
msgid ""
"When the user would then move with the mouse over the input, the cookie "
"would be presented to the user in an alert window.  But instead of "
"showing the cookie to the user, a good attacker might also execute any "
"other JavaScript code.  In combination with CSS injections the attacker "
"might even make the element fill out the entire page so that the user "
"would just have to have the mouse anywhere on the page to trigger the "
"attack."
msgstr ""

#: ../../security.rst:58
msgid ""
"There is one class of XSS issues that Jinja's escaping does not protect "
"against. The ``a`` tag's ``href`` attribute can contain a `javascript:` "
"URI, which the browser will execute when clicked if not secured properly."
msgstr ""

#: ../../security.rst:67
msgid ""
"To prevent this, you'll need to set the :ref:`security-csp` response "
"header."
msgstr "为防止这种情况, 您需要设置:ref:`security-csp`响应头. "

#: ../../security.rst:70
msgid "Cross-Site Request Forgery (CSRF)"
msgstr "跨站请求伪造(CSRF)"

#: ../../security.rst:72
msgid ""
"Another big problem is CSRF.  This is a very complex topic and I won't "
"outline it here in detail just mention what it is and how to "
"theoretically prevent it."
msgstr ""

#: ../../security.rst:76
msgid ""
"If your authentication information is stored in cookies, you have "
"implicit state management.  The state of \"being logged in\" is "
"controlled by a cookie, and that cookie is sent with each request to a "
"page. Unfortunately that includes requests triggered by 3rd party sites."
"  If you don't keep that in mind, some people might be able to trick your"
" application's users with social engineering to do stupid things without "
"them knowing."
msgstr ""

#: ../../security.rst:84
msgid ""
"Say you have a specific URL that, when you sent ``POST`` requests to will"
" delete a user's profile (say ``http://example.com/user/delete``).  If an"
" attacker now creates a page that sends a post request to that page with "
"some JavaScript they just have to trick some users to load that page and "
"their profiles will end up being deleted."
msgstr ""

#: ../../security.rst:90
msgid ""
"Imagine you were to run Facebook with millions of concurrent users and "
"someone would send out links to images of little kittens.  When users "
"would go to that page, their profiles would get deleted while they are "
"looking at images of fluffy cats."
msgstr ""

#: ../../security.rst:95
msgid ""
"How can you prevent that?  Basically for each request that modifies "
"content on the server you would have to either use a one-time token and "
"store that in the cookie **and** also transmit it with the form data. "
"After receiving the data on the server again, you would then have to "
"compare the two tokens and ensure they are equal."
msgstr ""

#: ../../security.rst:101
msgid ""
"Why does Flask not do that for you?  The ideal place for this to happen "
"is the form validation framework, which does not exist in Flask."
msgstr "为什么Flask不适合你呢？发生这种情况的理想之处是表单验证框架, 它在Flask中不存在. "

#: ../../security.rst:107
msgid "JSON Security"
msgstr "JSON安全"

#: ../../security.rst:109
msgid ""
"In Flask 0.10 and lower, :func:`~flask.jsonify` did not serialize top-"
"level arrays to JSON. This was because of a security vulnerability in "
"ECMAScript 4."
msgstr ""

#: ../../security.rst:112
msgid ""
"ECMAScript 5 closed this vulnerability, so only extremely old browsers "
"are still vulnerable. All of these browsers have `other more serious "
"vulnerabilities "
"<https://github.com/pallets/flask/issues/248#issuecomment-59934857>`_, so"
" this behavior was changed and :func:`~flask.jsonify` now supports "
"serializing arrays."
msgstr ""

#: ../../security.rst:120
msgid "Security Headers"
msgstr "安全标题"

#: ../../security.rst:122
msgid ""
"Browsers recognize various response headers in order to control security."
" We recommend reviewing each of the headers below for use in your "
"application. The `Flask-Talisman`_ extension can be used to manage HTTPS "
"and the security headers for you."
msgstr ""

#: ../../security.rst:130
msgid "HTTP Strict Transport Security (HSTS)"
msgstr "HTTP严格传输安全(HSTS)"

#: ../../security.rst:132
msgid ""
"Tells the browser to convert all HTTP requests to HTTPS, preventing man-"
"in-the-middle (MITM) attacks. ::"
msgstr "告诉浏览器将所有HTTP请求转换为HTTPS, 防止中间人(MITM)攻击. ::"

#: ../../security.rst:137
msgid ""
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-"
"Transport-Security"
msgstr "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security"

#: ../../security.rst:142
msgid "Content Security Policy (CSP)"
msgstr "内容安全政策(CSP)"

#: ../../security.rst:144
msgid ""
"Tell the browser where it can load various types of resource from. This "
"header should be used whenever possible, but requires some work to define"
" the correct policy for your site. A very strict policy would be::"
msgstr ""

#: ../../security.rst:150
msgid "https://csp.withgoogle.com/docs/index.html"
msgstr "https://csp.withgoogle.com/docs/index.html"

#: ../../security.rst:151
msgid ""
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-"
"Security-Policy"
msgstr "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy"

#: ../../security.rst:154
msgid "X-Content-Type-Options"
msgstr "X-Content-Type-Options"

#: ../../security.rst:156
msgid ""
"Forces the browser to honor the response content type instead of trying "
"to detect it, which can be abused to generate a cross-site scripting "
"(XSS) attack. ::"
msgstr ""

#: ../../security.rst:162
msgid ""
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-"
"Options"
msgstr "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options"

#: ../../security.rst:165
msgid "X-Frame-Options"
msgstr "X-Frame-Options"

#: ../../security.rst:167
msgid ""
"Prevents external sites from embedding your site in an ``iframe``. This "
"prevents a class of attacks where clicks in the outer frame can be "
"translated invisibly to clicks on your page's elements. This is also "
"known as \"clickjacking\". ::"
msgstr ""

#: ../../security.rst:174
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"
msgstr "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options"

#: ../../security.rst:177
msgid "X-XSS-Protection"
msgstr "X-XSS-Protection"

#: ../../security.rst:179
msgid ""
"The browser will try to prevent reflected XSS attacks by not loading the "
"page if the request contains something that looks like JavaScript and the"
" response contains the same data. ::"
msgstr ""

#: ../../security.rst:185
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection"
msgstr "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection"

#: ../../security.rst:191
msgid "Set-Cookie options"
msgstr "Set-Cookie选项"

#: ../../security.rst:193
msgid ""
"These options can be added to a ``Set-Cookie`` header to improve their "
"security. Flask has configuration options to set these on the session "
"cookie. They can be set on other cookies too."
msgstr ""

#: ../../security.rst:197
msgid "``Secure`` limits cookies to HTTPS traffic only."
msgstr "``Secure``仅限cookie到HTTPS流量. "

#: ../../security.rst:198
msgid ""
"``HttpOnly`` protects the contents of cookies from being read with "
"JavaScript."
msgstr "``HttpOnly``保护cookie的内容不被JavaScript读取. "

#: ../../security.rst:200
msgid ""
"``SameSite`` restricts how cookies are sent with requests from external "
"sites. Can be set to ``'Lax'`` (recommended) or ``'Strict'``. ``Lax`` "
"prevents sending cookies with CSRF-prone requests from external sites, "
"such as submitting a form. ``Strict`` prevents sending cookies with all "
"external requests, including following regular links."
msgstr ""

#: ../../security.rst:216
msgid ""
"Specifying ``Expires`` or ``Max-Age`` options, will remove the cookie "
"after the given time, or the current time plus the age, respectively. If "
"neither option is set, the cookie will be removed when the browser is "
"closed. ::"
msgstr ""

#: ../../security.rst:223
msgid ""
"For the session cookie, if :attr:`session.permanent "
"<flask.session.permanent>` is set, then "
":data:`PERMANENT_SESSION_LIFETIME` is used to set the expiration. Flask's"
" default cookie implementation validates that the cryptographic signature"
" is not older than this value. Lowering this value may help mitigate "
"replay attacks, where intercepted cookies can be sent at a later time. ::"
msgstr ""

#: ../../security.rst:241
msgid ""
"Use :class:`itsdangerous.TimedSerializer` to sign and validate other "
"cookie values (or any values that need secure signatures)."
msgstr "使用:class:`itsdangerous.TimedSerializer`来签名并验证其他cookie值(或任何需要安全签名的值). "

#: ../../security.rst:244
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"
msgstr "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"

#: ../../security.rst:245
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"
msgstr "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"

#: ../../security.rst:251
msgid "HTTP Public Key Pinning (HPKP)"
msgstr "HTTP公钥固定(HPKP)"

#: ../../security.rst:253
msgid ""
"This tells the browser to authenticate with the server using only the "
"specific certificate key to prevent MITM attacks."
msgstr "这告诉浏览器仅使用特定证书密钥对服务器进行身份验证, 以防止MITM攻击. "

#: ../../security.rst:257
msgid ""
"Be careful when enabling this, as it is very difficult to undo if you set"
" up or upgrade your key incorrectly."
msgstr "启用此功能时要小心, 因为如果您错误地设置或升级密钥, 则很难撤消. "

#: ../../security.rst:260
msgid "https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning"
msgstr "https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning"

