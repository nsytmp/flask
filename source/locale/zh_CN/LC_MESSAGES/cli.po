# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets Team
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-20 10:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../cli.rst:6
msgid "Command Line Interface"
msgstr "命令行界面"

#: ../../cli.rst:8
msgid ""
"Installing Flask installs the ``flask`` script, a `Click`_ command line "
"interface, in your virtualenv. Executed from the terminal, this script "
"gives access to built-in, extension, and application-defined commands. "
"The ``--help`` option will give more information about any commands and "
"options."
msgstr ""

#: ../../cli.rst:17
msgid "Application Discovery"
msgstr "应用发现"

#: ../../cli.rst:19
msgid ""
"The ``flask`` command is installed by Flask, not your application; it "
"must be told where to find your application in order to use it. The "
"``FLASK_APP`` environment variable is used to specify how to load the "
"application."
msgstr ""

#: ../../cli.rst:23
msgid "Unix Bash (Linux, Mac, etc.)::"
msgstr "Unix Bash(Linux, Mac等)::"

#: ../../cli.rst:28
msgid "Windows CMD::"
msgstr "Windows CMD::"

#: ../../cli.rst:33
msgid "Windows PowerShell::"
msgstr "Windows PowerShell::"

#: ../../cli.rst:38
msgid ""
"While ``FLASK_APP`` supports a variety of options for specifying your "
"application, most use cases should be simple. Here are the typical "
"values:"
msgstr ""

#: ../../cli.rst:44
msgid "(nothing)"
msgstr "(没有)"

#: ../../cli.rst:42
msgid ""
"The file :file:`wsgi.py` is imported, automatically detecting an app "
"(``app``). This provides an easy way to create an app from a factory with"
" extra arguments."
msgstr ""

#: ../../cli.rst:48
msgid "``FLASK_APP=hello``"
msgstr "``FLASK_APP=hello``"

#: ../../cli.rst:47
msgid ""
"The name is imported, automatically detecting an app (``app``) or factory"
" (``create_app``)."
msgstr "导入名称, 自动检测应用程序(``app``)或工厂(``create_app``). "

#: ../../cli.rst:52
msgid ""
"``FLASK_APP`` has three parts: an optional path that sets the current "
"working directory, a Python file or dotted import path, and an optional "
"variable name of the instance or factory. If the name is a factory, it "
"can optionally be followed by arguments in parentheses. The following "
"values demonstrate these parts:"
msgstr ""

#: ../../cli.rst:59
msgid "``FLASK_APP=src/hello``"
msgstr "``FLASK_APP=src/hello``"

#: ../../cli.rst:59
msgid "Sets the current working directory to ``src`` then imports ``hello``."
msgstr "将当前工作目录设置为``src``然后导入``hello``. "

#: ../../cli.rst:62
msgid "``FLASK_APP=hello.web``"
msgstr "``FLASK_APP=hello.web``"

#: ../../cli.rst:62
msgid "Imports the path ``hello.web``."
msgstr "导入路径``hello.web``. "

#: ../../cli.rst:65
msgid "``FLASK_APP=hello:app2``"
msgstr "``FLASK_APP=hello:app2``"

#: ../../cli.rst:65
msgid "Uses the ``app2`` Flask instance in ``hello``."
msgstr "Uses the ``app2`` Flask instance in ``hello``."

#: ../../cli.rst:69
msgid "``FLASK_APP=\"hello:create_app('dev')\"``"
msgstr "``FLASK_APP=\"hello:create_app('dev')\"``"

#: ../../cli.rst:68
msgid ""
"The ``create_app`` factory in ``hello`` is called with the string "
"``'dev'`` as the argument."
msgstr "调用``hello``中的``create_app``工厂, 使用字符串``'dev'``作为参数. "

#: ../../cli.rst:71
msgid ""
"If ``FLASK_APP`` is not set, the command will look for a file called "
":file:`wsgi.py` or :file:`app.py` and try to detect an application "
"instance or factory."
msgstr ""

#: ../../cli.rst:75
msgid ""
"Within the given import, the command looks for an application instance "
"named ``app`` or ``application``, then any application instance. If no "
"instance is found, the command looks for a factory function named "
"``create_app`` or ``make_app`` that returns an instance."
msgstr ""

#: ../../cli.rst:80
msgid ""
"When calling an application factory, if the factory takes an argument "
"named ``script_info``, then the :class:`~cli.ScriptInfo` instance is "
"passed as a keyword argument. If the application factory takes only one "
"argument and no parentheses follow the factory name, the "
":class:`~cli.ScriptInfo` instance is passed as a positional argument. If "
"parentheses follow the factory name, their contents are parsed as Python "
"literals and passes as arguments to the function. This means that strings"
" must still be in quotes."
msgstr ""

#: ../../cli.rst:90
msgid "Run the Development Server"
msgstr "运行开发服务器"

#: ../../cli.rst:92
msgid ""
"The :func:`run <cli.run_command>` command will start the development "
"server. It replaces the :meth:`Flask.run` method in most cases. ::"
msgstr ":func:`run <cli.run_command>`命令将启动开发服务器. 在大多数情况下, 它取代了:meth:`Flask.run`方法. ::"

#: ../../cli.rst:99
msgid ""
"Do not use this command to run your application in production. Only use "
"the development server during development. The development server is "
"provided for convenience, but is not designed to be particularly secure, "
"stable, or efficient. See :ref:`deployment` for how to run in production."
msgstr ""

#: ../../cli.rst:106
msgid "Open a Shell"
msgstr "Open a Shell"

#: ../../cli.rst:108
msgid ""
"To explore the data in your application, you can start an interactive "
"Python shell with the :func:`shell <cli.shell_command>` command. An "
"application context will be active, and the app instance will be "
"imported. ::"
msgstr ""

#: ../../cli.rst:119
msgid "Use :meth:`~Flask.shell_context_processor` to add other automatic imports."
msgstr "使用:meth:`~Flask.shell_context_processor`来添加其他自动导入. "

#: ../../cli.rst:123
msgid "Environments"
msgstr "环境"

#: ../../cli.rst:127
msgid ""
"The environment in which the Flask app runs is set by the "
":envvar:`FLASK_ENV` environment variable. If not set it defaults to "
"``production``. The other recognized environment is ``development``. "
"Flask and extensions may choose to enable behaviors based on the "
"environment."
msgstr ""

#: ../../cli.rst:133
msgid ""
"If the env is set to ``development``, the ``flask`` command will enable "
"debug mode and ``flask run`` will enable the interactive debugger and "
"reloader."
msgstr ""

#: ../../cli.rst:150
msgid "Debug Mode"
msgstr "调试模式"

#: ../../cli.rst:152
msgid ""
"Debug mode will be enabled when :envvar:`FLASK_ENV` is ``development``, "
"as described above. If you want to control debug mode separately, use "
":envvar:`FLASK_DEBUG`. The value ``1`` enables it, ``0`` disables it."
msgstr ""

#: ../../cli.rst:160
msgid "Environment Variables From dotenv"
msgstr "来自dotenv的环境变量"

#: ../../cli.rst:162
msgid ""
"Rather than setting ``FLASK_APP`` each time you open a new terminal, you "
"can use Flask's dotenv support to set environment variables "
"automatically."
msgstr ""

#: ../../cli.rst:165
msgid ""
"If `python-dotenv`_ is installed, running the ``flask`` command will set "
"environment variables defined in the files :file:`.env` and "
":file:`.flaskenv`. This can be used to avoid having to set ``FLASK_APP`` "
"manually every time you open a new terminal, and to set configuration "
"using environment variables similar to how some deployment services work."
msgstr ""

#: ../../cli.rst:171
msgid ""
"Variables set on the command line are used over those set in "
":file:`.env`, which are used over those set in :file:`.flaskenv`. "
":file:`.flaskenv` should be used for public variables, such as "
"``FLASK_APP``, while :file:`.env` should not be committed to your "
"repository so that it can set private variables."
msgstr ""

#: ../../cli.rst:176
msgid ""
"Directories are scanned upwards from the directory you call ``flask`` "
"from to locate the files. The current working directory will be set to "
"the location of the file, with the assumption that that is the top level "
"project directory."
msgstr ""

#: ../../cli.rst:181
msgid ""
"The files are only loaded by the ``flask`` command or calling "
":meth:`~Flask.run`. If you would like to load these files when running in"
" production, you should call :func:`~cli.load_dotenv` manually."
msgstr ""

#: ../../cli.rst:189
msgid "Setting Command Options"
msgstr "设置命令选项"

#: ../../cli.rst:191
msgid ""
"Click is configured to load default values for command options from "
"environment variables. The variables use the pattern "
"``FLASK_COMMAND_OPTION``. For example, to set the port for the run "
"command, instead of ``flask run --port 8000``:"
msgstr ""

#: ../../cli.rst:202
msgid ""
"These can be added to the ``.flaskenv`` file just like ``FLASK_APP`` to "
"control default command options."
msgstr "These can be added to the ``.flaskenv`` file just like ``FLASK_APP`` to control default command options."

#: ../../cli.rst:207
msgid "Disable dotenv"
msgstr "禁用dotenv"

#: ../../cli.rst:209
msgid ""
"The ``flask`` command will show a message if it detects dotenv files but "
"python-dotenv is not installed."
msgstr "The ``flask`` command will show a message if it detects dotenv files but python-dotenv is not installed."

#: ../../cli.rst:217
msgid ""
"You can tell Flask not to load dotenv files even when python-dotenv is "
"installed by setting the ``FLASK_SKIP_DOTENV`` environment variable. This"
" can be useful if you want to load them manually, or if you're using a "
"project runner that loads them already. Keep in mind that the environment"
" variables must be set before the app loads or it won't configure as "
"expected."
msgstr ""

#: ../../cli.rst:231
msgid "Environment Variables From virtualenv"
msgstr "环境变量来自virtualenv"

#: ../../cli.rst:233
msgid ""
"If you do not want to install dotenv support, you can still set "
"environment variables by adding them to the end of the virtualenv's "
":file:`activate` script. Activating the virtualenv will set the "
"variables."
msgstr ""

#: ../../cli.rst:237
msgid "Unix Bash, :file:`venv/bin/activate`::"
msgstr "Unix Bash, :file:`venv/bin/activate`::"

#: ../../cli.rst:241
msgid "Windows CMD, :file:`venv\\\\Scripts\\\\activate.bat`::"
msgstr "Windows CMD, :file:`venv\\\\Scripts\\\\activate.bat`::"

#: ../../cli.rst:245
msgid ""
"It is preferred to use dotenv support over this, since :file:`.flaskenv` "
"can be committed to the repository so that it works automatically "
"wherever the project is checked out."
msgstr ""

#: ../../cli.rst:251
msgid "Custom Commands"
msgstr "自定义命令"

#: ../../cli.rst:253
msgid ""
"The ``flask`` command is implemented using `Click`_. See that project's "
"documentation for full information about writing commands."
msgstr "The ``flask`` command is implemented using `Click`_. See that project's documentation for full information about writing commands."

#: ../../cli.rst:256
msgid ""
"This example adds the command ``create_user`` that takes the argument "
"``name``. ::"
msgstr "这个例子添加了带有参数``name``的命令``create_user``. ::"

#: ../../cli.rst:273
msgid ""
"This example adds the same command, but as ``user create``, a command in "
"a group. This is useful if you want to organize multiple related "
"commands. ::"
msgstr ""

#: ../../cli.rst:294
msgid ""
"See :ref:`testing-cli` for an overview of how to test your custom "
"commands."
msgstr "有关如何测试自定义命令的概述, 请参阅:ref:`testing-cli`. "

#: ../../cli.rst:299
msgid "Application Context"
msgstr "Application Context"

#: ../../cli.rst:301
msgid ""
"Commands added using the Flask app's :attr:`~Flask.cli` "
":meth:`~cli.AppGroup.command` decorator will be executed with an "
"application context pushed, so your command and extensions have access to"
" the app and its configuration. If you create a command using the Click "
":func:`~click.command` decorator instead of the Flask decorator, you can "
"use :func:`~cli.with_appcontext` to get the same behavior. ::"
msgstr ""

#: ../../cli.rst:318
msgid "If you're sure a command doesn't need the context, you can disable it::"
msgstr "如果您确定命令不需要上下文, 则可以禁用它::"

#: ../../cli.rst:326
msgid "Plugins"
msgstr "插件"

#: ../../cli.rst:328
msgid ""
"Flask will automatically load commands specified in the "
"``flask.commands`` `entry point`_. This is useful for extensions that "
"want to add commands when they are installed. Entry points are specified "
"in :file:`setup.py` ::"
msgstr ""

#: ../../cli.rst:347
msgid ""
"Inside :file:`flask_my_extension/commands.py` you can then export a Click"
" object::"
msgstr "Inside :file:`flask_my_extension/commands.py` you can then export a Click object::"

#: ../../cli.rst:356
msgid ""
"Once that package is installed in the same virtualenv as your Flask "
"project, you can run ``flask my-command`` to invoke the command."
msgstr "一旦该软件包安装在与Flask项目相同的virtualenv中, 您就可以运行``flask my-command``来调用该命令. "

#: ../../cli.rst:363
msgid "Custom Scripts"
msgstr "自定义脚本"

#: ../../cli.rst:365
msgid ""
"When you are using the app factory pattern, it may be more convenient to "
"define your own Click script. Instead of using ``FLASK_APP`` and letting "
"Flask load your application, you can create your own Click object and "
"export it as a `console script`_ entry point."
msgstr ""

#: ../../cli.rst:370
msgid "Create an instance of :class:`~cli.FlaskGroup` and pass it the factory::"
msgstr "Create an instance of :class:`~cli.FlaskGroup` and pass it the factory::"

#: ../../cli.rst:385
msgid "Define the entry point in :file:`setup.py`::"
msgstr "Define the entry point in :file:`setup.py`::"

#: ../../cli.rst:399
msgid ""
"Install the application in the virtualenv in editable mode and the custom"
" script is available. Note that you don't need to set ``FLASK_APP``. ::"
msgstr "Install the application in the virtualenv in editable mode and the custom script is available. Note that you don't need to set ``FLASK_APP``. ::"

#: ../../cli.rst:405
msgid "Errors in Custom Scripts"
msgstr "自定义脚本中的错误"

#: ../../cli.rst:407
msgid ""
"When using a custom script, if you introduce an error in your module-"
"level code, the reloader will fail because it can no longer load the "
"entry point."
msgstr ""

#: ../../cli.rst:411
msgid ""
"The ``flask`` command, being separate from your code, does not have this "
"issue and is recommended in most cases."
msgstr "The ``flask`` command, being separate from your code, does not have this issue and is recommended in most cases."

#: ../../cli.rst:418
msgid "PyCharm Integration"
msgstr "PyCharm集成"

#: ../../cli.rst:420
msgid ""
"Prior to PyCharm 2018.1, the Flask CLI features weren't yet fully "
"integrated into PyCharm. We have to do a few tweaks to get them working "
"smoothly. These instructions should be similar for any other IDE you "
"might want to use."
msgstr ""

#: ../../cli.rst:425
msgid ""
"In PyCharm, with your project open, click on *Run* from the menu bar and "
"go to *Edit Configurations*. You'll be greeted by a screen similar to "
"this:"
msgstr ""

#: ../../cli.rst:434
msgid ""
"There's quite a few options to change, but once we've done it for one "
"command, we can easily copy the entire configuration and make a single "
"tweak to give us access to other commands, including any custom ones you "
"may implement yourself."
msgstr ""

#: ../../cli.rst:439
msgid ""
"Click the + (*Add New Configuration*) button and select *Python*. Give "
"the configuration a good descriptive name such as \"Run Flask Server\". "
"For the ``flask run`` command, check \"Single instance only\" since you "
"can't run the server more than once at the same time."
msgstr ""

#: ../../cli.rst:444
msgid "Select *Module name* from the dropdown (**A**) then input ``flask``."
msgstr "Select *Module name* from the dropdown (**A**) then input ``flask``."

#: ../../cli.rst:446
msgid ""
"The *Parameters* field (**B**) is set to the CLI command to execute (with"
" any arguments). In this example we use ``run``, which will run the "
"development server."
msgstr ""

#: ../../cli.rst:450
msgid ""
"You can skip this next step if you're using :ref:`dotenv`. We need to add"
" an environment variable (**C**) to identify our application. Click on "
"the browse button and add an entry with ``FLASK_APP`` on the left and the"
" Python import or file on the right (``hello`` for example)."
msgstr ""

#: ../../cli.rst:455
msgid ""
"Next we need to set the working directory (**D**) to be the folder where "
"our application resides."
msgstr "Next we need to set the working directory (**D**) to be the folder where our application resides."

#: ../../cli.rst:458
msgid ""
"If you have installed your project as a package in your virtualenv, you "
"may untick the *PYTHONPATH* options (**E**). This will more accurately "
"match how you deploy the app later."
msgstr ""

#: ../../cli.rst:462
msgid ""
"Click *Apply* to save the configuration, or *OK* to save and close the "
"window. Select the configuration in the main PyCharm window and click the"
" play button next to it to run the server."
msgstr ""

#: ../../cli.rst:466
msgid ""
"Now that we have a configuration which runs ``flask run`` from within "
"PyCharm, we can copy that configuration and alter the *Script* argument "
"to run a different CLI command, e.g. ``flask shell``."
msgstr ""

